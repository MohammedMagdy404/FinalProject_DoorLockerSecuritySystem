
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  000033ec  00003480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800120  00800120  00003540  2**0
                  ALLOC
  3 .stab         000030f0  00000000  00000000  00003540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000150e  00000000  00000000  00006630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a922  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000babd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c28b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 12 	call	0x24e6	; 0x24e6 <main>
      8a:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e1       	ldi	r26, 0x17	; 23
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e1       	ldi	r24, 0x17	; 23
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	64 e0       	ldi	r22, 0x04	; 4
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	65 e0       	ldi	r22, 0x05	; 5
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	66 e0       	ldi	r22, 0x06	; 6
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	64 e0       	ldi	r22, 0x04	; 4
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	65 e0       	ldi	r22, 0x05	; 5
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     baa:	1f 86       	std	Y+15, r1	; 0x0f
     bac:	bd c0       	rjmp	.+378    	; 0xd28 <KEYPAD_getPressedKey+0x1e2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     bae:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb0:	98 2f       	mov	r25, r24
     bb2:	9c 5f       	subi	r25, 0xFC	; 252
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	69 2f       	mov	r22, r25
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc0:	98 2f       	mov	r25, r24
     bc2:	9c 5f       	subi	r25, 0xFC	; 252
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	69 2f       	mov	r22, r25
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     bce:	18 8a       	std	Y+16, r1	; 0x10
     bd0:	2b c0       	rjmp	.+86     	; 0xc28 <KEYPAD_getPressedKey+0xe2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     bd2:	88 89       	ldd	r24, Y+16	; 0x10
     bd4:	98 2f       	mov	r25, r24
     bd6:	9e 5f       	subi	r25, 0xFE	; 254
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	69 2f       	mov	r22, r25
     bdc:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <GPIO_readPin>
     be0:	88 23       	and	r24, r24
     be2:	f9 f4       	brne	.+62     	; 0xc22 <KEYPAD_getPressedKey+0xdc>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							while(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED);
     be4:	88 89       	ldd	r24, Y+16	; 0x10
     be6:	98 2f       	mov	r25, r24
     be8:	9e 5f       	subi	r25, 0xFE	; 254
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	69 2f       	mov	r22, r25
     bee:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <GPIO_readPin>
     bf2:	88 23       	and	r24, r24
     bf4:	b9 f3       	breq	.-18     	; 0xbe4 <KEYPAD_getPressedKey+0x9e>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	98 2f       	mov	r25, r24
     c06:	88 89       	ldd	r24, Y+16	; 0x10
     c08:	89 0f       	add	r24, r25
     c0a:	8f 5f       	subi	r24, 0xFF	; 255
     c0c:	0e 94 99 06 	call	0xd32	; 0xd32 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
     c10:	60 96       	adiw	r28, 0x10	; 16
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     c22:	88 89       	ldd	r24, Y+16	; 0x10
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	88 8b       	std	Y+16, r24	; 0x10
     c28:	88 89       	ldd	r24, Y+16	; 0x10
     c2a:	84 30       	cpi	r24, 0x04	; 4
     c2c:	90 f2       	brcs	.-92     	; 0xbd2 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c30:	98 2f       	mov	r25, r24
     c32:	9c 5f       	subi	r25, 0xFC	; 252
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	69 2f       	mov	r22, r25
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a0 ea       	ldi	r26, 0xA0	; 160
     c44:	b0 e4       	ldi	r27, 0x40	; 64
     c46:	8b 87       	std	Y+11, r24	; 0x0b
     c48:	9c 87       	std	Y+12, r25	; 0x0c
     c4a:	ad 87       	std	Y+13, r26	; 0x0d
     c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c50:	7c 85       	ldd	r23, Y+12	; 0x0c
     c52:	8d 85       	ldd	r24, Y+13	; 0x0d
     c54:	9e 85       	ldd	r25, Y+14	; 0x0e
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	4a ef       	ldi	r20, 0xFA	; 250
     c5c:	54 e4       	ldi	r21, 0x44	; 68
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8f 83       	std	Y+7, r24	; 0x07
     c68:	98 87       	std	Y+8, r25	; 0x08
     c6a:	a9 87       	std	Y+9, r26	; 0x09
     c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	2c f4       	brge	.+10     	; 0xc90 <KEYPAD_getPressedKey+0x14a>
		__ticks = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <KEYPAD_getPressedKey+0x1c8>
	else if (__tmp > 65535)
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	4c f5       	brge	.+82     	; 0xcfa <KEYPAD_getPressedKey+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
     caa:	7c 85       	ldd	r23, Y+12	; 0x0c
     cac:	8d 85       	ldd	r24, Y+13	; 0x0d
     cae:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <KEYPAD_getPressedKey+0x1aa>
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <KEYPAD_getPressedKey+0x198>
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	8d 81       	ldd	r24, Y+5	; 0x05
     ce8:	9e 81       	ldd	r25, Y+6	; 0x06
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <KEYPAD_getPressedKey+0x18c>
     cf8:	14 c0       	rjmp	.+40     	; 0xd22 <KEYPAD_getPressedKey+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <KEYPAD_getPressedKey+0x1d4>
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     d22:	8f 85       	ldd	r24, Y+15	; 0x0f
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	8f 87       	std	Y+15, r24	; 0x0f
     d28:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <KEYPAD_getPressedKey+0x1ea>
     d2e:	3f cf       	rjmp	.-386    	; 0xbae <KEYPAD_getPressedKey+0x68>
     d30:	3c cf       	rjmp	.-392    	; 0xbaa <KEYPAD_getPressedKey+0x64>

00000d32 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <KEYPAD_4x4_adjustKeyNumber+0x6>
     d38:	00 d0       	rcall	.+0      	; 0xd3a <KEYPAD_4x4_adjustKeyNumber+0x8>
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     d40:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	3c 83       	std	Y+4, r19	; 0x04
     d4a:	2b 83       	std	Y+3, r18	; 0x03
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	88 30       	cpi	r24, 0x08	; 8
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <KEYPAD_4x4_adjustKeyNumber+0x26>
     d56:	70 c0       	rjmp	.+224    	; 0xe38 <KEYPAD_4x4_adjustKeyNumber+0x106>
     d58:	2b 81       	ldd	r18, Y+3	; 0x03
     d5a:	3c 81       	ldd	r19, Y+4	; 0x04
     d5c:	29 30       	cpi	r18, 0x09	; 9
     d5e:	31 05       	cpc	r19, r1
     d60:	5c f5       	brge	.+86     	; 0xdb8 <KEYPAD_4x4_adjustKeyNumber+0x86>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	84 30       	cpi	r24, 0x04	; 4
     d68:	91 05       	cpc	r25, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <KEYPAD_4x4_adjustKeyNumber+0x3c>
     d6c:	59 c0       	rjmp	.+178    	; 0xe20 <KEYPAD_4x4_adjustKeyNumber+0xee>
     d6e:	2b 81       	ldd	r18, Y+3	; 0x03
     d70:	3c 81       	ldd	r19, Y+4	; 0x04
     d72:	25 30       	cpi	r18, 0x05	; 5
     d74:	31 05       	cpc	r19, r1
     d76:	9c f4       	brge	.+38     	; 0xd9e <KEYPAD_4x4_adjustKeyNumber+0x6c>
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	91 05       	cpc	r25, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <KEYPAD_4x4_adjustKeyNumber+0x52>
     d82:	48 c0       	rjmp	.+144    	; 0xe14 <KEYPAD_4x4_adjustKeyNumber+0xe2>
     d84:	2b 81       	ldd	r18, Y+3	; 0x03
     d86:	3c 81       	ldd	r19, Y+4	; 0x04
     d88:	23 30       	cpi	r18, 0x03	; 3
     d8a:	31 05       	cpc	r19, r1
     d8c:	0c f0       	brlt	.+2      	; 0xd90 <KEYPAD_4x4_adjustKeyNumber+0x5e>
     d8e:	45 c0       	rjmp	.+138    	; 0xe1a <KEYPAD_4x4_adjustKeyNumber+0xe8>
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	91 05       	cpc	r25, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <KEYPAD_4x4_adjustKeyNumber+0x6a>
     d9a:	39 c0       	rjmp	.+114    	; 0xe0e <KEYPAD_4x4_adjustKeyNumber+0xdc>
     d9c:	67 c0       	rjmp	.+206    	; 0xe6c <KEYPAD_4x4_adjustKeyNumber+0x13a>
     d9e:	2b 81       	ldd	r18, Y+3	; 0x03
     da0:	3c 81       	ldd	r19, Y+4	; 0x04
     da2:	26 30       	cpi	r18, 0x06	; 6
     da4:	31 05       	cpc	r19, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <KEYPAD_4x4_adjustKeyNumber+0x78>
     da8:	41 c0       	rjmp	.+130    	; 0xe2c <KEYPAD_4x4_adjustKeyNumber+0xfa>
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	87 30       	cpi	r24, 0x07	; 7
     db0:	91 05       	cpc	r25, r1
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <KEYPAD_4x4_adjustKeyNumber+0x84>
     db4:	3e c0       	rjmp	.+124    	; 0xe32 <KEYPAD_4x4_adjustKeyNumber+0x100>
     db6:	37 c0       	rjmp	.+110    	; 0xe26 <KEYPAD_4x4_adjustKeyNumber+0xf4>
     db8:	2b 81       	ldd	r18, Y+3	; 0x03
     dba:	3c 81       	ldd	r19, Y+4	; 0x04
     dbc:	2c 30       	cpi	r18, 0x0C	; 12
     dbe:	31 05       	cpc	r19, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <KEYPAD_4x4_adjustKeyNumber+0x92>
     dc2:	46 c0       	rjmp	.+140    	; 0xe50 <KEYPAD_4x4_adjustKeyNumber+0x11e>
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	8d 30       	cpi	r24, 0x0D	; 13
     dca:	91 05       	cpc	r25, r1
     dcc:	5c f4       	brge	.+22     	; 0xde4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
     dce:	2b 81       	ldd	r18, Y+3	; 0x03
     dd0:	3c 81       	ldd	r19, Y+4	; 0x04
     dd2:	2a 30       	cpi	r18, 0x0A	; 10
     dd4:	31 05       	cpc	r19, r1
     dd6:	b1 f1       	breq	.+108    	; 0xe44 <KEYPAD_4x4_adjustKeyNumber+0x112>
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	8b 30       	cpi	r24, 0x0B	; 11
     dde:	91 05       	cpc	r25, r1
     de0:	a4 f5       	brge	.+104    	; 0xe4a <KEYPAD_4x4_adjustKeyNumber+0x118>
     de2:	2d c0       	rjmp	.+90     	; 0xe3e <KEYPAD_4x4_adjustKeyNumber+0x10c>
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	3c 81       	ldd	r19, Y+4	; 0x04
     de8:	2e 30       	cpi	r18, 0x0E	; 14
     dea:	31 05       	cpc	r19, r1
     dec:	b9 f1       	breq	.+110    	; 0xe5c <KEYPAD_4x4_adjustKeyNumber+0x12a>
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	8e 30       	cpi	r24, 0x0E	; 14
     df4:	91 05       	cpc	r25, r1
     df6:	7c f1       	brlt	.+94     	; 0xe56 <KEYPAD_4x4_adjustKeyNumber+0x124>
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	3c 81       	ldd	r19, Y+4	; 0x04
     dfc:	2f 30       	cpi	r18, 0x0F	; 15
     dfe:	31 05       	cpc	r19, r1
     e00:	79 f1       	breq	.+94     	; 0xe60 <KEYPAD_4x4_adjustKeyNumber+0x12e>
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	80 31       	cpi	r24, 0x10	; 16
     e08:	91 05       	cpc	r25, r1
     e0a:	69 f1       	breq	.+90     	; 0xe66 <KEYPAD_4x4_adjustKeyNumber+0x134>
     e0c:	2f c0       	rjmp	.+94     	; 0xe6c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     e0e:	87 e0       	ldi	r24, 0x07	; 7
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	2e c0       	rjmp	.+92     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	2b c0       	rjmp	.+86     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     e1a:	89 e0       	ldi	r24, 0x09	; 9
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	28 c0       	rjmp	.+80     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
     e20:	8f e2       	ldi	r24, 0x2F	; 47
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	25 c0       	rjmp	.+74     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	22 c0       	rjmp	.+68     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     e2c:	85 e0       	ldi	r24, 0x05	; 5
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	1f c0       	rjmp	.+62     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     e32:	86 e0       	ldi	r24, 0x06	; 6
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	1c c0       	rjmp	.+56     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     e38:	8a e2       	ldi	r24, 0x2A	; 42
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	19 c0       	rjmp	.+50     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	13 c0       	rjmp	.+38     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	10 c0       	rjmp	.+32     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     e50:	8d e2       	ldi	r24, 0x2D	; 45
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
     e56:	8d e0       	ldi	r24, 0x0D	; 13
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
     e5c:	19 82       	std	Y+1, r1	; 0x01
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     e60:	8d e3       	ldi	r24, 0x3D	; 61
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	05 c0       	rjmp	.+10     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     e66:	8b e2       	ldi	r24, 0x2B	; 43
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
} 
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	2e 97       	sbiw	r28, 0x0e	; 14
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <GPIO_setupPinDirection>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a0 ea       	ldi	r26, 0xA0	; 160
     eae:	b1 e4       	ldi	r27, 0x41	; 65
     eb0:	8b 87       	std	Y+11, r24	; 0x0b
     eb2:	9c 87       	std	Y+12, r25	; 0x0c
     eb4:	ad 87       	std	Y+13, r26	; 0x0d
     eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eba:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a ef       	ldi	r20, 0xFA	; 250
     ec6:	54 e4       	ldi	r21, 0x44	; 68
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8f 83       	std	Y+7, r24	; 0x07
     ed2:	98 87       	std	Y+8, r25	; 0x08
     ed4:	a9 87       	std	Y+9, r26	; 0x09
     ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed8:	6f 81       	ldd	r22, Y+7	; 0x07
     eda:	78 85       	ldd	r23, Y+8	; 0x08
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <LCD_init+0x7a>
		__ticks = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	3f c0       	rjmp	.+126    	; 0xf78 <LCD_init+0xf8>
	else if (__tmp > 65535)
     efa:	6f 81       	ldd	r22, Y+7	; 0x07
     efc:	78 85       	ldd	r23, Y+8	; 0x08
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	9a 85       	ldd	r25, Y+10	; 0x0a
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	4c f5       	brge	.+82     	; 0xf64 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	6b 85       	ldd	r22, Y+11	; 0x0b
     f14:	7c 85       	ldd	r23, Y+12	; 0x0c
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <LCD_init+0xda>
     f3c:	88 ec       	ldi	r24, 0xC8	; 200
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	8b 83       	std	Y+3, r24	; 0x03
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <LCD_init+0xc8>
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f7       	brne	.-38     	; 0xf3c <LCD_init+0xbc>
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	6f 81       	ldd	r22, Y+7	; 0x07
     f66:	78 85       	ldd	r23, Y+8	; 0x08
     f68:	89 85       	ldd	r24, Y+9	; 0x09
     f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <LCD_init+0x104>
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	6f ef       	ldi	r22, 0xFF	; 255
     f90:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     f94:	88 e3       	ldi	r24, 0x38	; 56
     f96:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     f9a:	8c e0       	ldi	r24, 0x0C	; 12
     f9c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LCD_sendCommand>
}
     fa6:	2e 96       	adiw	r28, 0x0e	; 14
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	e9 97       	sbiw	r28, 0x39	; 57
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePin>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a0 e8       	ldi	r26, 0x80	; 128
     fde:	bf e3       	ldi	r27, 0x3F	; 63
     fe0:	8d ab       	std	Y+53, r24	; 0x35
     fe2:	9e ab       	std	Y+54, r25	; 0x36
     fe4:	af ab       	std	Y+55, r26	; 0x37
     fe6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe8:	6d a9       	ldd	r22, Y+53	; 0x35
     fea:	7e a9       	ldd	r23, Y+54	; 0x36
     fec:	8f a9       	ldd	r24, Y+55	; 0x37
     fee:	98 ad       	ldd	r25, Y+56	; 0x38
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	4a ef       	ldi	r20, 0xFA	; 250
     ff6:	54 e4       	ldi	r21, 0x44	; 68
     ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	89 ab       	std	Y+49, r24	; 0x31
    1002:	9a ab       	std	Y+50, r25	; 0x32
    1004:	ab ab       	std	Y+51, r26	; 0x33
    1006:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1008:	69 a9       	ldd	r22, Y+49	; 0x31
    100a:	7a a9       	ldd	r23, Y+50	; 0x32
    100c:	8b a9       	ldd	r24, Y+51	; 0x33
    100e:	9c a9       	ldd	r25, Y+52	; 0x34
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101c:	88 23       	and	r24, r24
    101e:	2c f4       	brge	.+10     	; 0x102a <LCD_sendCommand+0x72>
		__ticks = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	98 ab       	std	Y+48, r25	; 0x30
    1026:	8f a7       	std	Y+47, r24	; 0x2f
    1028:	3f c0       	rjmp	.+126    	; 0x10a8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    102a:	69 a9       	ldd	r22, Y+49	; 0x31
    102c:	7a a9       	ldd	r23, Y+50	; 0x32
    102e:	8b a9       	ldd	r24, Y+51	; 0x33
    1030:	9c a9       	ldd	r25, Y+52	; 0x34
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	3f ef       	ldi	r19, 0xFF	; 255
    1036:	4f e7       	ldi	r20, 0x7F	; 127
    1038:	57 e4       	ldi	r21, 0x47	; 71
    103a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103e:	18 16       	cp	r1, r24
    1040:	4c f5       	brge	.+82     	; 0x1094 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1042:	6d a9       	ldd	r22, Y+53	; 0x35
    1044:	7e a9       	ldd	r23, Y+54	; 0x36
    1046:	8f a9       	ldd	r24, Y+55	; 0x37
    1048:	98 ad       	ldd	r25, Y+56	; 0x38
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e2       	ldi	r20, 0x20	; 32
    1050:	51 e4       	ldi	r21, 0x41	; 65
    1052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	98 ab       	std	Y+48, r25	; 0x30
    1068:	8f a7       	std	Y+47, r24	; 0x2f
    106a:	0f c0       	rjmp	.+30     	; 0x108a <LCD_sendCommand+0xd2>
    106c:	88 ec       	ldi	r24, 0xC8	; 200
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9e a7       	std	Y+46, r25	; 0x2e
    1072:	8d a7       	std	Y+45, r24	; 0x2d
    1074:	8d a5       	ldd	r24, Y+45	; 0x2d
    1076:	9e a5       	ldd	r25, Y+46	; 0x2e
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <LCD_sendCommand+0xc0>
    107c:	9e a7       	std	Y+46, r25	; 0x2e
    107e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1080:	8f a5       	ldd	r24, Y+47	; 0x2f
    1082:	98 a9       	ldd	r25, Y+48	; 0x30
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	98 ab       	std	Y+48, r25	; 0x30
    1088:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108a:	8f a5       	ldd	r24, Y+47	; 0x2f
    108c:	98 a9       	ldd	r25, Y+48	; 0x30
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	69 f7       	brne	.-38     	; 0x106c <LCD_sendCommand+0xb4>
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1094:	69 a9       	ldd	r22, Y+49	; 0x31
    1096:	7a a9       	ldd	r23, Y+50	; 0x32
    1098:	8b a9       	ldd	r24, Y+51	; 0x33
    109a:	9c a9       	ldd	r25, Y+52	; 0x34
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	98 ab       	std	Y+48, r25	; 0x30
    10a6:	8f a7       	std	Y+47, r24	; 0x2f
    10a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10aa:	98 a9       	ldd	r25, Y+48	; 0x30
    10ac:	9c a7       	std	Y+44, r25	; 0x2c
    10ae:	8b a7       	std	Y+43, r24	; 0x2b
    10b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <LCD_sendCommand+0xfc>
    10b8:	9c a7       	std	Y+44, r25	; 0x2c
    10ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePin>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 e8       	ldi	r26, 0x80	; 128
    10cc:	bf e3       	ldi	r27, 0x3F	; 63
    10ce:	8f a3       	std	Y+39, r24	; 0x27
    10d0:	98 a7       	std	Y+40, r25	; 0x28
    10d2:	a9 a7       	std	Y+41, r26	; 0x29
    10d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6f a1       	ldd	r22, Y+39	; 0x27
    10d8:	78 a5       	ldd	r23, Y+40	; 0x28
    10da:	89 a5       	ldd	r24, Y+41	; 0x29
    10dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8b a3       	std	Y+35, r24	; 0x23
    10f0:	9c a3       	std	Y+36, r25	; 0x24
    10f2:	ad a3       	std	Y+37, r26	; 0x25
    10f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f6:	6b a1       	ldd	r22, Y+35	; 0x23
    10f8:	7c a1       	ldd	r23, Y+36	; 0x24
    10fa:	8d a1       	ldd	r24, Y+37	; 0x25
    10fc:	9e a1       	ldd	r25, Y+38	; 0x26
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <LCD_sendCommand+0x160>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9a a3       	std	Y+34, r25	; 0x22
    1114:	89 a3       	std	Y+33, r24	; 0x21
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1118:	6b a1       	ldd	r22, Y+35	; 0x23
    111a:	7c a1       	ldd	r23, Y+36	; 0x24
    111c:	8d a1       	ldd	r24, Y+37	; 0x25
    111e:	9e a1       	ldd	r25, Y+38	; 0x26
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6f a1       	ldd	r22, Y+39	; 0x27
    1132:	78 a5       	ldd	r23, Y+40	; 0x28
    1134:	89 a5       	ldd	r24, Y+41	; 0x29
    1136:	9a a5       	ldd	r25, Y+42	; 0x2a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <LCD_sendCommand+0x1c0>
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	98 a3       	std	Y+32, r25	; 0x20
    1160:	8f 8f       	std	Y+31, r24	; 0x1f
    1162:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1164:	98 a1       	ldd	r25, Y+32	; 0x20
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCD_sendCommand+0x1ae>
    116a:	98 a3       	std	Y+32, r25	; 0x20
    116c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	89 a1       	ldd	r24, Y+33	; 0x21
    1170:	9a a1       	ldd	r25, Y+34	; 0x22
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9a a3       	std	Y+34, r25	; 0x22
    1176:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	89 a1       	ldd	r24, Y+33	; 0x21
    117a:	9a a1       	ldd	r25, Y+34	; 0x22
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <LCD_sendCommand+0x1a2>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6b a1       	ldd	r22, Y+35	; 0x23
    1184:	7c a1       	ldd	r23, Y+36	; 0x24
    1186:	8d a1       	ldd	r24, Y+37	; 0x25
    1188:	9e a1       	ldd	r25, Y+38	; 0x26
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9a a3       	std	Y+34, r25	; 0x22
    1194:	89 a3       	std	Y+33, r24	; 0x21
    1196:	89 a1       	ldd	r24, Y+33	; 0x21
    1198:	9a a1       	ldd	r25, Y+34	; 0x22
    119a:	9e 8f       	std	Y+30, r25	; 0x1e
    119c:	8d 8f       	std	Y+29, r24	; 0x1d
    119e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_sendCommand+0x1ea>
    11a6:	9e 8f       	std	Y+30, r25	; 0x1e
    11a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	69 ad       	ldd	r22, Y+57	; 0x39
    11ae:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <GPIO_writePort>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e8       	ldi	r26, 0x80	; 128
    11b8:	bf e3       	ldi	r27, 0x3F	; 63
    11ba:	89 8f       	std	Y+25, r24	; 0x19
    11bc:	9a 8f       	std	Y+26, r25	; 0x1a
    11be:	ab 8f       	std	Y+27, r26	; 0x1b
    11c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	69 8d       	ldd	r22, Y+25	; 0x19
    11c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a ef       	ldi	r20, 0xFA	; 250
    11d0:	54 e4       	ldi	r21, 0x44	; 68
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8d 8b       	std	Y+21, r24	; 0x15
    11dc:	9e 8b       	std	Y+22, r25	; 0x16
    11de:	af 8b       	std	Y+23, r26	; 0x17
    11e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11e2:	6d 89       	ldd	r22, Y+21	; 0x15
    11e4:	7e 89       	ldd	r23, Y+22	; 0x16
    11e6:	8f 89       	ldd	r24, Y+23	; 0x17
    11e8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <LCD_sendCommand+0x24c>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9c 8b       	std	Y+20, r25	; 0x14
    1200:	8b 8b       	std	Y+19, r24	; 0x13
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1204:	6d 89       	ldd	r22, Y+21	; 0x15
    1206:	7e 89       	ldd	r23, Y+22	; 0x16
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	69 8d       	ldd	r22, Y+25	; 0x19
    121e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9c 8b       	std	Y+20, r25	; 0x14
    1242:	8b 8b       	std	Y+19, r24	; 0x13
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <LCD_sendCommand+0x2ac>
    1246:	88 ec       	ldi	r24, 0xC8	; 200
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9a 8b       	std	Y+18, r25	; 0x12
    124c:	89 8b       	std	Y+17, r24	; 0x11
    124e:	89 89       	ldd	r24, Y+17	; 0x11
    1250:	9a 89       	ldd	r25, Y+18	; 0x12
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <LCD_sendCommand+0x29a>
    1256:	9a 8b       	std	Y+18, r25	; 0x12
    1258:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	8b 89       	ldd	r24, Y+19	; 0x13
    125c:	9c 89       	ldd	r25, Y+20	; 0x14
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	9c 8b       	std	Y+20, r25	; 0x14
    1262:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	8b 89       	ldd	r24, Y+19	; 0x13
    1266:	9c 89       	ldd	r25, Y+20	; 0x14
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <LCD_sendCommand+0x28e>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	6d 89       	ldd	r22, Y+21	; 0x15
    1270:	7e 89       	ldd	r23, Y+22	; 0x16
    1272:	8f 89       	ldd	r24, Y+23	; 0x17
    1274:	98 8d       	ldd	r25, Y+24	; 0x18
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9c 8b       	std	Y+20, r25	; 0x14
    1280:	8b 8b       	std	Y+19, r24	; 0x13
    1282:	8b 89       	ldd	r24, Y+19	; 0x13
    1284:	9c 89       	ldd	r25, Y+20	; 0x14
    1286:	98 8b       	std	Y+16, r25	; 0x10
    1288:	8f 87       	std	Y+15, r24	; 0x0f
    128a:	8f 85       	ldd	r24, Y+15	; 0x0f
    128c:	98 89       	ldd	r25, Y+16	; 0x10
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <LCD_sendCommand+0x2d6>
    1292:	98 8b       	std	Y+16, r25	; 0x10
    1294:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePin>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a0 e8       	ldi	r26, 0x80	; 128
    12a6:	bf e3       	ldi	r27, 0x3F	; 63
    12a8:	8b 87       	std	Y+11, r24	; 0x0b
    12aa:	9c 87       	std	Y+12, r25	; 0x0c
    12ac:	ad 87       	std	Y+13, r26	; 0x0d
    12ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	4a ef       	ldi	r20, 0xFA	; 250
    12be:	54 e4       	ldi	r21, 0x44	; 68
    12c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	8f 83       	std	Y+7, r24	; 0x07
    12ca:	98 87       	std	Y+8, r25	; 0x08
    12cc:	a9 87       	std	Y+9, r26	; 0x09
    12ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d0:	6f 81       	ldd	r22, Y+7	; 0x07
    12d2:	78 85       	ldd	r23, Y+8	; 0x08
    12d4:	89 85       	ldd	r24, Y+9	; 0x09
    12d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e8       	ldi	r20, 0x80	; 128
    12de:	5f e3       	ldi	r21, 0x3F	; 63
    12e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e4:	88 23       	and	r24, r24
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
    12f0:	3f c0       	rjmp	.+126    	; 0x1370 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    12f2:	6f 81       	ldd	r22, Y+7	; 0x07
    12f4:	78 85       	ldd	r23, Y+8	; 0x08
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	3f ef       	ldi	r19, 0xFF	; 255
    12fe:	4f e7       	ldi	r20, 0x7F	; 127
    1300:	57 e4       	ldi	r21, 0x47	; 71
    1302:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1306:	18 16       	cp	r1, r24
    1308:	4c f5       	brge	.+82     	; 0x135c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130a:	6b 85       	ldd	r22, Y+11	; 0x0b
    130c:	7c 85       	ldd	r23, Y+12	; 0x0c
    130e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1310:	9e 85       	ldd	r25, Y+14	; 0x0e
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e2       	ldi	r20, 0x20	; 32
    1318:	51 e4       	ldi	r21, 0x41	; 65
    131a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	0f c0       	rjmp	.+30     	; 0x1352 <LCD_sendCommand+0x39a>
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <LCD_sendCommand+0x388>
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	69 f7       	brne	.-38     	; 0x1334 <LCD_sendCommand+0x37c>
    135a:	14 c0       	rjmp	.+40     	; 0x1384 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135c:	6f 81       	ldd	r22, Y+7	; 0x07
    135e:	78 85       	ldd	r23, Y+8	; 0x08
    1360:	89 85       	ldd	r24, Y+9	; 0x09
    1362:	9a 85       	ldd	r25, Y+10	; 0x0a
    1364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <LCD_sendCommand+0x3c4>
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1384:	e9 96       	adiw	r28, 0x39	; 57
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	e9 97       	sbiw	r28, 0x39	; 57
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePin>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e8       	ldi	r26, 0x80	; 128
    13bc:	bf e3       	ldi	r27, 0x3F	; 63
    13be:	8d ab       	std	Y+53, r24	; 0x35
    13c0:	9e ab       	std	Y+54, r25	; 0x36
    13c2:	af ab       	std	Y+55, r26	; 0x37
    13c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	6d a9       	ldd	r22, Y+53	; 0x35
    13c8:	7e a9       	ldd	r23, Y+54	; 0x36
    13ca:	8f a9       	ldd	r24, Y+55	; 0x37
    13cc:	98 ad       	ldd	r25, Y+56	; 0x38
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a ef       	ldi	r20, 0xFA	; 250
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	89 ab       	std	Y+49, r24	; 0x31
    13e0:	9a ab       	std	Y+50, r25	; 0x32
    13e2:	ab ab       	std	Y+51, r26	; 0x33
    13e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13e6:	69 a9       	ldd	r22, Y+49	; 0x31
    13e8:	7a a9       	ldd	r23, Y+50	; 0x32
    13ea:	8b a9       	ldd	r24, Y+51	; 0x33
    13ec:	9c a9       	ldd	r25, Y+52	; 0x34
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	5f e3       	ldi	r21, 0x3F	; 63
    13f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <LCD_displayCharacter+0x72>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	98 ab       	std	Y+48, r25	; 0x30
    1404:	8f a7       	std	Y+47, r24	; 0x2f
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1408:	69 a9       	ldd	r22, Y+49	; 0x31
    140a:	7a a9       	ldd	r23, Y+50	; 0x32
    140c:	8b a9       	ldd	r24, Y+51	; 0x33
    140e:	9c a9       	ldd	r25, Y+52	; 0x34
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	3f ef       	ldi	r19, 0xFF	; 255
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	57 e4       	ldi	r21, 0x47	; 71
    1418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	6d a9       	ldd	r22, Y+53	; 0x35
    1422:	7e a9       	ldd	r23, Y+54	; 0x36
    1424:	8f a9       	ldd	r24, Y+55	; 0x37
    1426:	98 ad       	ldd	r25, Y+56	; 0x38
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	98 ab       	std	Y+48, r25	; 0x30
    1446:	8f a7       	std	Y+47, r24	; 0x2f
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <LCD_displayCharacter+0xd2>
    144a:	88 ec       	ldi	r24, 0xC8	; 200
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9e a7       	std	Y+46, r25	; 0x2e
    1450:	8d a7       	std	Y+45, r24	; 0x2d
    1452:	8d a5       	ldd	r24, Y+45	; 0x2d
    1454:	9e a5       	ldd	r25, Y+46	; 0x2e
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <LCD_displayCharacter+0xc0>
    145a:	9e a7       	std	Y+46, r25	; 0x2e
    145c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1460:	98 a9       	ldd	r25, Y+48	; 0x30
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	98 ab       	std	Y+48, r25	; 0x30
    1466:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	8f a5       	ldd	r24, Y+47	; 0x2f
    146a:	98 a9       	ldd	r25, Y+48	; 0x30
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	69 f7       	brne	.-38     	; 0x144a <LCD_displayCharacter+0xb4>
    1470:	14 c0       	rjmp	.+40     	; 0x149a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	69 a9       	ldd	r22, Y+49	; 0x31
    1474:	7a a9       	ldd	r23, Y+50	; 0x32
    1476:	8b a9       	ldd	r24, Y+51	; 0x33
    1478:	9c a9       	ldd	r25, Y+52	; 0x34
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	98 ab       	std	Y+48, r25	; 0x30
    1484:	8f a7       	std	Y+47, r24	; 0x2f
    1486:	8f a5       	ldd	r24, Y+47	; 0x2f
    1488:	98 a9       	ldd	r25, Y+48	; 0x30
    148a:	9c a7       	std	Y+44, r25	; 0x2c
    148c:	8b a7       	std	Y+43, r24	; 0x2b
    148e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1490:	9c a5       	ldd	r25, Y+44	; 0x2c
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <LCD_displayCharacter+0xfc>
    1496:	9c a7       	std	Y+44, r25	; 0x2c
    1498:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePin>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e8       	ldi	r26, 0x80	; 128
    14aa:	bf e3       	ldi	r27, 0x3F	; 63
    14ac:	8f a3       	std	Y+39, r24	; 0x27
    14ae:	98 a7       	std	Y+40, r25	; 0x28
    14b0:	a9 a7       	std	Y+41, r26	; 0x29
    14b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6f a1       	ldd	r22, Y+39	; 0x27
    14b6:	78 a5       	ldd	r23, Y+40	; 0x28
    14b8:	89 a5       	ldd	r24, Y+41	; 0x29
    14ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8b a3       	std	Y+35, r24	; 0x23
    14ce:	9c a3       	std	Y+36, r25	; 0x24
    14d0:	ad a3       	std	Y+37, r26	; 0x25
    14d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d4:	6b a1       	ldd	r22, Y+35	; 0x23
    14d6:	7c a1       	ldd	r23, Y+36	; 0x24
    14d8:	8d a1       	ldd	r24, Y+37	; 0x25
    14da:	9e a1       	ldd	r25, Y+38	; 0x26
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9a a3       	std	Y+34, r25	; 0x22
    14f2:	89 a3       	std	Y+33, r24	; 0x21
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    14f6:	6b a1       	ldd	r22, Y+35	; 0x23
    14f8:	7c a1       	ldd	r23, Y+36	; 0x24
    14fa:	8d a1       	ldd	r24, Y+37	; 0x25
    14fc:	9e a1       	ldd	r25, Y+38	; 0x26
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6f a1       	ldd	r22, Y+39	; 0x27
    1510:	78 a5       	ldd	r23, Y+40	; 0x28
    1512:	89 a5       	ldd	r24, Y+41	; 0x29
    1514:	9a a5       	ldd	r25, Y+42	; 0x2a
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9a a3       	std	Y+34, r25	; 0x22
    1534:	89 a3       	std	Y+33, r24	; 0x21
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <LCD_displayCharacter+0x1c0>
    1538:	88 ec       	ldi	r24, 0xC8	; 200
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	98 a3       	std	Y+32, r25	; 0x20
    153e:	8f 8f       	std	Y+31, r24	; 0x1f
    1540:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1542:	98 a1       	ldd	r25, Y+32	; 0x20
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_displayCharacter+0x1ae>
    1548:	98 a3       	std	Y+32, r25	; 0x20
    154a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	89 a1       	ldd	r24, Y+33	; 0x21
    154e:	9a a1       	ldd	r25, Y+34	; 0x22
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9a a3       	std	Y+34, r25	; 0x22
    1554:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	89 a1       	ldd	r24, Y+33	; 0x21
    1558:	9a a1       	ldd	r25, Y+34	; 0x22
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <LCD_displayCharacter+0x1a2>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6b a1       	ldd	r22, Y+35	; 0x23
    1562:	7c a1       	ldd	r23, Y+36	; 0x24
    1564:	8d a1       	ldd	r24, Y+37	; 0x25
    1566:	9e a1       	ldd	r25, Y+38	; 0x26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9a a3       	std	Y+34, r25	; 0x22
    1572:	89 a3       	std	Y+33, r24	; 0x21
    1574:	89 a1       	ldd	r24, Y+33	; 0x21
    1576:	9a a1       	ldd	r25, Y+34	; 0x22
    1578:	9e 8f       	std	Y+30, r25	; 0x1e
    157a:	8d 8f       	std	Y+29, r24	; 0x1d
    157c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_displayCharacter+0x1ea>
    1584:	9e 8f       	std	Y+30, r25	; 0x1e
    1586:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	69 ad       	ldd	r22, Y+57	; 0x39
    158c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <GPIO_writePort>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 e8       	ldi	r26, 0x80	; 128
    1596:	bf e3       	ldi	r27, 0x3F	; 63
    1598:	89 8f       	std	Y+25, r24	; 0x19
    159a:	9a 8f       	std	Y+26, r25	; 0x1a
    159c:	ab 8f       	std	Y+27, r26	; 0x1b
    159e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a0:	69 8d       	ldd	r22, Y+25	; 0x19
    15a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	8d 8b       	std	Y+21, r24	; 0x15
    15ba:	9e 8b       	std	Y+22, r25	; 0x16
    15bc:	af 8b       	std	Y+23, r26	; 0x17
    15be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c0:	6d 89       	ldd	r22, Y+21	; 0x15
    15c2:	7e 89       	ldd	r23, Y+22	; 0x16
    15c4:	8f 89       	ldd	r24, Y+23	; 0x17
    15c6:	98 8d       	ldd	r25, Y+24	; 0x18
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9c 8b       	std	Y+20, r25	; 0x14
    15de:	8b 8b       	std	Y+19, r24	; 0x13
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	8f 89       	ldd	r24, Y+23	; 0x17
    15e8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	57 e4       	ldi	r21, 0x47	; 71
    15f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	4c f5       	brge	.+82     	; 0x164c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	69 8d       	ldd	r22, Y+25	; 0x19
    15fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e2       	ldi	r20, 0x20	; 32
    1608:	51 e4       	ldi	r21, 0x41	; 65
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9c 8b       	std	Y+20, r25	; 0x14
    1620:	8b 8b       	std	Y+19, r24	; 0x13
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <LCD_displayCharacter+0x2ac>
    1624:	88 ec       	ldi	r24, 0xC8	; 200
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9a 8b       	std	Y+18, r25	; 0x12
    162a:	89 8b       	std	Y+17, r24	; 0x11
    162c:	89 89       	ldd	r24, Y+17	; 0x11
    162e:	9a 89       	ldd	r25, Y+18	; 0x12
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_displayCharacter+0x29a>
    1634:	9a 8b       	std	Y+18, r25	; 0x12
    1636:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	8b 89       	ldd	r24, Y+19	; 0x13
    163a:	9c 89       	ldd	r25, Y+20	; 0x14
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	9c 8b       	std	Y+20, r25	; 0x14
    1640:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1642:	8b 89       	ldd	r24, Y+19	; 0x13
    1644:	9c 89       	ldd	r25, Y+20	; 0x14
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f7       	brne	.-38     	; 0x1624 <LCD_displayCharacter+0x28e>
    164a:	14 c0       	rjmp	.+40     	; 0x1674 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164c:	6d 89       	ldd	r22, Y+21	; 0x15
    164e:	7e 89       	ldd	r23, Y+22	; 0x16
    1650:	8f 89       	ldd	r24, Y+23	; 0x17
    1652:	98 8d       	ldd	r25, Y+24	; 0x18
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9c 8b       	std	Y+20, r25	; 0x14
    165e:	8b 8b       	std	Y+19, r24	; 0x13
    1660:	8b 89       	ldd	r24, Y+19	; 0x13
    1662:	9c 89       	ldd	r25, Y+20	; 0x14
    1664:	98 8b       	std	Y+16, r25	; 0x10
    1666:	8f 87       	std	Y+15, r24	; 0x0f
    1668:	8f 85       	ldd	r24, Y+15	; 0x0f
    166a:	98 89       	ldd	r25, Y+16	; 0x10
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_displayCharacter+0x2d6>
    1670:	98 8b       	std	Y+16, r25	; 0x10
    1672:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePin>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a0 e8       	ldi	r26, 0x80	; 128
    1684:	bf e3       	ldi	r27, 0x3F	; 63
    1686:	8b 87       	std	Y+11, r24	; 0x0b
    1688:	9c 87       	std	Y+12, r25	; 0x0c
    168a:	ad 87       	std	Y+13, r26	; 0x0d
    168c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1690:	7c 85       	ldd	r23, Y+12	; 0x0c
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4a ef       	ldi	r20, 0xFA	; 250
    169c:	54 e4       	ldi	r21, 0x44	; 68
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8f 83       	std	Y+7, r24	; 0x07
    16a8:	98 87       	std	Y+8, r25	; 0x08
    16aa:	a9 87       	std	Y+9, r26	; 0x09
    16ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c2:	88 23       	and	r24, r24
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	3f c0       	rjmp	.+126    	; 0x174e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	3f ef       	ldi	r19, 0xFF	; 255
    16dc:	4f e7       	ldi	r20, 0x7F	; 127
    16de:	57 e4       	ldi	r21, 0x47	; 71
    16e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e4:	18 16       	cp	r1, r24
    16e6:	4c f5       	brge	.+82     	; 0x173a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e2       	ldi	r20, 0x20	; 32
    16f6:	51 e4       	ldi	r21, 0x41	; 65
    16f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9e 83       	std	Y+6, r25	; 0x06
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <LCD_displayCharacter+0x39a>
    1712:	88 ec       	ldi	r24, 0xC8	; 200
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	8b 83       	std	Y+3, r24	; 0x03
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <LCD_displayCharacter+0x388>
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	69 f7       	brne	.-38     	; 0x1712 <LCD_displayCharacter+0x37c>
    1738:	14 c0       	rjmp	.+40     	; 0x1762 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173a:	6f 81       	ldd	r22, Y+7	; 0x07
    173c:	78 85       	ldd	r23, Y+8	; 0x08
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	9e 81       	ldd	r25, Y+6	; 0x06
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <LCD_displayCharacter+0x3c4>
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1762:	e9 96       	adiw	r28, 0x39	; 57
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	61 97       	sbiw	r28, 0x11	; 17
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	99 8b       	std	Y+17, r25	; 0x11
    178a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    178c:	1f 86       	std	Y+15, r1	; 0x0f
    178e:	80 c0       	rjmp	.+256    	; 0x1890 <LCD_displayString+0x11c>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1790:	8f 85       	ldd	r24, Y+15	; 0x0f
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	88 89       	ldd	r24, Y+16	; 0x10
    1798:	99 89       	ldd	r25, Y+17	; 0x11
    179a:	fc 01       	movw	r30, r24
    179c:	e2 0f       	add	r30, r18
    179e:	f3 1f       	adc	r31, r19
    17a0:	80 81       	ld	r24, Z
    17a2:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_displayCharacter>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a0 e7       	ldi	r26, 0x70	; 112
    17ac:	b1 e4       	ldi	r27, 0x41	; 65
    17ae:	8b 87       	std	Y+11, r24	; 0x0b
    17b0:	9c 87       	std	Y+12, r25	; 0x0c
    17b2:	ad 87       	std	Y+13, r26	; 0x0d
    17b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    17bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a ef       	ldi	r20, 0xFA	; 250
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8f 83       	std	Y+7, r24	; 0x07
    17d0:	98 87       	std	Y+8, r25	; 0x08
    17d2:	a9 87       	std	Y+9, r26	; 0x09
    17d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <LCD_displayString+0x84>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <LCD_displayString+0x102>
	else if (__tmp > 65535)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <LCD_displayString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	7c 85       	ldd	r23, Y+12	; 0x0c
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <LCD_displayString+0xe4>
    183a:	88 ec       	ldi	r24, 0xC8	; 200
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_displayString+0xd2>
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <LCD_displayString+0xc6>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <LCD_displayString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_displayString+0x10e>
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
		i++;
    188a:	8f 85       	ldd	r24, Y+15	; 0x0f
    188c:	8f 5f       	subi	r24, 0xFF	; 255
    188e:	8f 87       	std	Y+15, r24	; 0x0f
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1890:	8f 85       	ldd	r24, Y+15	; 0x0f
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	88 89       	ldd	r24, Y+16	; 0x10
    1898:	99 89       	ldd	r25, Y+17	; 0x11
    189a:	fc 01       	movw	r30, r24
    189c:	e2 0f       	add	r30, r18
    189e:	f3 1f       	adc	r31, r19
    18a0:	80 81       	ld	r24, Z
    18a2:	88 23       	and	r24, r24
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <LCD_displayString+0x134>
    18a6:	74 cf       	rjmp	.-280    	; 0x1790 <LCD_displayString+0x1c>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    18a8:	61 96       	adiw	r28, 0x11	; 17
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <LCD_moveCursor+0x6>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <LCD_moveCursor+0x8>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	3d 83       	std	Y+5, r19	; 0x05
    18d4:	2c 83       	std	Y+4, r18	; 0x04
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	c1 f0       	breq	.+48     	; 0x1910 <LCD_moveCursor+0x56>
    18e0:	2c 81       	ldd	r18, Y+4	; 0x04
    18e2:	3d 81       	ldd	r19, Y+5	; 0x05
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_moveCursor+0x3a>
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	61 f0       	breq	.+24     	; 0x190a <LCD_moveCursor+0x50>
    18f2:	19 c0       	rjmp	.+50     	; 0x1926 <LCD_moveCursor+0x6c>
    18f4:	2c 81       	ldd	r18, Y+4	; 0x04
    18f6:	3d 81       	ldd	r19, Y+5	; 0x05
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	69 f0       	breq	.+26     	; 0x1918 <LCD_moveCursor+0x5e>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	61 f0       	breq	.+24     	; 0x1920 <LCD_moveCursor+0x66>
    1908:	0e c0       	rjmp	.+28     	; 0x1926 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	0b c0       	rjmp	.+22     	; 0x1926 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	80 5c       	subi	r24, 0xC0	; 192
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	07 c0       	rjmp	.+14     	; 0x1926 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	80 5f       	subi	r24, 0xF0	; 240
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	80 5b       	subi	r24, 0xB0	; 176
    1924:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	80 68       	ori	r24, 0x80	; 128
    192a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LCD_sendCommand>
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <LCD_displayStringRowColumn+0x6>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <LCD_displayStringRowColumn+0x8>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	6a 83       	std	Y+2, r22	; 0x02
    194e:	5c 83       	std	Y+4, r21	; 0x04
    1950:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	6a 81       	ldd	r22, Y+2	; 0x02
    1956:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	62 97       	sbiw	r28, 0x12	; 18
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	9a 8b       	std	Y+18, r25	; 0x12
    1986:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1988:	89 89       	ldd	r24, Y+17	; 0x11
    198a:	9a 89       	ldd	r25, Y+18	; 0x12
    198c:	9e 01       	movw	r18, r28
    198e:	2f 5f       	subi	r18, 0xFF	; 255
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	b9 01       	movw	r22, r18
    1994:	4a e0       	ldi	r20, 0x0A	; 10
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	0e 94 af 19 	call	0x335e	; 0x335e <itoa>
	LCD_displayString(buff); /* Display the string */
    199c:	ce 01       	movw	r24, r28
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
}
    19a4:	62 96       	adiw	r28, 0x12	; 18
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LCD_sendCommand>
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <LCD_shiftScreenRight>:
/*
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenRight(uint8 numOfChars)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <LCD_shiftScreenRight+0x6>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <LCD_shiftScreenRight+0x14>
	while(numOfChars--)
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT); /* Send clear display command */
    19d8:	8c e1       	ldi	r24, 0x1C	; 28
    19da:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LCD_sendCommand>
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenRight(uint8 numOfChars)
{
	while(numOfChars--)
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	8a 83       	std	Y+2, r24	; 0x02
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	88 23       	and	r24, r24
    19e6:	11 f0       	breq	.+4      	; 0x19ec <LCD_shiftScreenRight+0x22>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	99 81       	ldd	r25, Y+1	; 0x01
    19f0:	91 50       	subi	r25, 0x01	; 1
    19f2:	99 83       	std	Y+1, r25	; 0x01
    19f4:	88 23       	and	r24, r24
    19f6:	81 f7       	brne	.-32     	; 0x19d8 <LCD_shiftScreenRight+0xe>
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT); /* Send clear display command */
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <LCD_shiftScreenLeft>:
/*
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenLeft(uint8 numOfChars)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <LCD_shiftScreenLeft+0x6>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <LCD_shiftScreenLeft+0x14>
	while(numOfChars--)
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT); /* Send clear display command */
    1a10:	88 e1       	ldi	r24, 0x18	; 24
    1a12:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LCD_sendCommand>
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenLeft(uint8 numOfChars)
{
	while(numOfChars--)
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	8a 83       	std	Y+2, r24	; 0x02
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	88 23       	and	r24, r24
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <LCD_shiftScreenLeft+0x22>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	99 81       	ldd	r25, Y+1	; 0x01
    1a28:	91 50       	subi	r25, 0x01	; 1
    1a2a:	99 83       	std	Y+1, r25	; 0x01
    1a2c:	88 23       	and	r24, r24
    1a2e:	81 f7       	brne	.-32     	; 0x1a10 <LCD_shiftScreenLeft+0xe>
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT); /* Send clear display command */
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <GPIO_setupPinDirection+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <GPIO_setupPinDirection+0x8>
    1a42:	0f 92       	push	r0
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	6a 83       	std	Y+2, r22	; 0x02
    1a4c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	88 30       	cpi	r24, 0x08	; 8
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <GPIO_setupPinDirection+0x1c>
    1a54:	d5 c0       	rjmp	.+426    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	84 30       	cpi	r24, 0x04	; 4
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <GPIO_setupPinDirection+0x24>
    1a5c:	d1 c0       	rjmp	.+418    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3d 83       	std	Y+5, r19	; 0x05
    1a66:	2c 83       	std	Y+4, r18	; 0x04
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <GPIO_setupPinDirection+0x3a>
    1a72:	43 c0       	rjmp	.+134    	; 0x1afa <GPIO_setupPinDirection+0xc0>
    1a74:	2c 81       	ldd	r18, Y+4	; 0x04
    1a76:	3d 81       	ldd	r19, Y+5	; 0x05
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <GPIO_setupPinDirection+0x4e>
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	9d 81       	ldd	r25, Y+5	; 0x05
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	71 f0       	breq	.+28     	; 0x1aa2 <GPIO_setupPinDirection+0x68>
    1a86:	bc c0       	rjmp	.+376    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
    1a88:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8c:	22 30       	cpi	r18, 0x02	; 2
    1a8e:	31 05       	cpc	r19, r1
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <GPIO_setupPinDirection+0x5a>
    1a92:	5f c0       	rjmp	.+190    	; 0x1b52 <GPIO_setupPinDirection+0x118>
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <GPIO_setupPinDirection+0x66>
    1a9e:	85 c0       	rjmp	.+266    	; 0x1baa <GPIO_setupPinDirection+0x170>
    1aa0:	af c0       	rjmp	.+350    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	a1 f4       	brne	.+40     	; 0x1ad0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1aa8:	aa e3       	ldi	r26, 0x3A	; 58
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ea e3       	ldi	r30, 0x3A	; 58
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <GPIO_setupPinDirection+0x8c>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <GPIO_setupPinDirection+0x88>
    1aca:	84 2b       	or	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	98 c0       	rjmp	.+304    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ad0:	aa e3       	ldi	r26, 0x3A	; 58
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ea e3       	ldi	r30, 0x3A	; 58
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_setupPinDirection+0xb4>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <GPIO_setupPinDirection+0xb0>
    1af2:	80 95       	com	r24
    1af4:	84 23       	and	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	83 c0       	rjmp	.+262    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	a1 f4       	brne	.+40     	; 0x1b28 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b00:	a7 e3       	ldi	r26, 0x37	; 55
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e3       	ldi	r30, 0x37	; 55
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_setupPinDirection+0xe4>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_setupPinDirection+0xe0>
    1b22:	84 2b       	or	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	6c c0       	rjmp	.+216    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b28:	a7 e3       	ldi	r26, 0x37	; 55
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e7 e3       	ldi	r30, 0x37	; 55
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <GPIO_setupPinDirection+0x10c>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <GPIO_setupPinDirection+0x108>
    1b4a:	80 95       	com	r24
    1b4c:	84 23       	and	r24, r20
    1b4e:	8c 93       	st	X, r24
    1b50:	57 c0       	rjmp	.+174    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	a1 f4       	brne	.+40     	; 0x1b80 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b58:	a4 e3       	ldi	r26, 0x34	; 52
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e4 e3       	ldi	r30, 0x34	; 52
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <GPIO_setupPinDirection+0x13c>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <GPIO_setupPinDirection+0x138>
    1b7a:	84 2b       	or	r24, r20
    1b7c:	8c 93       	st	X, r24
    1b7e:	40 c0       	rjmp	.+128    	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b80:	a4 e3       	ldi	r26, 0x34	; 52
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e4 e3       	ldi	r30, 0x34	; 52
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <GPIO_setupPinDirection+0x164>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <GPIO_setupPinDirection+0x160>
    1ba2:	80 95       	com	r24
    1ba4:	84 23       	and	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	2b c0       	rjmp	.+86     	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	a1 f4       	brne	.+40     	; 0x1bd8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1bb0:	a1 e3       	ldi	r26, 0x31	; 49
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e1 e3       	ldi	r30, 0x31	; 49
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <GPIO_setupPinDirection+0x194>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <GPIO_setupPinDirection+0x190>
    1bd2:	84 2b       	or	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1bd8:	a1 e3       	ldi	r26, 0x31	; 49
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e1 e3       	ldi	r30, 0x31	; 49
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_setupPinDirection+0x1bc>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_setupPinDirection+0x1b8>
    1bfa:	80 95       	com	r24
    1bfc:	84 23       	and	r24, r20
    1bfe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <GPIO_writePin+0x6>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <GPIO_writePin+0x8>
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	6a 83       	std	Y+2, r22	; 0x02
    1c22:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	88 30       	cpi	r24, 0x08	; 8
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <GPIO_writePin+0x1c>
    1c2a:	d5 c0       	rjmp	.+426    	; 0x1dd6 <GPIO_writePin+0x1c6>
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	08 f0       	brcs	.+2      	; 0x1c34 <GPIO_writePin+0x24>
    1c32:	d1 c0       	rjmp	.+418    	; 0x1dd6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3d 83       	std	Y+5, r19	; 0x05
    1c3c:	2c 83       	std	Y+4, r18	; 0x04
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	9d 81       	ldd	r25, Y+5	; 0x05
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	91 05       	cpc	r25, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <GPIO_writePin+0x3a>
    1c48:	43 c0       	rjmp	.+134    	; 0x1cd0 <GPIO_writePin+0xc0>
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <GPIO_writePin+0x4e>
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	71 f0       	breq	.+28     	; 0x1c78 <GPIO_writePin+0x68>
    1c5c:	bc c0       	rjmp	.+376    	; 0x1dd6 <GPIO_writePin+0x1c6>
    1c5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c60:	3d 81       	ldd	r19, Y+5	; 0x05
    1c62:	22 30       	cpi	r18, 0x02	; 2
    1c64:	31 05       	cpc	r19, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <GPIO_writePin+0x5a>
    1c68:	5f c0       	rjmp	.+190    	; 0x1d28 <GPIO_writePin+0x118>
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	91 05       	cpc	r25, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <GPIO_writePin+0x66>
    1c74:	85 c0       	rjmp	.+266    	; 0x1d80 <GPIO_writePin+0x170>
    1c76:	af c0       	rjmp	.+350    	; 0x1dd6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	a1 f4       	brne	.+40     	; 0x1ca6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c7e:	ab e3       	ldi	r26, 0x3B	; 59
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	eb e3       	ldi	r30, 0x3B	; 59
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <GPIO_writePin+0x8c>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <GPIO_writePin+0x88>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	98 c0       	rjmp	.+304    	; 0x1dd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ca6:	ab e3       	ldi	r26, 0x3B	; 59
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <GPIO_writePin+0xb4>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <GPIO_writePin+0xb0>
    1cc8:	80 95       	com	r24
    1cca:	84 23       	and	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	83 c0       	rjmp	.+262    	; 0x1dd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	a1 f4       	brne	.+40     	; 0x1cfe <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1cd6:	a8 e3       	ldi	r26, 0x38	; 56
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e8 e3       	ldi	r30, 0x38	; 56
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 2e       	mov	r0, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <GPIO_writePin+0xe4>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <GPIO_writePin+0xe0>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	6c c0       	rjmp	.+216    	; 0x1dd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1cfe:	a8 e3       	ldi	r26, 0x38	; 56
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e8 e3       	ldi	r30, 0x38	; 56
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <GPIO_writePin+0x10c>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <GPIO_writePin+0x108>
    1d20:	80 95       	com	r24
    1d22:	84 23       	and	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	57 c0       	rjmp	.+174    	; 0x1dd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	a1 f4       	brne	.+40     	; 0x1d56 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d2e:	a5 e3       	ldi	r26, 0x35	; 53
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e5 e3       	ldi	r30, 0x35	; 53
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <GPIO_writePin+0x13c>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <GPIO_writePin+0x138>
    1d50:	84 2b       	or	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	40 c0       	rjmp	.+128    	; 0x1dd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d56:	a5 e3       	ldi	r26, 0x35	; 53
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e5 e3       	ldi	r30, 0x35	; 53
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <GPIO_writePin+0x164>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <GPIO_writePin+0x160>
    1d78:	80 95       	com	r24
    1d7a:	84 23       	and	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	2b c0       	rjmp	.+86     	; 0x1dd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	a1 f4       	brne	.+40     	; 0x1dae <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d86:	a2 e3       	ldi	r26, 0x32	; 50
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e2 e3       	ldi	r30, 0x32	; 50
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <GPIO_writePin+0x194>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <GPIO_writePin+0x190>
    1da8:	84 2b       	or	r24, r20
    1daa:	8c 93       	st	X, r24
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1dae:	a2 e3       	ldi	r26, 0x32	; 50
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e2 e3       	ldi	r30, 0x32	; 50
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_writePin+0x1bc>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_writePin+0x1b8>
    1dd0:	80 95       	com	r24
    1dd2:	84 23       	and	r24, r20
    1dd4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <GPIO_readPin+0x6>
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <GPIO_readPin+0x8>
    1dee:	0f 92       	push	r0
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	8a 83       	std	Y+2, r24	; 0x02
    1df6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1df8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 30       	cpi	r24, 0x08	; 8
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <GPIO_readPin+0x1c>
    1e00:	84 c0       	rjmp	.+264    	; 0x1f0a <GPIO_readPin+0x124>
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	84 30       	cpi	r24, 0x04	; 4
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <GPIO_readPin+0x24>
    1e08:	80 c0       	rjmp	.+256    	; 0x1f0a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3d 83       	std	Y+5, r19	; 0x05
    1e12:	2c 83       	std	Y+4, r18	; 0x04
    1e14:	4c 81       	ldd	r20, Y+4	; 0x04
    1e16:	5d 81       	ldd	r21, Y+5	; 0x05
    1e18:	41 30       	cpi	r20, 0x01	; 1
    1e1a:	51 05       	cpc	r21, r1
    1e1c:	79 f1       	breq	.+94     	; 0x1e7c <GPIO_readPin+0x96>
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	9d 81       	ldd	r25, Y+5	; 0x05
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	91 05       	cpc	r25, r1
    1e26:	34 f4       	brge	.+12     	; 0x1e34 <GPIO_readPin+0x4e>
    1e28:	2c 81       	ldd	r18, Y+4	; 0x04
    1e2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	69 f0       	breq	.+26     	; 0x1e4c <GPIO_readPin+0x66>
    1e32:	6b c0       	rjmp	.+214    	; 0x1f0a <GPIO_readPin+0x124>
    1e34:	4c 81       	ldd	r20, Y+4	; 0x04
    1e36:	5d 81       	ldd	r21, Y+5	; 0x05
    1e38:	42 30       	cpi	r20, 0x02	; 2
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	b9 f1       	breq	.+110    	; 0x1eac <GPIO_readPin+0xc6>
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <GPIO_readPin+0x64>
    1e48:	49 c0       	rjmp	.+146    	; 0x1edc <GPIO_readPin+0xf6>
    1e4a:	5f c0       	rjmp	.+190    	; 0x1f0a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e4c:	e9 e3       	ldi	r30, 0x39	; 57
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a9 01       	movw	r20, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <GPIO_readPin+0x7e>
    1e60:	55 95       	asr	r21
    1e62:	47 95       	ror	r20
    1e64:	8a 95       	dec	r24
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <GPIO_readPin+0x7a>
    1e68:	ca 01       	movw	r24, r20
    1e6a:	81 70       	andi	r24, 0x01	; 1
    1e6c:	90 70       	andi	r25, 0x00	; 0
    1e6e:	88 23       	and	r24, r24
    1e70:	19 f0       	breq	.+6      	; 0x1e78 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	49 c0       	rjmp	.+146    	; 0x1f0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e78:	19 82       	std	Y+1, r1	; 0x01
    1e7a:	47 c0       	rjmp	.+142    	; 0x1f0a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e7c:	e6 e3       	ldi	r30, 0x36	; 54
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <GPIO_readPin+0xae>
    1e90:	55 95       	asr	r21
    1e92:	47 95       	ror	r20
    1e94:	8a 95       	dec	r24
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <GPIO_readPin+0xaa>
    1e98:	ca 01       	movw	r24, r20
    1e9a:	81 70       	andi	r24, 0x01	; 1
    1e9c:	90 70       	andi	r25, 0x00	; 0
    1e9e:	88 23       	and	r24, r24
    1ea0:	19 f0       	breq	.+6      	; 0x1ea8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	31 c0       	rjmp	.+98     	; 0x1f0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	2f c0       	rjmp	.+94     	; 0x1f0a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1eac:	e3 e3       	ldi	r30, 0x33	; 51
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a9 01       	movw	r20, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <GPIO_readPin+0xde>
    1ec0:	55 95       	asr	r21
    1ec2:	47 95       	ror	r20
    1ec4:	8a 95       	dec	r24
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <GPIO_readPin+0xda>
    1ec8:	ca 01       	movw	r24, r20
    1eca:	81 70       	andi	r24, 0x01	; 1
    1ecc:	90 70       	andi	r25, 0x00	; 0
    1ece:	88 23       	and	r24, r24
    1ed0:	19 f0       	breq	.+6      	; 0x1ed8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	19 c0       	rjmp	.+50     	; 0x1f0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ed8:	19 82       	std	Y+1, r1	; 0x01
    1eda:	17 c0       	rjmp	.+46     	; 0x1f0a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1edc:	e0 e3       	ldi	r30, 0x30	; 48
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a9 01       	movw	r20, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <GPIO_readPin+0x10e>
    1ef0:	55 95       	asr	r21
    1ef2:	47 95       	ror	r20
    1ef4:	8a 95       	dec	r24
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <GPIO_readPin+0x10a>
    1ef8:	ca 01       	movw	r24, r20
    1efa:	81 70       	andi	r24, 0x01	; 1
    1efc:	90 70       	andi	r25, 0x00	; 0
    1efe:	88 23       	and	r24, r24
    1f00:	19 f0       	breq	.+6      	; 0x1f08 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	01 c0       	rjmp	.+2      	; 0x1f0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f08:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <GPIO_setupPortDirection+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <GPIO_setupPortDirection+0x8>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	84 30       	cpi	r24, 0x04	; 4
    1f30:	90 f5       	brcc	.+100    	; 0x1f96 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3c 83       	std	Y+4, r19	; 0x04
    1f3a:	2b 83       	std	Y+3, r18	; 0x03
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	91 05       	cpc	r25, r1
    1f44:	d1 f0       	breq	.+52     	; 0x1f7a <GPIO_setupPortDirection+0x5e>
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <GPIO_setupPortDirection+0x3e>
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <GPIO_setupPortDirection+0x54>
    1f58:	1e c0       	rjmp	.+60     	; 0x1f96 <GPIO_setupPortDirection+0x7a>
    1f5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5e:	22 30       	cpi	r18, 0x02	; 2
    1f60:	31 05       	cpc	r19, r1
    1f62:	81 f0       	breq	.+32     	; 0x1f84 <GPIO_setupPortDirection+0x68>
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	81 f0       	breq	.+32     	; 0x1f8e <GPIO_setupPortDirection+0x72>
    1f6e:	13 c0       	rjmp	.+38     	; 0x1f96 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f70:	ea e3       	ldi	r30, 0x3A	; 58
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	80 83       	st	Z, r24
    1f78:	0e c0       	rjmp	.+28     	; 0x1f96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f7a:	e7 e3       	ldi	r30, 0x37	; 55
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	80 83       	st	Z, r24
    1f82:	09 c0       	rjmp	.+18     	; 0x1f96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f84:	e4 e3       	ldi	r30, 0x34	; 52
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	80 83       	st	Z, r24
    1f8c:	04 c0       	rjmp	.+8      	; 0x1f96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f8e:	e1 e3       	ldi	r30, 0x31	; 49
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <GPIO_writePort+0x6>
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <GPIO_writePort+0x8>
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	90 f5       	brcc	.+100    	; 0x201e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3c 83       	std	Y+4, r19	; 0x04
    1fc2:	2b 83       	std	Y+3, r18	; 0x03
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	91 05       	cpc	r25, r1
    1fcc:	d1 f0       	breq	.+52     	; 0x2002 <GPIO_writePort+0x5e>
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <GPIO_writePort+0x3e>
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <GPIO_writePort+0x54>
    1fe0:	1e c0       	rjmp	.+60     	; 0x201e <GPIO_writePort+0x7a>
    1fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe6:	22 30       	cpi	r18, 0x02	; 2
    1fe8:	31 05       	cpc	r19, r1
    1fea:	81 f0       	breq	.+32     	; 0x200c <GPIO_writePort+0x68>
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	83 30       	cpi	r24, 0x03	; 3
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	81 f0       	breq	.+32     	; 0x2016 <GPIO_writePort+0x72>
    1ff6:	13 c0       	rjmp	.+38     	; 0x201e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ff8:	eb e3       	ldi	r30, 0x3B	; 59
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	80 83       	st	Z, r24
    2000:	0e c0       	rjmp	.+28     	; 0x201e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2002:	e8 e3       	ldi	r30, 0x38	; 56
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	80 83       	st	Z, r24
    200a:	09 c0       	rjmp	.+18     	; 0x201e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    200c:	e5 e3       	ldi	r30, 0x35	; 53
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	80 83       	st	Z, r24
    2014:	04 c0       	rjmp	.+8      	; 0x201e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2016:	e2 e3       	ldi	r30, 0x32	; 50
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	80 83       	st	Z, r24
			break;
		}
	}
}
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <GPIO_readPort+0x6>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <GPIO_readPort+0x8>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    203a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	84 30       	cpi	r24, 0x04	; 4
    2040:	90 f5       	brcc	.+100    	; 0x20a6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	3c 83       	std	Y+4, r19	; 0x04
    204a:	2b 83       	std	Y+3, r18	; 0x03
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	91 05       	cpc	r25, r1
    2054:	d1 f0       	breq	.+52     	; 0x208a <GPIO_readPort+0x5e>
    2056:	2b 81       	ldd	r18, Y+3	; 0x03
    2058:	3c 81       	ldd	r19, Y+4	; 0x04
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	2c f4       	brge	.+10     	; 0x206a <GPIO_readPort+0x3e>
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	9c 81       	ldd	r25, Y+4	; 0x04
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	61 f0       	breq	.+24     	; 0x2080 <GPIO_readPort+0x54>
    2068:	1e c0       	rjmp	.+60     	; 0x20a6 <GPIO_readPort+0x7a>
    206a:	2b 81       	ldd	r18, Y+3	; 0x03
    206c:	3c 81       	ldd	r19, Y+4	; 0x04
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	81 f0       	breq	.+32     	; 0x2094 <GPIO_readPort+0x68>
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	91 05       	cpc	r25, r1
    207c:	81 f0       	breq	.+32     	; 0x209e <GPIO_readPort+0x72>
    207e:	13 c0       	rjmp	.+38     	; 0x20a6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2080:	e9 e3       	ldi	r30, 0x39	; 57
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	0e c0       	rjmp	.+28     	; 0x20a6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    208a:	e6 e3       	ldi	r30, 0x36	; 54
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	09 c0       	rjmp	.+18     	; 0x20a6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2094:	e3 e3       	ldi	r30, 0x33	; 51
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    209e:	e0 e3       	ldi	r30, 0x30	; 48
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
// Timer1 Compare Match ISR
ISR(TIMER1_COMPA_vect){
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	2f 93       	push	r18
    20c2:	3f 93       	push	r19
    20c4:	4f 93       	push	r20
    20c6:	5f 93       	push	r21
    20c8:	6f 93       	push	r22
    20ca:	7f 93       	push	r23
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	af 93       	push	r26
    20d2:	bf 93       	push	r27
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
	if (timer1_callback != NULL_PTR)
    20e0:	80 91 20 01 	lds	r24, 0x0120
    20e4:	90 91 21 01 	lds	r25, 0x0121
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	29 f0       	breq	.+10     	; 0x20f6 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callback)(); /* another method to call the function using pointer to function timer1_callback(); */
    20ec:	e0 91 20 01 	lds	r30, 0x0120
    20f0:	f0 91 21 01 	lds	r31, 0x0121
    20f4:	09 95       	icall
	}
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	ff 91       	pop	r31
    20fc:	ef 91       	pop	r30
    20fe:	bf 91       	pop	r27
    2100:	af 91       	pop	r26
    2102:	9f 91       	pop	r25
    2104:	8f 91       	pop	r24
    2106:	7f 91       	pop	r23
    2108:	6f 91       	pop	r22
    210a:	5f 91       	pop	r21
    210c:	4f 91       	pop	r20
    210e:	3f 91       	pop	r19
    2110:	2f 91       	pop	r18
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <__vector_9>:

// Timer1 Overflow ISR
ISR(TIMER1_OVF_vect){
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	2f 93       	push	r18
    2128:	3f 93       	push	r19
    212a:	4f 93       	push	r20
    212c:	5f 93       	push	r21
    212e:	6f 93       	push	r22
    2130:	7f 93       	push	r23
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	ef 93       	push	r30
    213c:	ff 93       	push	r31
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
	if (timer1_callback != NULL_PTR)
    2146:	80 91 20 01 	lds	r24, 0x0120
    214a:	90 91 21 01 	lds	r25, 0x0121
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	29 f0       	breq	.+10     	; 0x215c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callback)(); /* another method to call the function using pointer to function timer1_callback(); */
    2152:	e0 91 20 01 	lds	r30, 0x0120
    2156:	f0 91 21 01 	lds	r31, 0x0121
    215a:	09 95       	icall
	}
}
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	ff 91       	pop	r31
    2162:	ef 91       	pop	r30
    2164:	bf 91       	pop	r27
    2166:	af 91       	pop	r26
    2168:	9f 91       	pop	r25
    216a:	8f 91       	pop	r24
    216c:	7f 91       	pop	r23
    216e:	6f 91       	pop	r22
    2170:	5f 91       	pop	r21
    2172:	4f 91       	pop	r20
    2174:	3f 91       	pop	r19
    2176:	2f 91       	pop	r18
    2178:	0f 90       	pop	r0
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	0f 90       	pop	r0
    217e:	1f 90       	pop	r1
    2180:	18 95       	reti

00002182 <Timer1_init>:
 * Function to initialize the Timer driver.
 * 1. Set the required clock.
 * 2. Initialize Timer1 Registers.
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <Timer1_init+0x6>
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
	// Configure Timer1 Control Register
	TCCR1A = 0; // Normal mode by default
    2190:	ef e4       	ldi	r30, 0x4F	; 79
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	10 82       	st	Z, r1
	TCCR1B = 0;
    2196:	ee e4       	ldi	r30, 0x4E	; 78
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	10 82       	st	Z, r1

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = 0x08 | (Config_Ptr->prescaler);
    219c:	ae e4       	ldi	r26, 0x4E	; 78
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	84 81       	ldd	r24, Z+4	; 0x04
    21a6:	88 60       	ori	r24, 0x08	; 8
    21a8:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = (Config_Ptr->initial_value);
    21aa:	ac e4       	ldi	r26, 0x4C	; 76
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e9 81       	ldd	r30, Y+1	; 0x01
    21b0:	fa 81       	ldd	r31, Y+2	; 0x02
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	11 96       	adiw	r26, 0x01	; 1
    21b8:	9c 93       	st	X, r25
    21ba:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == TIMER1_COMPARE_MODE)
    21bc:	e9 81       	ldd	r30, Y+1	; 0x01
    21be:	fa 81       	ldd	r31, Y+2	; 0x02
    21c0:	85 81       	ldd	r24, Z+5	; 0x05
    21c2:	84 30       	cpi	r24, 0x04	; 4
    21c4:	89 f4       	brne	.+34     	; 0x21e8 <Timer1_init+0x66>
	{
		// Set the compare value
		OCR1A = (Config_Ptr->compare_value);
    21c6:	aa e4       	ldi	r26, 0x4A	; 74
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e9 81       	ldd	r30, Y+1	; 0x01
    21cc:	fa 81       	ldd	r31, Y+2	; 0x02
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	11 96       	adiw	r26, 0x01	; 1
    21d4:	9c 93       	st	X, r25
    21d6:	8e 93       	st	-X, r24

		// Enable Compare Match interrupt
		TIMSK |= (1 << OCIE1A);
    21d8:	a9 e5       	ldi	r26, 0x59	; 89
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e9 e5       	ldi	r30, 0x59	; 89
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	80 61       	ori	r24, 0x10	; 16
    21e4:	8c 93       	st	X, r24
    21e6:	07 c0       	rjmp	.+14     	; 0x21f6 <Timer1_init+0x74>
	}
	else
	{
		// Enable Timer1 overflow interrupt
		TIMSK |= (1 << TOIE1);
    21e8:	a9 e5       	ldi	r26, 0x59	; 89
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 e5       	ldi	r30, 0x59	; 89
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	84 60       	ori	r24, 0x04	; 4
    21f4:	8c 93       	st	X, r24
	}
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <Timer1_deInit>:
/*
 * Description:
 *  Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2208:	ef e4       	ldi	r30, 0x4F	; 79
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	10 82       	st	Z, r1
	TCCR1B = 0;
    220e:	ee e4       	ldi	r30, 0x4E	; 78
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	10 82       	st	Z, r1
	TCNT1 = 0;
    2214:	ec e4       	ldi	r30, 0x4C	; 76
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	11 82       	std	Z+1, r1	; 0x01
    221a:	10 82       	st	Z, r1

	// Disable Timer1 interrupts
	TIMSK &= ~((1 << OCIE1A) | (1 << TOIE1));
    221c:	a9 e5       	ldi	r26, 0x59	; 89
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e9 e5       	ldi	r30, 0x59	; 89
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8b 7e       	andi	r24, 0xEB	; 235
    2228:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	timer1_callback = NULL_PTR;
    222a:	10 92 21 01 	sts	0x0121, r1
    222e:	10 92 20 01 	sts	0x0120, r1
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <Timer1_setCallBack>:
/*
 * Description:
 *  Function to set the Call Back function address.
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <Timer1_setCallBack+0x6>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callback = a_ptr;
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	90 93 21 01 	sts	0x0121, r25
    224e:	80 93 20 01 	sts	0x0120, r24
}
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <UART_init+0x6>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <UART_init+0x8>
    2264:	0f 92       	push	r0
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	9d 83       	std	Y+5, r25	; 0x05
    226c:	8c 83       	std	Y+4, r24	; 0x04
	uint16 ubrr_value = 0;
    226e:	1b 82       	std	Y+3, r1	; 0x03
    2270:	1a 82       	std	Y+2, r1	; 0x02
	uint8 baud_divisor = 8UL;
    2272:	88 e0       	ldi	r24, 0x08	; 8
    2274:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (Config_Ptr->trans_speed << U2X);
    2276:	ab e2       	ldi	r26, 0x2B	; 43
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	ec 81       	ldd	r30, Y+4	; 0x04
    227c:	fd 81       	ldd	r31, Y+5	; 0x05
    227e:	80 85       	ldd	r24, Z+8	; 0x08
    2280:	88 0f       	add	r24, r24
    2282:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2284:	ea e2       	ldi	r30, 0x2A	; 42
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	88 e1       	ldi	r24, 0x18	; 24
    228a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (Config_Ptr->trans_mod << UMSEL) | (Config_Ptr->stop_bit << USBS) | (Config_Ptr->parity << 4) | (1 << URSEL);
    228c:	a0 e4       	ldi	r26, 0x40	; 64
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ec 81       	ldd	r30, Y+4	; 0x04
    2292:	fd 81       	ldd	r31, Y+5	; 0x05
    2294:	87 81       	ldd	r24, Z+7	; 0x07
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	00 24       	eor	r0, r0
    229c:	96 95       	lsr	r25
    229e:	87 95       	ror	r24
    22a0:	07 94       	ror	r0
    22a2:	96 95       	lsr	r25
    22a4:	87 95       	ror	r24
    22a6:	07 94       	ror	r0
    22a8:	98 2f       	mov	r25, r24
    22aa:	80 2d       	mov	r24, r0
    22ac:	28 2f       	mov	r18, r24
    22ae:	ec 81       	ldd	r30, Y+4	; 0x04
    22b0:	fd 81       	ldd	r31, Y+5	; 0x05
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	28 2b       	or	r18, r24
    22c6:	ec 81       	ldd	r30, Y+4	; 0x04
    22c8:	fd 81       	ldd	r31, Y+5	; 0x05
    22ca:	81 81       	ldd	r24, Z+1	; 0x01
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	82 95       	swap	r24
    22d2:	92 95       	swap	r25
    22d4:	90 7f       	andi	r25, 0xF0	; 240
    22d6:	98 27       	eor	r25, r24
    22d8:	80 7f       	andi	r24, 0xF0	; 240
    22da:	98 27       	eor	r25, r24
    22dc:	82 2b       	or	r24, r18
    22de:	80 68       	ori	r24, 0x80	; 128
    22e0:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data == Data_9Bit){
    22e2:	ec 81       	ldd	r30, Y+4	; 0x04
    22e4:	fd 81       	ldd	r31, Y+5	; 0x05
    22e6:	80 81       	ld	r24, Z
    22e8:	87 30       	cpi	r24, 0x07	; 7
    22ea:	c1 f4       	brne	.+48     	; 0x231c <UART_init+0xc0>
		UCSRC |= ((Config_Ptr->bit_data << 1) & 0x06);
    22ec:	a0 e4       	ldi	r26, 0x40	; 64
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e0 e4       	ldi	r30, 0x40	; 64
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	28 2f       	mov	r18, r24
    22f8:	ec 81       	ldd	r30, Y+4	; 0x04
    22fa:	fd 81       	ldd	r31, Y+5	; 0x05
    22fc:	80 81       	ld	r24, Z
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	86 70       	andi	r24, 0x06	; 6
    2308:	82 2b       	or	r24, r18
    230a:	8c 93       	st	X, r24
		UCSRB |= (1<<UCSZ2);
    230c:	aa e2       	ldi	r26, 0x2A	; 42
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	ea e2       	ldi	r30, 0x2A	; 42
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	84 60       	ori	r24, 0x04	; 4
    2318:	8c 93       	st	X, r24
    231a:	10 c0       	rjmp	.+32     	; 0x233c <UART_init+0xe0>
	}else{
		UCSRC |= ((Config_Ptr->bit_data << 1) & 0x06);
    231c:	a0 e4       	ldi	r26, 0x40	; 64
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e0 e4       	ldi	r30, 0x40	; 64
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	28 2f       	mov	r18, r24
    2328:	ec 81       	ldd	r30, Y+4	; 0x04
    232a:	fd 81       	ldd	r31, Y+5	; 0x05
    232c:	80 81       	ld	r24, Z
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	86 70       	andi	r24, 0x06	; 6
    2338:	82 2b       	or	r24, r18
    233a:	8c 93       	st	X, r24
	}

	/* Calculate the the divisor of the baud rate divider from 16 to 8 */
	if(Config_Ptr->trans_mod == ASYNC){
    233c:	ec 81       	ldd	r30, Y+4	; 0x04
    233e:	fd 81       	ldd	r31, Y+5	; 0x05
    2340:	87 81       	ldd	r24, Z+7	; 0x07
    2342:	88 23       	and	r24, r24
    2344:	59 f4       	brne	.+22     	; 0x235c <UART_init+0x100>
		if(Config_Ptr->trans_speed == SYNC_OR_ASYNC_Normal)
    2346:	ec 81       	ldd	r30, Y+4	; 0x04
    2348:	fd 81       	ldd	r31, Y+5	; 0x05
    234a:	80 85       	ldd	r24, Z+8	; 0x08
    234c:	88 23       	and	r24, r24
    234e:	19 f4       	brne	.+6      	; 0x2356 <UART_init+0xfa>
			baud_divisor = 16;
    2350:	80 e1       	ldi	r24, 0x10	; 16
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <UART_init+0x104>
		else
			baud_divisor = 8;
    2356:	88 e0       	ldi	r24, 0x08	; 8
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <UART_init+0x104>
	}else{
		baud_divisor = 2;
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * baud_divisor))) - 1);
    2360:	ec 81       	ldd	r30, Y+4	; 0x04
    2362:	fd 81       	ldd	r31, Y+5	; 0x05
    2364:	83 81       	ldd	r24, Z+3	; 0x03
    2366:	94 81       	ldd	r25, Z+4	; 0x04
    2368:	a5 81       	ldd	r26, Z+5	; 0x05
    236a:	b6 81       	ldd	r27, Z+6	; 0x06
    236c:	29 81       	ldd	r18, Y+1	; 0x01
    236e:	22 2f       	mov	r18, r18
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 37 19 	call	0x326e	; 0x326e <__mulsi3>
    237e:	9b 01       	movw	r18, r22
    2380:	ac 01       	movw	r20, r24
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	92 e1       	ldi	r25, 0x12	; 18
    2386:	aa e7       	ldi	r26, 0x7A	; 122
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 56 19 	call	0x32ac	; 0x32ac <__udivmodsi4>
    2392:	da 01       	movw	r26, r20
    2394:	c9 01       	movw	r24, r18
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	9b 83       	std	Y+3, r25	; 0x03
    239a:	8a 83       	std	Y+2, r24	; 0x02

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    239c:	e0 e4       	ldi	r30, 0x40	; 64
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	89 2f       	mov	r24, r25
    23a6:	99 27       	eor	r25, r25
    23a8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    23aa:	e9 e2       	ldi	r30, 0x29	; 41
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	80 83       	st	Z, r24
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	0f 92       	push	r0
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    23ce:	eb e2       	ldi	r30, 0x2B	; 43
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	80 72       	andi	r24, 0x20	; 32
    23da:	90 70       	andi	r25, 0x00	; 0
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	b9 f3       	breq	.-18     	; 0x23ce <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23e0:	ec e2       	ldi	r30, 0x2C	; 44
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    23f8:	eb e2       	ldi	r30, 0x2B	; 43
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	88 23       	and	r24, r24
    2400:	dc f7       	brge	.-10     	; 0x23f8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2402:	ec e2       	ldi	r30, 0x2C	; 44
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
}
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <UART_sendString+0x6>
    2414:	0f 92       	push	r0
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9b 83       	std	Y+3, r25	; 0x03
    241c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    241e:	19 82       	std	Y+1, r1	; 0x01
    2420:	0e c0       	rjmp	.+28     	; 0x243e <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	9b 81       	ldd	r25, Y+3	; 0x03
    242c:	fc 01       	movw	r30, r24
    242e:	e2 0f       	add	r30, r18
    2430:	f3 1f       	adc	r31, r19
    2432:	80 81       	ld	r24, Z
    2434:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <UART_sendByte>
		i++;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	fc 01       	movw	r30, r24
    244a:	e2 0f       	add	r30, r18
    244c:	f3 1f       	adc	r31, r19
    244e:	80 81       	ld	r24, Z
    2450:	88 23       	and	r24, r24
    2452:	39 f7       	brne	.-50     	; 0x2422 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <UART_receiveString+0xa>
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	9b 83       	std	Y+3, r25	; 0x03
    2472:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2474:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	8c 01       	movw	r16, r24
    2482:	02 0f       	add	r16, r18
    2484:	13 1f       	adc	r17, r19
    2486:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <UART_recieveByte>
    248a:	f8 01       	movw	r30, r16
    248c:	80 83       	st	Z, r24
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	8f 5f       	subi	r24, 0xFF	; 255
    2494:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	9b 81       	ldd	r25, Y+3	; 0x03
    24a0:	8c 01       	movw	r16, r24
    24a2:	02 0f       	add	r16, r18
    24a4:	13 1f       	adc	r17, r19
    24a6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <UART_recieveByte>
    24aa:	f8 01       	movw	r30, r16
    24ac:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	83 32       	cpi	r24, 0x23	; 35
    24c2:	31 f7       	brne	.-52     	; 0x2490 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	fc 01       	movw	r30, r24
    24d0:	e2 0f       	add	r30, r18
    24d2:	f3 1f       	adc	r31, r19
    24d4:	10 82       	st	Z, r1
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	08 95       	ret

000024e6 <main>:
/*******************************************************************************
 *                           Main Function                                     *
 *******************************************************************************/

int main(void)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	c1 54       	subi	r28, 0x41	; 65
    24f0:	d0 40       	sbci	r29, 0x00	; 0
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
	/*************************
	 * 	initialize modules
	 *************************/

	// start the LCD
	LCD_init();
    24fc:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_init>

	// Configure the UART specifications
	UART_ConfigType uart_configuration;
	uart_configuration.baud_rate = 9600;
    2500:	80 e8       	ldi	r24, 0x80	; 128
    2502:	95 e2       	ldi	r25, 0x25	; 37
    2504:	a0 e0       	ldi	r26, 0x00	; 0
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	8c af       	std	Y+60, r24	; 0x3c
    250a:	9d af       	std	Y+61, r25	; 0x3d
    250c:	ae af       	std	Y+62, r26	; 0x3e
    250e:	bf af       	std	Y+63, r27	; 0x3f
	uart_configuration.bit_data = Data_8Bit;
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	89 af       	std	Y+57, r24	; 0x39
	uart_configuration.parity = Disabled;
    2514:	1a ae       	std	Y+58, r1	; 0x3a
	uart_configuration.stop_bit = St_1Bit;
    2516:	1b ae       	std	Y+59, r1	; 0x3b
	uart_configuration.trans_mod = ASYNC;
    2518:	fe 01       	movw	r30, r28
    251a:	e0 5c       	subi	r30, 0xC0	; 192
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	10 82       	st	Z, r1
	uart_configuration.trans_speed = ASYNC_Double;
    2520:	fe 01       	movw	r30, r28
    2522:	ef 5b       	subi	r30, 0xBF	; 191
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	80 83       	st	Z, r24

	// start the UART
	UART_init(&uart_configuration);
    252a:	ce 01       	movw	r24, r28
    252c:	c9 96       	adiw	r24, 0x39	; 57
    252e:	0e 94 2e 11 	call	0x225c	; 0x225c <UART_init>
	 * 		prescaler = 256;
	 * In Normal Mode:
	 * 		prescaler = 1024;
	 */
	static Timer1_ConfigType timer_config;
	timer_config.mode = TIMER1_COMPARE_MODE;
    2532:	84 e0       	ldi	r24, 0x04	; 4
    2534:	80 93 37 01 	sts	0x0137, r24
	timer_config.prescaler = TIMER1_PRESCALER_256;
    2538:	84 e0       	ldi	r24, 0x04	; 4
    253a:	80 93 36 01 	sts	0x0136, r24
	timer_config.initial_value = 0;
    253e:	10 92 33 01 	sts	0x0133, r1
    2542:	10 92 32 01 	sts	0x0132, r1
	timer_config.compare_value = 31250;
    2546:	82 e1       	ldi	r24, 0x12	; 18
    2548:	9a e7       	ldi	r25, 0x7A	; 122
    254a:	90 93 35 01 	sts	0x0135, r25
    254e:	80 93 34 01 	sts	0x0134, r24
	//	timer_config.compare_value = 6000;

	SREG |= (1 << 7); /* Enable Global Interrupts */
    2552:	af e5       	ldi	r26, 0x5F	; 95
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ef e5       	ldi	r30, 0x5F	; 95
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	80 68       	ori	r24, 0x80	; 128
    255e:	8c 93       	st	X, r24

	// ____________________________________________________________________________________________________________________
	while (1)
	{
		ack_set = 0;
    2560:	10 92 2e 01 	sts	0x012E, r1
		password1 = password2 = 0;
    2564:	10 92 26 01 	sts	0x0126, r1
    2568:	10 92 27 01 	sts	0x0127, r1
    256c:	10 92 28 01 	sts	0x0128, r1
    2570:	10 92 29 01 	sts	0x0129, r1
    2574:	80 91 26 01 	lds	r24, 0x0126
    2578:	90 91 27 01 	lds	r25, 0x0127
    257c:	a0 91 28 01 	lds	r26, 0x0128
    2580:	b0 91 29 01 	lds	r27, 0x0129
    2584:	80 93 22 01 	sts	0x0122, r24
    2588:	90 93 23 01 	sts	0x0123, r25
    258c:	a0 93 24 01 	sts	0x0124, r26
    2590:	b0 93 25 01 	sts	0x0125, r27
		do
		{
			/*********************************************************************************
			 * 		Password taking from the user in the first time or in change password
			 *********************************************************************************/
			password1 = Password_taking("Please Enter Password:");
    2594:	80 e6       	ldi	r24, 0x60	; 96
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Password_taking>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	80 93 22 01 	sts	0x0122, r24
    25a4:	90 93 23 01 	sts	0x0123, r25
    25a8:	a0 93 24 01 	sts	0x0124, r26
    25ac:	b0 93 25 01 	sts	0x0125, r27
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 e2       	ldi	r26, 0x20	; 32
    25b6:	b1 e4       	ldi	r27, 0x41	; 65
    25b8:	8d ab       	std	Y+53, r24	; 0x35
    25ba:	9e ab       	std	Y+54, r25	; 0x36
    25bc:	af ab       	std	Y+55, r26	; 0x37
    25be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	6d a9       	ldd	r22, Y+53	; 0x35
    25c2:	7e a9       	ldd	r23, Y+54	; 0x36
    25c4:	8f a9       	ldd	r24, Y+55	; 0x37
    25c6:	98 ad       	ldd	r25, Y+56	; 0x38
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4a ef       	ldi	r20, 0xFA	; 250
    25ce:	54 e4       	ldi	r21, 0x44	; 68
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	89 ab       	std	Y+49, r24	; 0x31
    25da:	9a ab       	std	Y+50, r25	; 0x32
    25dc:	ab ab       	std	Y+51, r26	; 0x33
    25de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25e0:	69 a9       	ldd	r22, Y+49	; 0x31
    25e2:	7a a9       	ldd	r23, Y+50	; 0x32
    25e4:	8b a9       	ldd	r24, Y+51	; 0x33
    25e6:	9c a9       	ldd	r25, Y+52	; 0x34
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e8       	ldi	r20, 0x80	; 128
    25ee:	5f e3       	ldi	r21, 0x3F	; 63
    25f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f4:	88 23       	and	r24, r24
    25f6:	2c f4       	brge	.+10     	; 0x2602 <main+0x11c>
		__ticks = 1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	98 ab       	std	Y+48, r25	; 0x30
    25fe:	8f a7       	std	Y+47, r24	; 0x2f
    2600:	3f c0       	rjmp	.+126    	; 0x2680 <main+0x19a>
	else if (__tmp > 65535)
    2602:	69 a9       	ldd	r22, Y+49	; 0x31
    2604:	7a a9       	ldd	r23, Y+50	; 0x32
    2606:	8b a9       	ldd	r24, Y+51	; 0x33
    2608:	9c a9       	ldd	r25, Y+52	; 0x34
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	4c f5       	brge	.+82     	; 0x266c <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261a:	6d a9       	ldd	r22, Y+53	; 0x35
    261c:	7e a9       	ldd	r23, Y+54	; 0x36
    261e:	8f a9       	ldd	r24, Y+55	; 0x37
    2620:	98 ad       	ldd	r25, Y+56	; 0x38
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e2       	ldi	r20, 0x20	; 32
    2628:	51 e4       	ldi	r21, 0x41	; 65
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	98 ab       	std	Y+48, r25	; 0x30
    2640:	8f a7       	std	Y+47, r24	; 0x2f
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <main+0x17c>
    2644:	88 ec       	ldi	r24, 0xC8	; 200
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9e a7       	std	Y+46, r25	; 0x2e
    264a:	8d a7       	std	Y+45, r24	; 0x2d
    264c:	8d a5       	ldd	r24, Y+45	; 0x2d
    264e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <main+0x16a>
    2654:	9e a7       	std	Y+46, r25	; 0x2e
    2656:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2658:	8f a5       	ldd	r24, Y+47	; 0x2f
    265a:	98 a9       	ldd	r25, Y+48	; 0x30
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	98 ab       	std	Y+48, r25	; 0x30
    2660:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	69 f7       	brne	.-38     	; 0x2644 <main+0x15e>
    266a:	14 c0       	rjmp	.+40     	; 0x2694 <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266c:	69 a9       	ldd	r22, Y+49	; 0x31
    266e:	7a a9       	ldd	r23, Y+50	; 0x32
    2670:	8b a9       	ldd	r24, Y+51	; 0x33
    2672:	9c a9       	ldd	r25, Y+52	; 0x34
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	98 ab       	std	Y+48, r25	; 0x30
    267e:	8f a7       	std	Y+47, r24	; 0x2f
    2680:	8f a5       	ldd	r24, Y+47	; 0x2f
    2682:	98 a9       	ldd	r25, Y+48	; 0x30
    2684:	9c a7       	std	Y+44, r25	; 0x2c
    2686:	8b a7       	std	Y+43, r24	; 0x2b
    2688:	8b a5       	ldd	r24, Y+43	; 0x2b
    268a:	9c a5       	ldd	r25, Y+44	; 0x2c
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <main+0x1a6>
    2690:	9c a7       	std	Y+44, r25	; 0x2c
    2692:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			password2 = Password_taking("Please Re-Enter The Same Password:");
    2694:	87 e7       	ldi	r24, 0x77	; 119
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Password_taking>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	80 93 26 01 	sts	0x0126, r24
    26a4:	90 93 27 01 	sts	0x0127, r25
    26a8:	a0 93 28 01 	sts	0x0128, r26
    26ac:	b0 93 29 01 	sts	0x0129, r27
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 e2       	ldi	r26, 0x20	; 32
    26b6:	b1 e4       	ldi	r27, 0x41	; 65
    26b8:	8f a3       	std	Y+39, r24	; 0x27
    26ba:	98 a7       	std	Y+40, r25	; 0x28
    26bc:	a9 a7       	std	Y+41, r26	; 0x29
    26be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	6f a1       	ldd	r22, Y+39	; 0x27
    26c2:	78 a5       	ldd	r23, Y+40	; 0x28
    26c4:	89 a5       	ldd	r24, Y+41	; 0x29
    26c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a ef       	ldi	r20, 0xFA	; 250
    26ce:	54 e4       	ldi	r21, 0x44	; 68
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8b a3       	std	Y+35, r24	; 0x23
    26da:	9c a3       	std	Y+36, r25	; 0x24
    26dc:	ad a3       	std	Y+37, r26	; 0x25
    26de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26e0:	6b a1       	ldd	r22, Y+35	; 0x23
    26e2:	7c a1       	ldd	r23, Y+36	; 0x24
    26e4:	8d a1       	ldd	r24, Y+37	; 0x25
    26e6:	9e a1       	ldd	r25, Y+38	; 0x26
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <main+0x21c>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9a a3       	std	Y+34, r25	; 0x22
    26fe:	89 a3       	std	Y+33, r24	; 0x21
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <main+0x29a>
	else if (__tmp > 65535)
    2702:	6b a1       	ldd	r22, Y+35	; 0x23
    2704:	7c a1       	ldd	r23, Y+36	; 0x24
    2706:	8d a1       	ldd	r24, Y+37	; 0x25
    2708:	9e a1       	ldd	r25, Y+38	; 0x26
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <main+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	6f a1       	ldd	r22, Y+39	; 0x27
    271c:	78 a5       	ldd	r23, Y+40	; 0x28
    271e:	89 a5       	ldd	r24, Y+41	; 0x29
    2720:	9a a5       	ldd	r25, Y+42	; 0x2a
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <main+0x27c>
    2744:	88 ec       	ldi	r24, 0xC8	; 200
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	98 a3       	std	Y+32, r25	; 0x20
    274a:	8f 8f       	std	Y+31, r24	; 0x1f
    274c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    274e:	98 a1       	ldd	r25, Y+32	; 0x20
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <main+0x26a>
    2754:	98 a3       	std	Y+32, r25	; 0x20
    2756:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	89 a1       	ldd	r24, Y+33	; 0x21
    275a:	9a a1       	ldd	r25, Y+34	; 0x22
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	9a a3       	std	Y+34, r25	; 0x22
    2760:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	89 a1       	ldd	r24, Y+33	; 0x21
    2764:	9a a1       	ldd	r25, Y+34	; 0x22
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <main+0x25e>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <main+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	6b a1       	ldd	r22, Y+35	; 0x23
    276e:	7c a1       	ldd	r23, Y+36	; 0x24
    2770:	8d a1       	ldd	r24, Y+37	; 0x25
    2772:	9e a1       	ldd	r25, Y+38	; 0x26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9a a3       	std	Y+34, r25	; 0x22
    277e:	89 a3       	std	Y+33, r24	; 0x21
    2780:	89 a1       	ldd	r24, Y+33	; 0x21
    2782:	9a a1       	ldd	r25, Y+34	; 0x22
    2784:	9e 8f       	std	Y+30, r25	; 0x1e
    2786:	8d 8f       	std	Y+29, r24	; 0x1d
    2788:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <main+0x2a6>
    2790:	9e 8f       	std	Y+30, r25	; 0x1e
    2792:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);

			// ------------------------------ the previous worked good --------------------------------------
			// Send password1 to the Control_ECU
			sendPassword(password1);
    2794:	80 91 22 01 	lds	r24, 0x0122
    2798:	90 91 23 01 	lds	r25, 0x0123
    279c:	a0 91 24 01 	lds	r26, 0x0124
    27a0:	b0 91 25 01 	lds	r27, 0x0125
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 2b 18 	call	0x3056	; 0x3056 <sendPassword>

			// Send password2 to the Control_ECU
			sendPassword(password2);
    27ac:	80 91 26 01 	lds	r24, 0x0126
    27b0:	90 91 27 01 	lds	r25, 0x0127
    27b4:	a0 91 28 01 	lds	r26, 0x0128
    27b8:	b0 91 29 01 	lds	r27, 0x0129
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 2b 18 	call	0x3056	; 0x3056 <sendPassword>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a8 e4       	ldi	r26, 0x48	; 72
    27ca:	b3 e4       	ldi	r27, 0x43	; 67
    27cc:	89 8f       	std	Y+25, r24	; 0x19
    27ce:	9a 8f       	std	Y+26, r25	; 0x1a
    27d0:	ab 8f       	std	Y+27, r26	; 0x1b
    27d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	69 8d       	ldd	r22, Y+25	; 0x19
    27d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a ef       	ldi	r20, 0xFA	; 250
    27e2:	54 e4       	ldi	r21, 0x44	; 68
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8d 8b       	std	Y+21, r24	; 0x15
    27ee:	9e 8b       	std	Y+22, r25	; 0x16
    27f0:	af 8b       	std	Y+23, r26	; 0x17
    27f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27f4:	6d 89       	ldd	r22, Y+21	; 0x15
    27f6:	7e 89       	ldd	r23, Y+22	; 0x16
    27f8:	8f 89       	ldd	r24, Y+23	; 0x17
    27fa:	98 8d       	ldd	r25, Y+24	; 0x18
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <main+0x330>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9c 8b       	std	Y+20, r25	; 0x14
    2812:	8b 8b       	std	Y+19, r24	; 0x13
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <main+0x3ae>
	else if (__tmp > 65535)
    2816:	6d 89       	ldd	r22, Y+21	; 0x15
    2818:	7e 89       	ldd	r23, Y+22	; 0x16
    281a:	8f 89       	ldd	r24, Y+23	; 0x17
    281c:	98 8d       	ldd	r25, Y+24	; 0x18
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <main+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	69 8d       	ldd	r22, Y+25	; 0x19
    2830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9c 8b       	std	Y+20, r25	; 0x14
    2854:	8b 8b       	std	Y+19, r24	; 0x13
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <main+0x390>
    2858:	88 ec       	ldi	r24, 0xC8	; 200
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9a 8b       	std	Y+18, r25	; 0x12
    285e:	89 8b       	std	Y+17, r24	; 0x11
    2860:	89 89       	ldd	r24, Y+17	; 0x11
    2862:	9a 89       	ldd	r25, Y+18	; 0x12
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <main+0x37e>
    2868:	9a 8b       	std	Y+18, r25	; 0x12
    286a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8b 89       	ldd	r24, Y+19	; 0x13
    2878:	9c 89       	ldd	r25, Y+20	; 0x14
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <main+0x372>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	6d 89       	ldd	r22, Y+21	; 0x15
    2882:	7e 89       	ldd	r23, Y+22	; 0x16
    2884:	8f 89       	ldd	r24, Y+23	; 0x17
    2886:	98 8d       	ldd	r25, Y+24	; 0x18
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9c 8b       	std	Y+20, r25	; 0x14
    2892:	8b 8b       	std	Y+19, r24	; 0x13
    2894:	8b 89       	ldd	r24, Y+19	; 0x13
    2896:	9c 89       	ldd	r25, Y+20	; 0x14
    2898:	98 8b       	std	Y+16, r25	; 0x10
    289a:	8f 87       	std	Y+15, r24	; 0x0f
    289c:	8f 85       	ldd	r24, Y+15	; 0x0f
    289e:	98 89       	ldd	r25, Y+16	; 0x10
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <main+0x3ba>
    28a4:	98 8b       	std	Y+16, r25	; 0x10
    28a6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200); // guard delay

			/*****************************************************************
			 * 		ACK on password taken and checked
			 ******************************************************************/
			ack_set = UART_recieveByte();
    28a8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <UART_recieveByte>
    28ac:	80 93 2e 01 	sts	0x012E, r24
			LCD_clearScreen();
    28b0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LCD_clearScreen>
			LCD_displayString("Ack: ");
    28b4:	8a e9       	ldi	r24, 0x9A	; 154
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
			LCD_intgerToString(ack_set);
    28bc:	80 91 2e 01 	lds	r24, 0x012E
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <LCD_intgerToString>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	aa e7       	ldi	r26, 0x7A	; 122
    28ce:	b4 e4       	ldi	r27, 0x44	; 68
    28d0:	8b 87       	std	Y+11, r24	; 0x0b
    28d2:	9c 87       	std	Y+12, r25	; 0x0c
    28d4:	ad 87       	std	Y+13, r26	; 0x0d
    28d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28da:	7c 85       	ldd	r23, Y+12	; 0x0c
    28dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28de:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a ef       	ldi	r20, 0xFA	; 250
    28e6:	54 e4       	ldi	r21, 0x44	; 68
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8f 83       	std	Y+7, r24	; 0x07
    28f2:	98 87       	std	Y+8, r25	; 0x08
    28f4:	a9 87       	std	Y+9, r26	; 0x09
    28f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f8:	6f 81       	ldd	r22, Y+7	; 0x07
    28fa:	78 85       	ldd	r23, Y+8	; 0x08
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	2c f4       	brge	.+10     	; 0x291a <main+0x434>
		__ticks = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	3f c0       	rjmp	.+126    	; 0x2998 <main+0x4b2>
	else if (__tmp > 65535)
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	57 e4       	ldi	r21, 0x47	; 71
    292a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	4c f5       	brge	.+82     	; 0x2984 <main+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2932:	6b 85       	ldd	r22, Y+11	; 0x0b
    2934:	7c 85       	ldd	r23, Y+12	; 0x0c
    2936:	8d 85       	ldd	r24, Y+13	; 0x0d
    2938:	9e 85       	ldd	r25, Y+14	; 0x0e
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	0f c0       	rjmp	.+30     	; 0x297a <main+0x494>
    295c:	88 ec       	ldi	r24, 0xC8	; 200
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <main+0x482>
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	69 f7       	brne	.-38     	; 0x295c <main+0x476>
    2982:	14 c0       	rjmp	.+40     	; 0x29ac <main+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	9e 81       	ldd	r25, Y+6	; 0x06
    299c:	9a 83       	std	Y+2, r25	; 0x02
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <main+0x4be>
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000); // guard delay

		} while (ack_set == 0);
    29ac:	80 91 2e 01 	lds	r24, 0x012E
    29b0:	88 23       	and	r24, r24
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <main+0x4d0>
    29b4:	ef cd       	rjmp	.-1058   	; 0x2594 <main+0xae>
		 * 		Now the user can choose to open the door or change the password
		 ******************************************************************/
		while (1)
		{
			// option returned from the mainOptions function '+' or '-' only
			option = mainOptions();
    29b6:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <mainOptions>
    29ba:	80 93 38 01 	sts	0x0138, r24
			UART_sendByte(option);
    29be:	80 91 38 01 	lds	r24, 0x0138
    29c2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <UART_sendByte>

			do
			{
				// Re-enter password for confirmation
				option_password = Password_taking("PLZ ENTER PASS: ");
    29c6:	80 ea       	ldi	r24, 0xA0	; 160
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Password_taking>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	80 93 2a 01 	sts	0x012A, r24
    29d6:	90 93 2b 01 	sts	0x012B, r25
    29da:	a0 93 2c 01 	sts	0x012C, r26
    29de:	b0 93 2d 01 	sts	0x012D, r27
				sendPassword(option_password);
    29e2:	80 91 2a 01 	lds	r24, 0x012A
    29e6:	90 91 2b 01 	lds	r25, 0x012B
    29ea:	a0 91 2c 01 	lds	r26, 0x012C
    29ee:	b0 91 2d 01 	lds	r27, 0x012D
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 2b 18 	call	0x3056	; 0x3056 <sendPassword>
				// Acknowledge on password
				ack_compare = UART_recieveByte();
    29fa:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <UART_recieveByte>
    29fe:	80 93 2f 01 	sts	0x012F, r24

			} while (ack_compare != 3 && ack_compare != 5);
    2a02:	80 91 2f 01 	lds	r24, 0x012F
    2a06:	83 30       	cpi	r24, 0x03	; 3
    2a08:	21 f0       	breq	.+8      	; 0x2a12 <main+0x52c>
    2a0a:	80 91 2f 01 	lds	r24, 0x012F
    2a0e:	85 30       	cpi	r24, 0x05	; 5
    2a10:	d1 f6       	brne	.-76     	; 0x29c6 <main+0x4e0>

			if (ack_compare == 3)
    2a12:	80 91 2f 01 	lds	r24, 0x012F
    2a16:	83 30       	cpi	r24, 0x03	; 3
    2a18:	11 f5       	brne	.+68     	; 0x2a5e <main+0x578>
			{
				// Display error message on LCD for 1 minute.
				LCD_clearScreen();
    2a1a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LCD_clearScreen>
				LCD_displayString("  PASSWORED Is");
    2a1e:	81 eb       	ldi	r24, 0xB1	; 177
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
				LCD_moveCursor(1, 5);
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	65 e0       	ldi	r22, 0x05	; 5
    2a2a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
				LCD_displayString("WRONG");
    2a2e:	80 ec       	ldi	r24, 0xC0	; 192
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
				/*
				 * System should be locked no inputs from Keypad
				 * will be accepted during this time period 1min.
				 */
				timerValue = PASSWORD_TIME_OUT;
    2a36:	8c e3       	ldi	r24, 0x3C	; 60
    2a38:	80 93 30 01 	sts	0x0130, r24
				count_timer = 0;
    2a3c:	10 92 31 01 	sts	0x0131, r1
				Timer1_init(&timer_config);
    2a40:	82 e3       	ldi	r24, 0x32	; 50
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	0e 94 c1 10 	call	0x2182	; 0x2182 <Timer1_init>
				Timer1_setCallBack(passwordTimeOut);
    2a48:	82 e2       	ldi	r24, 0x22	; 34
    2a4a:	99 e1       	ldi	r25, 0x19	; 25
    2a4c:	0e 94 1c 11 	call	0x2238	; 0x2238 <Timer1_setCallBack>
				while (count_timer < timerValue)
    2a50:	90 91 31 01 	lds	r25, 0x0131
    2a54:	80 91 30 01 	lds	r24, 0x0130
    2a58:	98 17       	cp	r25, r24
    2a5a:	d0 f3       	brcs	.-12     	; 0x2a50 <main+0x56a>
    2a5c:	ac cf       	rjmp	.-168    	; 0x29b6 <main+0x4d0>
					;
				// there is no input till the time is over
				continue;
			}

			if (option == '+')
    2a5e:	80 91 38 01 	lds	r24, 0x0138
    2a62:	8b 32       	cpi	r24, 0x2B	; 43
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <main+0x582>
    2a66:	64 c0       	rjmp	.+200    	; 0x2b30 <main+0x64a>
			{
				// Display Door messages on LCD for 15s for opening.
				LCD_clearScreen();
    2a68:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LCD_clearScreen>
				LCD_displayString("   Door is");
    2a6c:	86 ec       	ldi	r24, 0xC6	; 198
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
				LCD_moveCursor(1, 3);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	63 e0       	ldi	r22, 0x03	; 3
    2a78:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
				LCD_displayString("Unlocking");
    2a7c:	81 ed       	ldi	r24, 0xD1	; 209
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>

				timerValue = DOOR_OPEN_TIME;
    2a84:	8f e0       	ldi	r24, 0x0F	; 15
    2a86:	80 93 30 01 	sts	0x0130, r24
				count_timer = 0;
    2a8a:	10 92 31 01 	sts	0x0131, r1
				Timer1_setCallBack(passwordTimeOut);
    2a8e:	82 e2       	ldi	r24, 0x22	; 34
    2a90:	99 e1       	ldi	r25, 0x19	; 25
    2a92:	0e 94 1c 11 	call	0x2238	; 0x2238 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    2a96:	82 e3       	ldi	r24, 0x32	; 50
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	0e 94 c1 10 	call	0x2182	; 0x2182 <Timer1_init>
				while (count_timer < timerValue)
    2a9e:	90 91 31 01 	lds	r25, 0x0131
    2aa2:	80 91 30 01 	lds	r24, 0x0130
    2aa6:	98 17       	cp	r25, r24
    2aa8:	d0 f3       	brcs	.-12     	; 0x2a9e <main+0x5b8>
					;

				// Display Door messages on LCD for 15s for opening.
				LCD_clearScreen();
    2aaa:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LCD_clearScreen>
				LCD_displayString("   Door is");
    2aae:	86 ec       	ldi	r24, 0xC6	; 198
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
				LCD_moveCursor(1, 3);
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	63 e0       	ldi	r22, 0x03	; 3
    2aba:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
				LCD_displayString(" opened");
    2abe:	8b ed       	ldi	r24, 0xDB	; 219
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>

				timerValue = DOOR_HOLD_TIME;
    2ac6:	83 e0       	ldi	r24, 0x03	; 3
    2ac8:	80 93 30 01 	sts	0x0130, r24
				count_timer = 0;
    2acc:	10 92 31 01 	sts	0x0131, r1
				Timer1_setCallBack(passwordTimeOut);
    2ad0:	82 e2       	ldi	r24, 0x22	; 34
    2ad2:	99 e1       	ldi	r25, 0x19	; 25
    2ad4:	0e 94 1c 11 	call	0x2238	; 0x2238 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    2ad8:	82 e3       	ldi	r24, 0x32	; 50
    2ada:	91 e0       	ldi	r25, 0x01	; 1
    2adc:	0e 94 c1 10 	call	0x2182	; 0x2182 <Timer1_init>
				while (count_timer < timerValue)
    2ae0:	90 91 31 01 	lds	r25, 0x0131
    2ae4:	80 91 30 01 	lds	r24, 0x0130
    2ae8:	98 17       	cp	r25, r24
    2aea:	d0 f3       	brcs	.-12     	; 0x2ae0 <main+0x5fa>
					;

				// Display Door messages on LCD for 15s for opening.
				LCD_clearScreen();
    2aec:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LCD_clearScreen>
				LCD_displayString("    Door is");
    2af0:	83 ee       	ldi	r24, 0xE3	; 227
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
				LCD_moveCursor(1, 4);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	64 e0       	ldi	r22, 0x04	; 4
    2afc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
				LCD_displayString("Locking");
    2b00:	8f ee       	ldi	r24, 0xEF	; 239
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>

				timerValue = DOOR_CLOSE_TIME;
    2b08:	8f e0       	ldi	r24, 0x0F	; 15
    2b0a:	80 93 30 01 	sts	0x0130, r24
				count_timer = 0;
    2b0e:	10 92 31 01 	sts	0x0131, r1
				Timer1_setCallBack(passwordTimeOut);
    2b12:	82 e2       	ldi	r24, 0x22	; 34
    2b14:	99 e1       	ldi	r25, 0x19	; 25
    2b16:	0e 94 1c 11 	call	0x2238	; 0x2238 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    2b1a:	82 e3       	ldi	r24, 0x32	; 50
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	0e 94 c1 10 	call	0x2182	; 0x2182 <Timer1_init>
				while (count_timer < timerValue)
    2b22:	90 91 31 01 	lds	r25, 0x0131
    2b26:	80 91 30 01 	lds	r24, 0x0130
    2b2a:	98 17       	cp	r25, r24
    2b2c:	d0 f3       	brcs	.-12     	; 0x2b22 <main+0x63c>
    2b2e:	43 cf       	rjmp	.-378    	; 0x29b6 <main+0x4d0>
					;
			}
			else if (option == '-')
    2b30:	80 91 38 01 	lds	r24, 0x0138
    2b34:	8d 32       	cpi	r24, 0x2D	; 45
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <main+0x654>
    2b38:	13 cd       	rjmp	.-1498   	; 0x2560 <main+0x7a>
    2b3a:	3d cf       	rjmp	.-390    	; 0x29b6 <main+0x4d0>

00002b3c <Password_taking>:
 * Description:
 * function to take the password
 * and handle LCD layout
 */
static uint32 Password_taking(uint8 sentence[])
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	e4 97       	sbiw	r28, 0x34	; 52
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	9c ab       	std	Y+52, r25	; 0x34
    2b52:	8b ab       	std	Y+51, r24	; 0x33
	uint8 key = 90;
    2b54:	8a e5       	ldi	r24, 0x5A	; 90
    2b56:	8a ab       	std	Y+50, r24	; 0x32
	uint8 enterKey = 90;
    2b58:	8a e5       	ldi	r24, 0x5A	; 90
    2b5a:	89 ab       	std	Y+49, r24	; 0x31
	sint8 i = 0, j = 0;
    2b5c:	18 aa       	std	Y+48, r1	; 0x30
    2b5e:	1f a6       	std	Y+47, r1	; 0x2f
	uint32 password = 0;
    2b60:	1b a6       	std	Y+43, r1	; 0x2b
    2b62:	1c a6       	std	Y+44, r1	; 0x2c
    2b64:	1d a6       	std	Y+45, r1	; 0x2d
    2b66:	1e a6       	std	Y+46, r1	; 0x2e

	LCD_clearScreen();
    2b68:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LCD_clearScreen>
	LCD_displayString(sentence);
    2b6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b70:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 ef       	ldi	r26, 0xF0	; 240
    2b7a:	b1 e4       	ldi	r27, 0x41	; 65
    2b7c:	8f a3       	std	Y+39, r24	; 0x27
    2b7e:	98 a7       	std	Y+40, r25	; 0x28
    2b80:	a9 a7       	std	Y+41, r26	; 0x29
    2b82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6f a1       	ldd	r22, Y+39	; 0x27
    2b86:	78 a5       	ldd	r23, Y+40	; 0x28
    2b88:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a ef       	ldi	r20, 0xFA	; 250
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8b a3       	std	Y+35, r24	; 0x23
    2b9e:	9c a3       	std	Y+36, r25	; 0x24
    2ba0:	ad a3       	std	Y+37, r26	; 0x25
    2ba2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    2baa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <Password_taking+0x8a>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9a a3       	std	Y+34, r25	; 0x22
    2bc2:	89 a3       	std	Y+33, r24	; 0x21
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <Password_taking+0x108>
	else if (__tmp > 65535)
    2bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bca:	8d a1       	ldd	r24, Y+37	; 0x25
    2bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <Password_taking+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6f a1       	ldd	r22, Y+39	; 0x27
    2be0:	78 a5       	ldd	r23, Y+40	; 0x28
    2be2:	89 a5       	ldd	r24, Y+41	; 0x29
    2be4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9a a3       	std	Y+34, r25	; 0x22
    2c04:	89 a3       	std	Y+33, r24	; 0x21
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <Password_taking+0xea>
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	98 a3       	std	Y+32, r25	; 0x20
    2c0e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c12:	98 a1       	ldd	r25, Y+32	; 0x20
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <Password_taking+0xd8>
    2c18:	98 a3       	std	Y+32, r25	; 0x20
    2c1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9a a3       	std	Y+34, r25	; 0x22
    2c24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	89 a1       	ldd	r24, Y+33	; 0x21
    2c28:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <Password_taking+0xcc>
    2c2e:	18 c0       	rjmp	.+48     	; 0x2c60 <Password_taking+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6b a1       	ldd	r22, Y+35	; 0x23
    2c32:	7c a1       	ldd	r23, Y+36	; 0x24
    2c34:	8d a1       	ldd	r24, Y+37	; 0x25
    2c36:	9e a1       	ldd	r25, Y+38	; 0x26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9a a3       	std	Y+34, r25	; 0x22
    2c42:	89 a3       	std	Y+33, r24	; 0x21
    2c44:	89 a1       	ldd	r24, Y+33	; 0x21
    2c46:	9a a1       	ldd	r25, Y+34	; 0x22
    2c48:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <Password_taking+0x114>
    2c54:	9e 8f       	std	Y+30, r25	; 0x1e
    2c56:	8d 8f       	std	Y+29, r24	; 0x1d
    2c58:	03 c0       	rjmp	.+6      	; 0x2c60 <Password_taking+0x124>
	_delay_ms(30);

	while (sentence[i] != '\0')
	{
		i++;
    2c5a:	88 a9       	ldd	r24, Y+48	; 0x30
    2c5c:	8f 5f       	subi	r24, 0xFF	; 255
    2c5e:	88 ab       	std	Y+48, r24	; 0x30

	LCD_clearScreen();
	LCD_displayString(sentence);
	_delay_ms(30);

	while (sentence[i] != '\0')
    2c60:	88 a9       	ldd	r24, Y+48	; 0x30
    2c62:	28 2f       	mov	r18, r24
    2c64:	33 27       	eor	r19, r19
    2c66:	27 fd       	sbrc	r18, 7
    2c68:	30 95       	com	r19
    2c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c6e:	fc 01       	movw	r30, r24
    2c70:	e2 0f       	add	r30, r18
    2c72:	f3 1f       	adc	r31, r19
    2c74:	80 81       	ld	r24, Z
    2c76:	88 23       	and	r24, r24
    2c78:	81 f7       	brne	.-32     	; 0x2c5a <Password_taking+0x11e>
	{
		i++;
	}

	if (i > 16)
    2c7a:	88 a9       	ldd	r24, Y+48	; 0x30
    2c7c:	81 31       	cpi	r24, 0x11	; 17
    2c7e:	0c f4       	brge	.+2      	; 0x2c82 <Password_taking+0x146>
    2c80:	90 c0       	rjmp	.+288    	; 0x2da2 <Password_taking+0x266>
	{
		i = 0;
    2c82:	18 aa       	std	Y+48, r1	; 0x30
    2c84:	78 c0       	rjmp	.+240    	; 0x2d76 <Password_taking+0x23a>
		while (sentence[i + 16] != '\0')
		{
			LCD_shiftScreenLeft(1);
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <LCD_shiftScreenLeft>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 ef       	ldi	r26, 0xF0	; 240
    2c92:	b1 e4       	ldi	r27, 0x41	; 65
    2c94:	89 8f       	std	Y+25, r24	; 0x19
    2c96:	9a 8f       	std	Y+26, r25	; 0x1a
    2c98:	ab 8f       	std	Y+27, r26	; 0x1b
    2c9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8d 8b       	std	Y+21, r24	; 0x15
    2cb6:	9e 8b       	std	Y+22, r25	; 0x16
    2cb8:	af 8b       	std	Y+23, r26	; 0x17
    2cba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <Password_taking+0x1a2>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9c 8b       	std	Y+20, r25	; 0x14
    2cda:	8b 8b       	std	Y+19, r24	; 0x13
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <Password_taking+0x220>
	else if (__tmp > 65535)
    2cde:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <Password_taking+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9c 8b       	std	Y+20, r25	; 0x14
    2d1c:	8b 8b       	std	Y+19, r24	; 0x13
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <Password_taking+0x202>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9a 8b       	std	Y+18, r25	; 0x12
    2d26:	89 8b       	std	Y+17, r24	; 0x11
    2d28:	89 89       	ldd	r24, Y+17	; 0x11
    2d2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <Password_taking+0x1f0>
    2d30:	9a 8b       	std	Y+18, r25	; 0x12
    2d32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9c 8b       	std	Y+20, r25	; 0x14
    2d3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d40:	9c 89       	ldd	r25, Y+20	; 0x14
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <Password_taking+0x1e4>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <Password_taking+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9c 8b       	std	Y+20, r25	; 0x14
    2d5a:	8b 8b       	std	Y+19, r24	; 0x13
    2d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d60:	98 8b       	std	Y+16, r25	; 0x10
    2d62:	8f 87       	std	Y+15, r24	; 0x0f
    2d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d66:	98 89       	ldd	r25, Y+16	; 0x10
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <Password_taking+0x22c>
    2d6c:	98 8b       	std	Y+16, r25	; 0x10
    2d6e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(30);
			i++;
    2d70:	88 a9       	ldd	r24, Y+48	; 0x30
    2d72:	8f 5f       	subi	r24, 0xFF	; 255
    2d74:	88 ab       	std	Y+48, r24	; 0x30
	}

	if (i > 16)
	{
		i = 0;
		while (sentence[i + 16] != '\0')
    2d76:	88 a9       	ldd	r24, Y+48	; 0x30
    2d78:	99 27       	eor	r25, r25
    2d7a:	87 fd       	sbrc	r24, 7
    2d7c:	90 95       	com	r25
    2d7e:	9c 01       	movw	r18, r24
    2d80:	20 5f       	subi	r18, 0xF0	; 240
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	8b a9       	ldd	r24, Y+51	; 0x33
    2d86:	9c a9       	ldd	r25, Y+52	; 0x34
    2d88:	fc 01       	movw	r30, r24
    2d8a:	e2 0f       	add	r30, r18
    2d8c:	f3 1f       	adc	r31, r19
    2d8e:	80 81       	ld	r24, Z
    2d90:	88 23       	and	r24, r24
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <Password_taking+0x25a>
    2d94:	78 cf       	rjmp	.-272    	; 0x2c86 <Password_taking+0x14a>
		{
			LCD_shiftScreenLeft(1);
			_delay_ms(30);
			i++;
		}
		LCD_moveCursor(1, i);
    2d96:	98 a9       	ldd	r25, Y+48	; 0x30
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	69 2f       	mov	r22, r25
    2d9c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
    2da0:	30 c0       	rjmp	.+96     	; 0x2e02 <Password_taking+0x2c6>
	}
	else
	{
		LCD_moveCursor(1, 0);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
    2daa:	2b c0       	rjmp	.+86     	; 0x2e02 <Password_taking+0x2c6>
	 * 3- handling the entered chars to be only numbers
	 */

	for (; j < 5; j++)
	{
		key = KEYPAD_getPressedKey();
    2dac:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2db0:	8a ab       	std	Y+50, r24	; 0x32
		if (key >= 0 && key <= 9)
    2db2:	8a a9       	ldd	r24, Y+50	; 0x32
    2db4:	8a 30       	cpi	r24, 0x0A	; 10
    2db6:	f8 f4       	brcc	.+62     	; 0x2df6 <Password_taking+0x2ba>
		{
			password = password * 10 + key;
    2db8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dbc:	ad a5       	ldd	r26, Y+45	; 0x2d
    2dbe:	be a5       	ldd	r27, Y+46	; 0x2e
    2dc0:	2a e0       	ldi	r18, 0x0A	; 10
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 37 19 	call	0x326e	; 0x326e <__mulsi3>
    2dd0:	9b 01       	movw	r18, r22
    2dd2:	ac 01       	movw	r20, r24
    2dd4:	8a a9       	ldd	r24, Y+50	; 0x32
    2dd6:	88 2f       	mov	r24, r24
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a0 e0       	ldi	r26, 0x00	; 0
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	82 0f       	add	r24, r18
    2de0:	93 1f       	adc	r25, r19
    2de2:	a4 1f       	adc	r26, r20
    2de4:	b5 1f       	adc	r27, r21
    2de6:	8b a7       	std	Y+43, r24	; 0x2b
    2de8:	9c a7       	std	Y+44, r25	; 0x2c
    2dea:	ad a7       	std	Y+45, r26	; 0x2d
    2dec:	be a7       	std	Y+46, r27	; 0x2e
			LCD_displayCharacter('*');
    2dee:	8a e2       	ldi	r24, 0x2A	; 42
    2df0:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_displayCharacter>
    2df4:	03 c0       	rjmp	.+6      	; 0x2dfc <Password_taking+0x2c0>
			//			LCD_intgerToString(key);
		}
		else
		{
			j--;
    2df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df8:	81 50       	subi	r24, 0x01	; 1
    2dfa:	8f a7       	std	Y+47, r24	; 0x2f
	 * 1- taking 5 numbers from the user and save them
	 * 2- display * for each number
	 * 3- handling the entered chars to be only numbers
	 */

	for (; j < 5; j++)
    2dfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	8f a7       	std	Y+47, r24	; 0x2f
    2e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e04:	85 30       	cpi	r24, 0x05	; 5
    2e06:	94 f2       	brlt	.-92     	; 0x2dac <Password_taking+0x270>
	 * press backspace or on/c on the keypad to delete number (next version of the project (; )
	 */

	do
	{
		enterKey = KEYPAD_getPressedKey();
    2e08:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2e0c:	89 ab       	std	Y+49, r24	; 0x31
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a0 ea       	ldi	r26, 0xA0	; 160
    2e14:	b1 e4       	ldi	r27, 0x41	; 65
    2e16:	8b 87       	std	Y+11, r24	; 0x0b
    2e18:	9c 87       	std	Y+12, r25	; 0x0c
    2e1a:	ad 87       	std	Y+13, r26	; 0x0d
    2e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a ef       	ldi	r20, 0xFA	; 250
    2e2c:	54 e4       	ldi	r21, 0x44	; 68
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	8f 83       	std	Y+7, r24	; 0x07
    2e38:	98 87       	std	Y+8, r25	; 0x08
    2e3a:	a9 87       	std	Y+9, r26	; 0x09
    2e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e40:	78 85       	ldd	r23, Y+8	; 0x08
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <Password_taking+0x324>
		__ticks = 1;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	9e 83       	std	Y+6, r25	; 0x06
    2e5c:	8d 83       	std	Y+5, r24	; 0x05
    2e5e:	3f c0       	rjmp	.+126    	; 0x2ede <Password_taking+0x3a2>
	else if (__tmp > 65535)
    2e60:	6f 81       	ldd	r22, Y+7	; 0x07
    2e62:	78 85       	ldd	r23, Y+8	; 0x08
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	3f ef       	ldi	r19, 0xFF	; 255
    2e6c:	4f e7       	ldi	r20, 0x7F	; 127
    2e6e:	57 e4       	ldi	r21, 0x47	; 71
    2e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e74:	18 16       	cp	r1, r24
    2e76:	4c f5       	brge	.+82     	; 0x2eca <Password_taking+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e2       	ldi	r20, 0x20	; 32
    2e86:	51 e4       	ldi	r21, 0x41	; 65
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <Password_taking+0x384>
    2ea2:	88 ec       	ldi	r24, 0xC8	; 200
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <Password_taking+0x372>
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	9e 83       	std	Y+6, r25	; 0x06
    2ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <Password_taking+0x366>
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <Password_taking+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ecc:	78 85       	ldd	r23, Y+8	; 0x08
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9e 83       	std	Y+6, r25	; 0x06
    2edc:	8d 83       	std	Y+5, r24	; 0x05
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <Password_taking+0x3ae>
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
	} while (enterKey != '=');
    2ef2:	89 a9       	ldd	r24, Y+49	; 0x31
    2ef4:	8d 33       	cpi	r24, 0x3D	; 61
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <Password_taking+0x3be>
    2ef8:	87 cf       	rjmp	.-242    	; 0x2e08 <Password_taking+0x2cc>

	return password;
    2efa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2efe:	ad a5       	ldd	r26, Y+45	; 0x2d
    2f00:	be a5       	ldd	r27, Y+46	; 0x2e
}
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	e4 96       	adiw	r28, 0x34	; 52
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <mainOptions>:
 * function to display the main options
 * '+' to open the door
 * '-' to change password
 */
uint8 mainOptions(void)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	2f 97       	sbiw	r28, 0x0f	; 15
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
	uint8 enterKey = -1;
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_clearScreen();
    2f30:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LCD_clearScreen>
	LCD_displayString(" + : Open Door");
    2f34:	87 ef       	ldi	r24, 0xF7	; 247
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_moveCursor>
	LCD_displayString(" - : Change Pass");
    2f44:	86 e0       	ldi	r24, 0x06	; 6
    2f46:	91 e0       	ldi	r25, 0x01	; 1
    2f48:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_displayString>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a0 ea       	ldi	r26, 0xA0	; 160
    2f52:	b1 e4       	ldi	r27, 0x41	; 65
    2f54:	8b 87       	std	Y+11, r24	; 0x0b
    2f56:	9c 87       	std	Y+12, r25	; 0x0c
    2f58:	ad 87       	std	Y+13, r26	; 0x0d
    2f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	4a ef       	ldi	r20, 0xFA	; 250
    2f6a:	54 e4       	ldi	r21, 0x44	; 68
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	8f 83       	std	Y+7, r24	; 0x07
    2f76:	98 87       	std	Y+8, r25	; 0x08
    2f78:	a9 87       	std	Y+9, r26	; 0x09
    2f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7e:	78 85       	ldd	r23, Y+8	; 0x08
    2f80:	89 85       	ldd	r24, Y+9	; 0x09
    2f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e8       	ldi	r20, 0x80	; 128
    2f8a:	5f e3       	ldi	r21, 0x3F	; 63
    2f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f90:	88 23       	and	r24, r24
    2f92:	2c f4       	brge	.+10     	; 0x2f9e <mainOptions+0x86>
		__ticks = 1;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	3f c0       	rjmp	.+126    	; 0x301c <mainOptions+0x104>
	else if (__tmp > 65535)
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	3f ef       	ldi	r19, 0xFF	; 255
    2faa:	4f e7       	ldi	r20, 0x7F	; 127
    2fac:	57 e4       	ldi	r21, 0x47	; 71
    2fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb2:	18 16       	cp	r1, r24
    2fb4:	4c f5       	brge	.+82     	; 0x3008 <mainOptions+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	0f c0       	rjmp	.+30     	; 0x2ffe <mainOptions+0xe6>
    2fe0:	88 ec       	ldi	r24, 0xC8	; 200
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9c 83       	std	Y+4, r25	; 0x04
    2fe6:	8b 83       	std	Y+3, r24	; 0x03
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <mainOptions+0xd4>
    2ff0:	9c 83       	std	Y+4, r25	; 0x04
    2ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <mainOptions+0xc8>
    3006:	14 c0       	rjmp	.+40     	; 0x3030 <mainOptions+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3008:	6f 81       	ldd	r22, Y+7	; 0x07
    300a:	78 85       	ldd	r23, Y+8	; 0x08
    300c:	89 85       	ldd	r24, Y+9	; 0x09
    300e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9e 83       	std	Y+6, r25	; 0x06
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	8d 81       	ldd	r24, Y+5	; 0x05
    301e:	9e 81       	ldd	r25, Y+6	; 0x06
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <mainOptions+0x110>
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	while (1)
	{
		enterKey = KEYPAD_getPressedKey();
    3030:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    3034:	8f 87       	std	Y+15, r24	; 0x0f
		if (enterKey == '+' || enterKey == '-')
    3036:	8f 85       	ldd	r24, Y+15	; 0x0f
    3038:	8b 32       	cpi	r24, 0x2B	; 43
    303a:	19 f0       	breq	.+6      	; 0x3042 <mainOptions+0x12a>
    303c:	8f 85       	ldd	r24, Y+15	; 0x0f
    303e:	8d 32       	cpi	r24, 0x2D	; 45
    3040:	b9 f7       	brne	.-18     	; 0x3030 <mainOptions+0x118>
		{
			return enterKey;
    3042:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    3044:	2f 96       	adiw	r28, 0x0f	; 15
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <sendPassword>:
/*
 * Description:
 * function to send the password to the Control_ECU
 */
void sendPassword(uint32 password)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	6d 97       	sbiw	r28, 0x1d	; 29
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	6a 8f       	std	Y+26, r22	; 0x1a
    306c:	7b 8f       	std	Y+27, r23	; 0x1b
    306e:	8c 8f       	std	Y+28, r24	; 0x1c
    3070:	9d 8f       	std	Y+29, r25	; 0x1d
	// Send password to the Control_ECU
	uint8 digit = 0;
    3072:	19 8e       	std	Y+25, r1	; 0x19
	uint32 pass = 0;
    3074:	1d 8a       	std	Y+21, r1	; 0x15
    3076:	1e 8a       	std	Y+22, r1	; 0x16
    3078:	1f 8a       	std	Y+23, r1	; 0x17
    307a:	18 8e       	std	Y+24, r1	; 0x18
	sint8 k = 4;
    307c:	84 e0       	ldi	r24, 0x04	; 4
    307e:	8c 8b       	std	Y+20, r24	; 0x14
	uint32 mul = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a0 e0       	ldi	r26, 0x00	; 0
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	88 8b       	std	Y+16, r24	; 0x10
    308a:	99 8b       	std	Y+17, r25	; 0x11
    308c:	aa 8b       	std	Y+18, r26	; 0x12
    308e:	bb 8b       	std	Y+19, r27	; 0x13
	for (k = 4; k >= 0; k--)
    3090:	84 e0       	ldi	r24, 0x04	; 4
    3092:	8c 8b       	std	Y+20, r24	; 0x14
    3094:	ca c0       	rjmp	.+404    	; 0x322a <sendPassword+0x1d4>
	{
		mul = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a0 e0       	ldi	r26, 0x00	; 0
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	88 8b       	std	Y+16, r24	; 0x10
    30a0:	99 8b       	std	Y+17, r25	; 0x11
    30a2:	aa 8b       	std	Y+18, r26	; 0x12
    30a4:	bb 8b       	std	Y+19, r27	; 0x13
		for (uint8 h = 0; h < k; h++)
    30a6:	1f 86       	std	Y+15, r1	; 0x0f
    30a8:	15 c0       	rjmp	.+42     	; 0x30d4 <sendPassword+0x7e>
			mul *= 10;
    30aa:	88 89       	ldd	r24, Y+16	; 0x10
    30ac:	99 89       	ldd	r25, Y+17	; 0x11
    30ae:	aa 89       	ldd	r26, Y+18	; 0x12
    30b0:	bb 89       	ldd	r27, Y+19	; 0x13
    30b2:	2a e0       	ldi	r18, 0x0A	; 10
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 37 19 	call	0x326e	; 0x326e <__mulsi3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	88 8b       	std	Y+16, r24	; 0x10
    30c8:	99 8b       	std	Y+17, r25	; 0x11
    30ca:	aa 8b       	std	Y+18, r26	; 0x12
    30cc:	bb 8b       	std	Y+19, r27	; 0x13
	sint8 k = 4;
	uint32 mul = 1;
	for (k = 4; k >= 0; k--)
	{
		mul = 1;
		for (uint8 h = 0; h < k; h++)
    30ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d0:	8f 5f       	subi	r24, 0xFF	; 255
    30d2:	8f 87       	std	Y+15, r24	; 0x0f
    30d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	8c 89       	ldd	r24, Y+20	; 0x14
    30dc:	99 27       	eor	r25, r25
    30de:	87 fd       	sbrc	r24, 7
    30e0:	90 95       	com	r25
    30e2:	28 17       	cp	r18, r24
    30e4:	39 07       	cpc	r19, r25
    30e6:	0c f3       	brlt	.-62     	; 0x30aa <sendPassword+0x54>
			mul *= 10;
		pass = password;
    30e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30ec:	ac 8d       	ldd	r26, Y+28	; 0x1c
    30ee:	bd 8d       	ldd	r27, Y+29	; 0x1d
    30f0:	8d 8b       	std	Y+21, r24	; 0x15
    30f2:	9e 8b       	std	Y+22, r25	; 0x16
    30f4:	af 8b       	std	Y+23, r26	; 0x17
    30f6:	b8 8f       	std	Y+24, r27	; 0x18
		pass = pass / mul;
    30f8:	8d 89       	ldd	r24, Y+21	; 0x15
    30fa:	9e 89       	ldd	r25, Y+22	; 0x16
    30fc:	af 89       	ldd	r26, Y+23	; 0x17
    30fe:	b8 8d       	ldd	r27, Y+24	; 0x18
    3100:	28 89       	ldd	r18, Y+16	; 0x10
    3102:	39 89       	ldd	r19, Y+17	; 0x11
    3104:	4a 89       	ldd	r20, Y+18	; 0x12
    3106:	5b 89       	ldd	r21, Y+19	; 0x13
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 56 19 	call	0x32ac	; 0x32ac <__udivmodsi4>
    3110:	da 01       	movw	r26, r20
    3112:	c9 01       	movw	r24, r18
    3114:	8d 8b       	std	Y+21, r24	; 0x15
    3116:	9e 8b       	std	Y+22, r25	; 0x16
    3118:	af 8b       	std	Y+23, r26	; 0x17
    311a:	b8 8f       	std	Y+24, r27	; 0x18
		digit = pass % 10;
    311c:	8d 89       	ldd	r24, Y+21	; 0x15
    311e:	9e 89       	ldd	r25, Y+22	; 0x16
    3120:	af 89       	ldd	r26, Y+23	; 0x17
    3122:	b8 8d       	ldd	r27, Y+24	; 0x18
    3124:	2a e0       	ldi	r18, 0x0A	; 10
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	0e 94 56 19 	call	0x32ac	; 0x32ac <__udivmodsi4>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	89 8f       	std	Y+25, r24	; 0x19
		UART_sendByte(digit);
    313a:	89 8d       	ldd	r24, Y+25	; 0x19
    313c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <UART_sendByte>
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a0 ea       	ldi	r26, 0xA0	; 160
    3146:	b1 e4       	ldi	r27, 0x41	; 65
    3148:	8b 87       	std	Y+11, r24	; 0x0b
    314a:	9c 87       	std	Y+12, r25	; 0x0c
    314c:	ad 87       	std	Y+13, r26	; 0x0d
    314e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3150:	6b 85       	ldd	r22, Y+11	; 0x0b
    3152:	7c 85       	ldd	r23, Y+12	; 0x0c
    3154:	8d 85       	ldd	r24, Y+13	; 0x0d
    3156:	9e 85       	ldd	r25, Y+14	; 0x0e
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4a ef       	ldi	r20, 0xFA	; 250
    315e:	54 e4       	ldi	r21, 0x44	; 68
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	8f 83       	std	Y+7, r24	; 0x07
    316a:	98 87       	std	Y+8, r25	; 0x08
    316c:	a9 87       	std	Y+9, r26	; 0x09
    316e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3170:	6f 81       	ldd	r22, Y+7	; 0x07
    3172:	78 85       	ldd	r23, Y+8	; 0x08
    3174:	89 85       	ldd	r24, Y+9	; 0x09
    3176:	9a 85       	ldd	r25, Y+10	; 0x0a
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	2c f4       	brge	.+10     	; 0x3192 <sendPassword+0x13c>
		__ticks = 1;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9e 83       	std	Y+6, r25	; 0x06
    318e:	8d 83       	std	Y+5, r24	; 0x05
    3190:	3f c0       	rjmp	.+126    	; 0x3210 <sendPassword+0x1ba>
	else if (__tmp > 65535)
    3192:	6f 81       	ldd	r22, Y+7	; 0x07
    3194:	78 85       	ldd	r23, Y+8	; 0x08
    3196:	89 85       	ldd	r24, Y+9	; 0x09
    3198:	9a 85       	ldd	r25, Y+10	; 0x0a
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	3f ef       	ldi	r19, 0xFF	; 255
    319e:	4f e7       	ldi	r20, 0x7F	; 127
    31a0:	57 e4       	ldi	r21, 0x47	; 71
    31a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a6:	18 16       	cp	r1, r24
    31a8:	4c f5       	brge	.+82     	; 0x31fc <sendPassword+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e2       	ldi	r20, 0x20	; 32
    31b8:	51 e4       	ldi	r21, 0x41	; 65
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9e 83       	std	Y+6, r25	; 0x06
    31d0:	8d 83       	std	Y+5, r24	; 0x05
    31d2:	0f c0       	rjmp	.+30     	; 0x31f2 <sendPassword+0x19c>
    31d4:	88 ec       	ldi	r24, 0xC8	; 200
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	9c 83       	std	Y+4, r25	; 0x04
    31da:	8b 83       	std	Y+3, r24	; 0x03
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	9c 81       	ldd	r25, Y+4	; 0x04
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <sendPassword+0x18a>
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	9e 81       	ldd	r25, Y+6	; 0x06
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	9e 83       	std	Y+6, r25	; 0x06
    31f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	69 f7       	brne	.-38     	; 0x31d4 <sendPassword+0x17e>
    31fa:	14 c0       	rjmp	.+40     	; 0x3224 <sendPassword+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fc:	6f 81       	ldd	r22, Y+7	; 0x07
    31fe:	78 85       	ldd	r23, Y+8	; 0x08
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	9e 83       	std	Y+6, r25	; 0x06
    320e:	8d 83       	std	Y+5, r24	; 0x05
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <sendPassword+0x1c6>
    3220:	9a 83       	std	Y+2, r25	; 0x02
    3222:	89 83       	std	Y+1, r24	; 0x01
	// Send password to the Control_ECU
	uint8 digit = 0;
	uint32 pass = 0;
	sint8 k = 4;
	uint32 mul = 1;
	for (k = 4; k >= 0; k--)
    3224:	8c 89       	ldd	r24, Y+20	; 0x14
    3226:	81 50       	subi	r24, 0x01	; 1
    3228:	8c 8b       	std	Y+20, r24	; 0x14
    322a:	8c 89       	ldd	r24, Y+20	; 0x14
    322c:	88 23       	and	r24, r24
    322e:	0c f0       	brlt	.+2      	; 0x3232 <sendPassword+0x1dc>
    3230:	32 cf       	rjmp	.-412    	; 0x3096 <sendPassword+0x40>
		pass = pass / mul;
		digit = pass % 10;
		UART_sendByte(digit);
		_delay_ms(20); // A Very Important Delay
	}
}
    3232:	6d 96       	adiw	r28, 0x1d	; 29
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <passwordTimeOut>:
 * Description:
 * Callback function for the timer function
 * that is called when the timer interrupt occurs
 */
void passwordTimeOut(void)
{
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
	if (count_timer >= timerValue)
    324c:	90 91 31 01 	lds	r25, 0x0131
    3250:	80 91 30 01 	lds	r24, 0x0130
    3254:	98 17       	cp	r25, r24
    3256:	18 f0       	brcs	.+6      	; 0x325e <passwordTimeOut+0x1a>
	{
		Timer1_deInit();
    3258:	0e 94 00 11 	call	0x2200	; 0x2200 <Timer1_deInit>
    325c:	05 c0       	rjmp	.+10     	; 0x3268 <passwordTimeOut+0x24>
		return;
	}
	count_timer++;
    325e:	80 91 31 01 	lds	r24, 0x0131
    3262:	8f 5f       	subi	r24, 0xFF	; 255
    3264:	80 93 31 01 	sts	0x0131, r24
}
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <__mulsi3>:
    326e:	62 9f       	mul	r22, r18
    3270:	d0 01       	movw	r26, r0
    3272:	73 9f       	mul	r23, r19
    3274:	f0 01       	movw	r30, r0
    3276:	82 9f       	mul	r24, r18
    3278:	e0 0d       	add	r30, r0
    327a:	f1 1d       	adc	r31, r1
    327c:	64 9f       	mul	r22, r20
    327e:	e0 0d       	add	r30, r0
    3280:	f1 1d       	adc	r31, r1
    3282:	92 9f       	mul	r25, r18
    3284:	f0 0d       	add	r31, r0
    3286:	83 9f       	mul	r24, r19
    3288:	f0 0d       	add	r31, r0
    328a:	74 9f       	mul	r23, r20
    328c:	f0 0d       	add	r31, r0
    328e:	65 9f       	mul	r22, r21
    3290:	f0 0d       	add	r31, r0
    3292:	99 27       	eor	r25, r25
    3294:	72 9f       	mul	r23, r18
    3296:	b0 0d       	add	r27, r0
    3298:	e1 1d       	adc	r30, r1
    329a:	f9 1f       	adc	r31, r25
    329c:	63 9f       	mul	r22, r19
    329e:	b0 0d       	add	r27, r0
    32a0:	e1 1d       	adc	r30, r1
    32a2:	f9 1f       	adc	r31, r25
    32a4:	bd 01       	movw	r22, r26
    32a6:	cf 01       	movw	r24, r30
    32a8:	11 24       	eor	r1, r1
    32aa:	08 95       	ret

000032ac <__udivmodsi4>:
    32ac:	a1 e2       	ldi	r26, 0x21	; 33
    32ae:	1a 2e       	mov	r1, r26
    32b0:	aa 1b       	sub	r26, r26
    32b2:	bb 1b       	sub	r27, r27
    32b4:	fd 01       	movw	r30, r26
    32b6:	0d c0       	rjmp	.+26     	; 0x32d2 <__udivmodsi4_ep>

000032b8 <__udivmodsi4_loop>:
    32b8:	aa 1f       	adc	r26, r26
    32ba:	bb 1f       	adc	r27, r27
    32bc:	ee 1f       	adc	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	a2 17       	cp	r26, r18
    32c2:	b3 07       	cpc	r27, r19
    32c4:	e4 07       	cpc	r30, r20
    32c6:	f5 07       	cpc	r31, r21
    32c8:	20 f0       	brcs	.+8      	; 0x32d2 <__udivmodsi4_ep>
    32ca:	a2 1b       	sub	r26, r18
    32cc:	b3 0b       	sbc	r27, r19
    32ce:	e4 0b       	sbc	r30, r20
    32d0:	f5 0b       	sbc	r31, r21

000032d2 <__udivmodsi4_ep>:
    32d2:	66 1f       	adc	r22, r22
    32d4:	77 1f       	adc	r23, r23
    32d6:	88 1f       	adc	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	1a 94       	dec	r1
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <__udivmodsi4_loop>
    32de:	60 95       	com	r22
    32e0:	70 95       	com	r23
    32e2:	80 95       	com	r24
    32e4:	90 95       	com	r25
    32e6:	9b 01       	movw	r18, r22
    32e8:	ac 01       	movw	r20, r24
    32ea:	bd 01       	movw	r22, r26
    32ec:	cf 01       	movw	r24, r30
    32ee:	08 95       	ret

000032f0 <__prologue_saves__>:
    32f0:	2f 92       	push	r2
    32f2:	3f 92       	push	r3
    32f4:	4f 92       	push	r4
    32f6:	5f 92       	push	r5
    32f8:	6f 92       	push	r6
    32fa:	7f 92       	push	r7
    32fc:	8f 92       	push	r8
    32fe:	9f 92       	push	r9
    3300:	af 92       	push	r10
    3302:	bf 92       	push	r11
    3304:	cf 92       	push	r12
    3306:	df 92       	push	r13
    3308:	ef 92       	push	r14
    330a:	ff 92       	push	r15
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	ca 1b       	sub	r28, r26
    331a:	db 0b       	sbc	r29, r27
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	09 94       	ijmp

00003328 <__epilogue_restores__>:
    3328:	2a 88       	ldd	r2, Y+18	; 0x12
    332a:	39 88       	ldd	r3, Y+17	; 0x11
    332c:	48 88       	ldd	r4, Y+16	; 0x10
    332e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3330:	6e 84       	ldd	r6, Y+14	; 0x0e
    3332:	7d 84       	ldd	r7, Y+13	; 0x0d
    3334:	8c 84       	ldd	r8, Y+12	; 0x0c
    3336:	9b 84       	ldd	r9, Y+11	; 0x0b
    3338:	aa 84       	ldd	r10, Y+10	; 0x0a
    333a:	b9 84       	ldd	r11, Y+9	; 0x09
    333c:	c8 84       	ldd	r12, Y+8	; 0x08
    333e:	df 80       	ldd	r13, Y+7	; 0x07
    3340:	ee 80       	ldd	r14, Y+6	; 0x06
    3342:	fd 80       	ldd	r15, Y+5	; 0x05
    3344:	0c 81       	ldd	r16, Y+4	; 0x04
    3346:	1b 81       	ldd	r17, Y+3	; 0x03
    3348:	aa 81       	ldd	r26, Y+2	; 0x02
    334a:	b9 81       	ldd	r27, Y+1	; 0x01
    334c:	ce 0f       	add	r28, r30
    334e:	d1 1d       	adc	r29, r1
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	ed 01       	movw	r28, r26
    335c:	08 95       	ret

0000335e <itoa>:
    335e:	fb 01       	movw	r30, r22
    3360:	9f 01       	movw	r18, r30
    3362:	e8 94       	clt
    3364:	42 30       	cpi	r20, 0x02	; 2
    3366:	c4 f0       	brlt	.+48     	; 0x3398 <itoa+0x3a>
    3368:	45 32       	cpi	r20, 0x25	; 37
    336a:	b4 f4       	brge	.+44     	; 0x3398 <itoa+0x3a>
    336c:	4a 30       	cpi	r20, 0x0A	; 10
    336e:	29 f4       	brne	.+10     	; 0x337a <itoa+0x1c>
    3370:	97 fb       	bst	r25, 7
    3372:	1e f4       	brtc	.+6      	; 0x337a <itoa+0x1c>
    3374:	90 95       	com	r25
    3376:	81 95       	neg	r24
    3378:	9f 4f       	sbci	r25, 0xFF	; 255
    337a:	64 2f       	mov	r22, r20
    337c:	77 27       	eor	r23, r23
    337e:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__udivmodhi4>
    3382:	80 5d       	subi	r24, 0xD0	; 208
    3384:	8a 33       	cpi	r24, 0x3A	; 58
    3386:	0c f0       	brlt	.+2      	; 0x338a <itoa+0x2c>
    3388:	89 5d       	subi	r24, 0xD9	; 217
    338a:	81 93       	st	Z+, r24
    338c:	cb 01       	movw	r24, r22
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	a1 f7       	brne	.-24     	; 0x337a <itoa+0x1c>
    3392:	16 f4       	brtc	.+4      	; 0x3398 <itoa+0x3a>
    3394:	5d e2       	ldi	r21, 0x2D	; 45
    3396:	51 93       	st	Z+, r21
    3398:	10 82       	st	Z, r1
    339a:	c9 01       	movw	r24, r18
    339c:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <strrev>

000033a0 <strrev>:
    33a0:	dc 01       	movw	r26, r24
    33a2:	fc 01       	movw	r30, r24
    33a4:	67 2f       	mov	r22, r23
    33a6:	71 91       	ld	r23, Z+
    33a8:	77 23       	and	r23, r23
    33aa:	e1 f7       	brne	.-8      	; 0x33a4 <strrev+0x4>
    33ac:	32 97       	sbiw	r30, 0x02	; 2
    33ae:	04 c0       	rjmp	.+8      	; 0x33b8 <strrev+0x18>
    33b0:	7c 91       	ld	r23, X
    33b2:	6d 93       	st	X+, r22
    33b4:	70 83       	st	Z, r23
    33b6:	62 91       	ld	r22, -Z
    33b8:	ae 17       	cp	r26, r30
    33ba:	bf 07       	cpc	r27, r31
    33bc:	c8 f3       	brcs	.-14     	; 0x33b0 <strrev+0x10>
    33be:	08 95       	ret

000033c0 <__udivmodhi4>:
    33c0:	aa 1b       	sub	r26, r26
    33c2:	bb 1b       	sub	r27, r27
    33c4:	51 e1       	ldi	r21, 0x11	; 17
    33c6:	07 c0       	rjmp	.+14     	; 0x33d6 <__udivmodhi4_ep>

000033c8 <__udivmodhi4_loop>:
    33c8:	aa 1f       	adc	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	a6 17       	cp	r26, r22
    33ce:	b7 07       	cpc	r27, r23
    33d0:	10 f0       	brcs	.+4      	; 0x33d6 <__udivmodhi4_ep>
    33d2:	a6 1b       	sub	r26, r22
    33d4:	b7 0b       	sbc	r27, r23

000033d6 <__udivmodhi4_ep>:
    33d6:	88 1f       	adc	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	5a 95       	dec	r21
    33dc:	a9 f7       	brne	.-22     	; 0x33c8 <__udivmodhi4_loop>
    33de:	80 95       	com	r24
    33e0:	90 95       	com	r25
    33e2:	bc 01       	movw	r22, r24
    33e4:	cd 01       	movw	r24, r26
    33e6:	08 95       	ret

000033e8 <_exit>:
    33e8:	f8 94       	cli

000033ea <__stop_program>:
    33ea:	ff cf       	rjmp	.-2      	; 0x33ea <__stop_program>
