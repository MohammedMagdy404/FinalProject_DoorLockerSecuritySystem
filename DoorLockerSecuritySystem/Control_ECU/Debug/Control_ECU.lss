
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002d16  00002daa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800068  00800068  00002db2  2**0
                  ALLOC
  3 .stab         0000321c  00000000  00000000  00002db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001975  00000000  00000000  00005fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007945  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000983e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a729  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 38       	cpi	r26, 0x84	; 132
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e1       	ldi	r30, 0x16	; 22
      78:	fd e2       	ldi	r31, 0x2D	; 45
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 3e 12 	call	0x247c	; 0x247c <main>
      8a:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 * Setup the direction for the buzzer pin as output pin through the
 * GPIO driver.
 * Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	66 e0       	ldi	r22, 0x06	; 6
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Description:
 * Function to enable the Buzzer through the GPIO.
 */
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	66 e0       	ldi	r22, 0x06	; 6
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
	// _delay_ms(200);
	// GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Description:
 * Function to disable the Buzzer through the GPIO.
 */
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	66 e0       	ldi	r22, 0x06	; 6
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:
 * motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */

void DcMotor_Init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_setupPinDirection>

	/* Motor is stop at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:
 * Send the required duty cycle to the PWM driver based on the
   required speed value.
 */

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DcMotor_Rotate+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6a 83       	std	Y+2, r22	; 0x02
	switch (state)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	3c 83       	std	Y+4, r19	; 0x04
     be6:	2b 83       	std	Y+3, r18	; 0x03
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	91 05       	cpc	r25, r1
     bf0:	a1 f0       	breq	.+40     	; 0xc1a <DcMotor_Rotate+0x4c>
     bf2:	2b 81       	ldd	r18, Y+3	; 0x03
     bf4:	3c 81       	ldd	r19, Y+4	; 0x04
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	d1 f0       	breq	.+52     	; 0xc30 <DcMotor_Rotate+0x62>
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	01 f5       	brne	.+64     	; 0xc44 <DcMotor_Rotate+0x76>
	{
	case CW:
		/* Motor is rotate CLOCK wise*/
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_HIGH);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
     c18:	15 c0       	rjmp	.+42     	; 0xc44 <DcMotor_Rotate+0x76>
		break;
	case A_CW:
		/* Motor is rotate Anti-CLOCK wise*/
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_HIGH);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <DcMotor_Rotate+0x76>
		break;
	case stop:
		/* Motor is stop */
		GPIO_writePin(DC_MOTOR_PORT1_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>

	/*
	 * Send the required duty cycle to the PWM driver based on the
	   required speed value.
	 */
	PWM_Timer0_Start(speed);
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	0e 94 2c 06 	call	0xc58	; 0xc58 <PWM_Timer0_Start>
}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <PWM_Timer0_Start>:
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */

void PWM_Timer0_Start(uint8 duty_cycle)
{
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	0f 92       	push	r0
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial value
     c64:	e2 e5       	ldi	r30, 0x52	; 82
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	10 82       	st	Z, r1

	OCR0 = duty_cycle; // Set Compare Value
     c6a:	ec e5       	ldi	r30, 0x5C	; 92
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	80 83       	st	Z, r24

	DDRB = DDRB | (1 << PB3); // set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     c72:	a7 e3       	ldi	r26, 0x37	; 55
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e3       	ldi	r30, 0x37	; 55
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	88 60       	ori	r24, 0x08	; 8
     c7e:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     c80:	e3 e5       	ldi	r30, 0x53	; 83
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	8a e6       	ldi	r24, 0x6A	; 106
     c86:	80 83       	st	Z, r24
}
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../HAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <EEPROM_writeByte+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <EEPROM_writeByte+0x8>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit */
    TWI_start();
     ca2:	0e 94 92 10 	call	0x2124	; 0x2124 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     ca6:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     caa:	88 30       	cpi	r24, 0x08	; 8
     cac:	11 f0       	breq	.+4      	; 0xcb2 <EEPROM_writeByte+0x22>
        return ERROR;
     cae:	1c 82       	std	Y+4, r1	; 0x04
     cb0:	28 c0       	rjmp	.+80     	; 0xd02 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	80 70       	andi	r24, 0x00	; 0
     cb8:	97 70       	andi	r25, 0x07	; 7
     cba:	88 0f       	add	r24, r24
     cbc:	89 2f       	mov	r24, r25
     cbe:	88 1f       	adc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	91 95       	neg	r25
     cc4:	80 6a       	ori	r24, 0xA0	; 160
     cc6:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     cca:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     cce:	88 31       	cpi	r24, 0x18	; 24
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <EEPROM_writeByte+0x46>
        return ERROR;
     cd2:	1c 82       	std	Y+4, r1	; 0x04
     cd4:	16 c0       	rjmp	.+44     	; 0xd02 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cdc:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     ce0:	88 32       	cpi	r24, 0x28	; 40
     ce2:	11 f0       	breq	.+4      	; 0xce8 <EEPROM_writeByte+0x58>
        return ERROR;
     ce4:	1c 82       	std	Y+4, r1	; 0x04
     ce6:	0d c0       	rjmp	.+26     	; 0xd02 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cee:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     cf2:	88 32       	cpi	r24, 0x28	; 40
     cf4:	11 f0       	breq	.+4      	; 0xcfa <EEPROM_writeByte+0x6a>
        return ERROR;
     cf6:	1c 82       	std	Y+4, r1	; 0x04
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cfa:	0e 94 a2 10 	call	0x2144	; 0x2144 <TWI_stop>

    return SUCCESS;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 83       	std	Y+4, r24	; 0x04
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <EEPROM_readByte+0x6>
     d18:	00 d0       	rcall	.+0      	; 0xd1a <EEPROM_readByte+0x8>
     d1a:	0f 92       	push	r0
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	9a 83       	std	Y+2, r25	; 0x02
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	7c 83       	std	Y+4, r23	; 0x04
     d26:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit */
    TWI_start();
     d28:	0e 94 92 10 	call	0x2124	; 0x2124 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d2c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     d30:	88 30       	cpi	r24, 0x08	; 8
     d32:	11 f0       	breq	.+4      	; 0xd38 <EEPROM_readByte+0x26>
        return ERROR;
     d34:	1d 82       	std	Y+5, r1	; 0x05
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	80 70       	andi	r24, 0x00	; 0
     d3e:	97 70       	andi	r25, 0x07	; 7
     d40:	88 0f       	add	r24, r24
     d42:	89 2f       	mov	r24, r25
     d44:	88 1f       	adc	r24, r24
     d46:	99 0b       	sbc	r25, r25
     d48:	91 95       	neg	r25
     d4a:	80 6a       	ori	r24, 0xA0	; 160
     d4c:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d50:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     d54:	88 31       	cpi	r24, 0x18	; 24
     d56:	11 f0       	breq	.+4      	; 0xd5c <EEPROM_readByte+0x4a>
        return ERROR;
     d58:	1d 82       	std	Y+5, r1	; 0x05
     d5a:	32 c0       	rjmp	.+100    	; 0xdc0 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d62:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     d66:	88 32       	cpi	r24, 0x28	; 40
     d68:	11 f0       	breq	.+4      	; 0xd6e <EEPROM_readByte+0x5c>
        return ERROR;
     d6a:	1d 82       	std	Y+5, r1	; 0x05
     d6c:	29 c0       	rjmp	.+82     	; 0xdc0 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     d6e:	0e 94 92 10 	call	0x2124	; 0x2124 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d72:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     d76:	80 31       	cpi	r24, 0x10	; 16
     d78:	11 f0       	breq	.+4      	; 0xd7e <EEPROM_readByte+0x6c>
        return ERROR;
     d7a:	1d 82       	std	Y+5, r1	; 0x05
     d7c:	21 c0       	rjmp	.+66     	; 0xdc0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	80 70       	andi	r24, 0x00	; 0
     d84:	97 70       	andi	r25, 0x07	; 7
     d86:	88 0f       	add	r24, r24
     d88:	89 2f       	mov	r24, r25
     d8a:	88 1f       	adc	r24, r24
     d8c:	99 0b       	sbc	r25, r25
     d8e:	91 95       	neg	r25
     d90:	81 6a       	ori	r24, 0xA1	; 161
     d92:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d96:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     d9a:	80 34       	cpi	r24, 0x40	; 64
     d9c:	11 f0       	breq	.+4      	; 0xda2 <EEPROM_readByte+0x90>
        return ERROR;
     d9e:	1d 82       	std	Y+5, r1	; 0x05
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     da2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <TWI_readByteWithNACK>
     da6:	eb 81       	ldd	r30, Y+3	; 0x03
     da8:	fc 81       	ldd	r31, Y+4	; 0x04
     daa:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     dac:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_getStatus>
     db0:	88 35       	cpi	r24, 0x58	; 88
     db2:	11 f0       	breq	.+4      	; 0xdb8 <EEPROM_readByte+0xa6>
        return ERROR;
     db4:	1d 82       	std	Y+5, r1	; 0x05
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     db8:	0e 94 a2 10 	call	0x2144	; 0x2144 <TWI_stop>

    return SUCCESS;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	2e 97       	sbiw	r28, 0x0e	; 14
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	62 e0       	ldi	r22, 0x02	; 2
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	64 e0       	ldi	r22, 0x04	; 4
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_setupPinDirection>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a0 ea       	ldi	r26, 0xA0	; 160
     e00:	b1 e4       	ldi	r27, 0x41	; 65
     e02:	8b 87       	std	Y+11, r24	; 0x0b
     e04:	9c 87       	std	Y+12, r25	; 0x0c
     e06:	ad 87       	std	Y+13, r26	; 0x0d
     e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8f 83       	std	Y+7, r24	; 0x07
     e24:	98 87       	std	Y+8, r25	; 0x08
     e26:	a9 87       	std	Y+9, r26	; 0x09
     e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <LCD_init+0x7a>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <LCD_init+0xf8>
	else if (__tmp > 65535)
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	89 85       	ldd	r24, Y+9	; 0x09
     e52:	9a 85       	ldd	r25, Y+10	; 0x0a
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	6b 85       	ldd	r22, Y+11	; 0x0b
     e66:	7c 85       	ldd	r23, Y+12	; 0x0c
     e68:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <LCD_init+0xda>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <LCD_init+0xc8>
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <LCD_init+0xbc>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <LCD_init+0x104>
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	6f ef       	ldi	r22, 0xFF	; 255
     ee2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     ee6:	88 e3       	ldi	r24, 0x38	; 56
     ee8:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     eec:	8c e0       	ldi	r24, 0x0C	; 12
     eee:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_sendCommand>
}
     ef8:	2e 96       	adiw	r28, 0x0e	; 14
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	e9 97       	sbiw	r28, 0x39	; 57
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e8       	ldi	r26, 0x80	; 128
     f30:	bf e3       	ldi	r27, 0x3F	; 63
     f32:	8d ab       	std	Y+53, r24	; 0x35
     f34:	9e ab       	std	Y+54, r25	; 0x36
     f36:	af ab       	std	Y+55, r26	; 0x37
     f38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3a:	6d a9       	ldd	r22, Y+53	; 0x35
     f3c:	7e a9       	ldd	r23, Y+54	; 0x36
     f3e:	8f a9       	ldd	r24, Y+55	; 0x37
     f40:	98 ad       	ldd	r25, Y+56	; 0x38
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4a ef       	ldi	r20, 0xFA	; 250
     f48:	54 e4       	ldi	r21, 0x44	; 68
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	89 ab       	std	Y+49, r24	; 0x31
     f54:	9a ab       	std	Y+50, r25	; 0x32
     f56:	ab ab       	std	Y+51, r26	; 0x33
     f58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f5a:	69 a9       	ldd	r22, Y+49	; 0x31
     f5c:	7a a9       	ldd	r23, Y+50	; 0x32
     f5e:	8b a9       	ldd	r24, Y+51	; 0x33
     f60:	9c a9       	ldd	r25, Y+52	; 0x34
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	5f e3       	ldi	r21, 0x3F	; 63
     f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6e:	88 23       	and	r24, r24
     f70:	2c f4       	brge	.+10     	; 0xf7c <LCD_sendCommand+0x72>
		__ticks = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	98 ab       	std	Y+48, r25	; 0x30
     f78:	8f a7       	std	Y+47, r24	; 0x2f
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     f7c:	69 a9       	ldd	r22, Y+49	; 0x31
     f7e:	7a a9       	ldd	r23, Y+50	; 0x32
     f80:	8b a9       	ldd	r24, Y+51	; 0x33
     f82:	9c a9       	ldd	r25, Y+52	; 0x34
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	4f e7       	ldi	r20, 0x7F	; 127
     f8a:	57 e4       	ldi	r21, 0x47	; 71
     f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f90:	18 16       	cp	r1, r24
     f92:	4c f5       	brge	.+82     	; 0xfe6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	6d a9       	ldd	r22, Y+53	; 0x35
     f96:	7e a9       	ldd	r23, Y+54	; 0x36
     f98:	8f a9       	ldd	r24, Y+55	; 0x37
     f9a:	98 ad       	ldd	r25, Y+56	; 0x38
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	51 e4       	ldi	r21, 0x41	; 65
     fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	98 ab       	std	Y+48, r25	; 0x30
     fba:	8f a7       	std	Y+47, r24	; 0x2f
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <LCD_sendCommand+0xd2>
     fbe:	88 ec       	ldi	r24, 0xC8	; 200
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9e a7       	std	Y+46, r25	; 0x2e
     fc4:	8d a7       	std	Y+45, r24	; 0x2d
     fc6:	8d a5       	ldd	r24, Y+45	; 0x2d
     fc8:	9e a5       	ldd	r25, Y+46	; 0x2e
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <LCD_sendCommand+0xc0>
     fce:	9e a7       	std	Y+46, r25	; 0x2e
     fd0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd4:	98 a9       	ldd	r25, Y+48	; 0x30
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	98 ab       	std	Y+48, r25	; 0x30
     fda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	8f a5       	ldd	r24, Y+47	; 0x2f
     fde:	98 a9       	ldd	r25, Y+48	; 0x30
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	69 f7       	brne	.-38     	; 0xfbe <LCD_sendCommand+0xb4>
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe6:	69 a9       	ldd	r22, Y+49	; 0x31
     fe8:	7a a9       	ldd	r23, Y+50	; 0x32
     fea:	8b a9       	ldd	r24, Y+51	; 0x33
     fec:	9c a9       	ldd	r25, Y+52	; 0x34
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	98 ab       	std	Y+48, r25	; 0x30
     ff8:	8f a7       	std	Y+47, r24	; 0x2f
     ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffc:	98 a9       	ldd	r25, Y+48	; 0x30
     ffe:	9c a7       	std	Y+44, r25	; 0x2c
    1000:	8b a7       	std	Y+43, r24	; 0x2b
    1002:	8b a5       	ldd	r24, Y+43	; 0x2b
    1004:	9c a5       	ldd	r25, Y+44	; 0x2c
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <LCD_sendCommand+0xfc>
    100a:	9c a7       	std	Y+44, r25	; 0x2c
    100c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	64 e0       	ldi	r22, 0x04	; 4
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e8       	ldi	r26, 0x80	; 128
    101e:	bf e3       	ldi	r27, 0x3F	; 63
    1020:	8f a3       	std	Y+39, r24	; 0x27
    1022:	98 a7       	std	Y+40, r25	; 0x28
    1024:	a9 a7       	std	Y+41, r26	; 0x29
    1026:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1028:	6f a1       	ldd	r22, Y+39	; 0x27
    102a:	78 a5       	ldd	r23, Y+40	; 0x28
    102c:	89 a5       	ldd	r24, Y+41	; 0x29
    102e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	4a ef       	ldi	r20, 0xFA	; 250
    1036:	54 e4       	ldi	r21, 0x44	; 68
    1038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	8b a3       	std	Y+35, r24	; 0x23
    1042:	9c a3       	std	Y+36, r25	; 0x24
    1044:	ad a3       	std	Y+37, r26	; 0x25
    1046:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1048:	6b a1       	ldd	r22, Y+35	; 0x23
    104a:	7c a1       	ldd	r23, Y+36	; 0x24
    104c:	8d a1       	ldd	r24, Y+37	; 0x25
    104e:	9e a1       	ldd	r25, Y+38	; 0x26
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e8       	ldi	r20, 0x80	; 128
    1056:	5f e3       	ldi	r21, 0x3F	; 63
    1058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105c:	88 23       	and	r24, r24
    105e:	2c f4       	brge	.+10     	; 0x106a <LCD_sendCommand+0x160>
		__ticks = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9a a3       	std	Y+34, r25	; 0x22
    1066:	89 a3       	std	Y+33, r24	; 0x21
    1068:	3f c0       	rjmp	.+126    	; 0x10e8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    106a:	6b a1       	ldd	r22, Y+35	; 0x23
    106c:	7c a1       	ldd	r23, Y+36	; 0x24
    106e:	8d a1       	ldd	r24, Y+37	; 0x25
    1070:	9e a1       	ldd	r25, Y+38	; 0x26
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	3f ef       	ldi	r19, 0xFF	; 255
    1076:	4f e7       	ldi	r20, 0x7F	; 127
    1078:	57 e4       	ldi	r21, 0x47	; 71
    107a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107e:	18 16       	cp	r1, r24
    1080:	4c f5       	brge	.+82     	; 0x10d4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1082:	6f a1       	ldd	r22, Y+39	; 0x27
    1084:	78 a5       	ldd	r23, Y+40	; 0x28
    1086:	89 a5       	ldd	r24, Y+41	; 0x29
    1088:	9a a5       	ldd	r25, Y+42	; 0x2a
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e2       	ldi	r20, 0x20	; 32
    1090:	51 e4       	ldi	r21, 0x41	; 65
    1092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9a a3       	std	Y+34, r25	; 0x22
    10a8:	89 a3       	std	Y+33, r24	; 0x21
    10aa:	0f c0       	rjmp	.+30     	; 0x10ca <LCD_sendCommand+0x1c0>
    10ac:	88 ec       	ldi	r24, 0xC8	; 200
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	98 a3       	std	Y+32, r25	; 0x20
    10b2:	8f 8f       	std	Y+31, r24	; 0x1f
    10b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10b6:	98 a1       	ldd	r25, Y+32	; 0x20
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <LCD_sendCommand+0x1ae>
    10bc:	98 a3       	std	Y+32, r25	; 0x20
    10be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	89 a1       	ldd	r24, Y+33	; 0x21
    10c2:	9a a1       	ldd	r25, Y+34	; 0x22
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	9a a3       	std	Y+34, r25	; 0x22
    10c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ca:	89 a1       	ldd	r24, Y+33	; 0x21
    10cc:	9a a1       	ldd	r25, Y+34	; 0x22
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	69 f7       	brne	.-38     	; 0x10ac <LCD_sendCommand+0x1a2>
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d4:	6b a1       	ldd	r22, Y+35	; 0x23
    10d6:	7c a1       	ldd	r23, Y+36	; 0x24
    10d8:	8d a1       	ldd	r24, Y+37	; 0x25
    10da:	9e a1       	ldd	r25, Y+38	; 0x26
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9a a3       	std	Y+34, r25	; 0x22
    10e6:	89 a3       	std	Y+33, r24	; 0x21
    10e8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ea:	9a a1       	ldd	r25, Y+34	; 0x22
    10ec:	9e 8f       	std	Y+30, r25	; 0x1e
    10ee:	8d 8f       	std	Y+29, r24	; 0x1d
    10f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <LCD_sendCommand+0x1ea>
    10f8:	9e 8f       	std	Y+30, r25	; 0x1e
    10fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	69 ad       	ldd	r22, Y+57	; 0x39
    1100:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <GPIO_writePort>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a0 e8       	ldi	r26, 0x80	; 128
    110a:	bf e3       	ldi	r27, 0x3F	; 63
    110c:	89 8f       	std	Y+25, r24	; 0x19
    110e:	9a 8f       	std	Y+26, r25	; 0x1a
    1110:	ab 8f       	std	Y+27, r26	; 0x1b
    1112:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1114:	69 8d       	ldd	r22, Y+25	; 0x19
    1116:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1118:	8b 8d       	ldd	r24, Y+27	; 0x1b
    111a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	4a ef       	ldi	r20, 0xFA	; 250
    1122:	54 e4       	ldi	r21, 0x44	; 68
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	8d 8b       	std	Y+21, r24	; 0x15
    112e:	9e 8b       	std	Y+22, r25	; 0x16
    1130:	af 8b       	std	Y+23, r26	; 0x17
    1132:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1134:	6d 89       	ldd	r22, Y+21	; 0x15
    1136:	7e 89       	ldd	r23, Y+22	; 0x16
    1138:	8f 89       	ldd	r24, Y+23	; 0x17
    113a:	98 8d       	ldd	r25, Y+24	; 0x18
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	5f e3       	ldi	r21, 0x3F	; 63
    1144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1148:	88 23       	and	r24, r24
    114a:	2c f4       	brge	.+10     	; 0x1156 <LCD_sendCommand+0x24c>
		__ticks = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9c 8b       	std	Y+20, r25	; 0x14
    1152:	8b 8b       	std	Y+19, r24	; 0x13
    1154:	3f c0       	rjmp	.+126    	; 0x11d4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1156:	6d 89       	ldd	r22, Y+21	; 0x15
    1158:	7e 89       	ldd	r23, Y+22	; 0x16
    115a:	8f 89       	ldd	r24, Y+23	; 0x17
    115c:	98 8d       	ldd	r25, Y+24	; 0x18
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	3f ef       	ldi	r19, 0xFF	; 255
    1162:	4f e7       	ldi	r20, 0x7F	; 127
    1164:	57 e4       	ldi	r21, 0x47	; 71
    1166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116a:	18 16       	cp	r1, r24
    116c:	4c f5       	brge	.+82     	; 0x11c0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116e:	69 8d       	ldd	r22, Y+25	; 0x19
    1170:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9c 8b       	std	Y+20, r25	; 0x14
    1194:	8b 8b       	std	Y+19, r24	; 0x13
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <LCD_sendCommand+0x2ac>
    1198:	88 ec       	ldi	r24, 0xC8	; 200
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9a 8b       	std	Y+18, r25	; 0x12
    119e:	89 8b       	std	Y+17, r24	; 0x11
    11a0:	89 89       	ldd	r24, Y+17	; 0x11
    11a2:	9a 89       	ldd	r25, Y+18	; 0x12
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <LCD_sendCommand+0x29a>
    11a8:	9a 8b       	std	Y+18, r25	; 0x12
    11aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ac:	8b 89       	ldd	r24, Y+19	; 0x13
    11ae:	9c 89       	ldd	r25, Y+20	; 0x14
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	9c 8b       	std	Y+20, r25	; 0x14
    11b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b6:	8b 89       	ldd	r24, Y+19	; 0x13
    11b8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	69 f7       	brne	.-38     	; 0x1198 <LCD_sendCommand+0x28e>
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c0:	6d 89       	ldd	r22, Y+21	; 0x15
    11c2:	7e 89       	ldd	r23, Y+22	; 0x16
    11c4:	8f 89       	ldd	r24, Y+23	; 0x17
    11c6:	98 8d       	ldd	r25, Y+24	; 0x18
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	9c 8b       	std	Y+20, r25	; 0x14
    11d2:	8b 8b       	std	Y+19, r24	; 0x13
    11d4:	8b 89       	ldd	r24, Y+19	; 0x13
    11d6:	9c 89       	ldd	r25, Y+20	; 0x14
    11d8:	98 8b       	std	Y+16, r25	; 0x10
    11da:	8f 87       	std	Y+15, r24	; 0x0f
    11dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11de:	98 89       	ldd	r25, Y+16	; 0x10
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <LCD_sendCommand+0x2d6>
    11e4:	98 8b       	std	Y+16, r25	; 0x10
    11e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	64 e0       	ldi	r22, 0x04	; 4
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 e8       	ldi	r26, 0x80	; 128
    11f8:	bf e3       	ldi	r27, 0x3F	; 63
    11fa:	8b 87       	std	Y+11, r24	; 0x0b
    11fc:	9c 87       	std	Y+12, r25	; 0x0c
    11fe:	ad 87       	std	Y+13, r26	; 0x0d
    1200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1202:	6b 85       	ldd	r22, Y+11	; 0x0b
    1204:	7c 85       	ldd	r23, Y+12	; 0x0c
    1206:	8d 85       	ldd	r24, Y+13	; 0x0d
    1208:	9e 85       	ldd	r25, Y+14	; 0x0e
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a ef       	ldi	r20, 0xFA	; 250
    1210:	54 e4       	ldi	r21, 0x44	; 68
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	8f 83       	std	Y+7, r24	; 0x07
    121c:	98 87       	std	Y+8, r25	; 0x08
    121e:	a9 87       	std	Y+9, r26	; 0x09
    1220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1222:	6f 81       	ldd	r22, Y+7	; 0x07
    1224:	78 85       	ldd	r23, Y+8	; 0x08
    1226:	89 85       	ldd	r24, Y+9	; 0x09
    1228:	9a 85       	ldd	r25, Y+10	; 0x0a
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	5f e3       	ldi	r21, 0x3F	; 63
    1232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1236:	88 23       	and	r24, r24
    1238:	2c f4       	brge	.+10     	; 0x1244 <LCD_sendCommand+0x33a>
		__ticks = 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
    1242:	3f c0       	rjmp	.+126    	; 0x12c2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1244:	6f 81       	ldd	r22, Y+7	; 0x07
    1246:	78 85       	ldd	r23, Y+8	; 0x08
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	9a 85       	ldd	r25, Y+10	; 0x0a
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	3f ef       	ldi	r19, 0xFF	; 255
    1250:	4f e7       	ldi	r20, 0x7F	; 127
    1252:	57 e4       	ldi	r21, 0x47	; 71
    1254:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1258:	18 16       	cp	r1, r24
    125a:	4c f5       	brge	.+82     	; 0x12ae <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125c:	6b 85       	ldd	r22, Y+11	; 0x0b
    125e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1260:	8d 85       	ldd	r24, Y+13	; 0x0d
    1262:	9e 85       	ldd	r25, Y+14	; 0x0e
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <LCD_sendCommand+0x39a>
    1286:	88 ec       	ldi	r24, 0xC8	; 200
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <LCD_sendCommand+0x388>
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <LCD_sendCommand+0x37c>
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <LCD_sendCommand+0x3c4>
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    12d6:	e9 96       	adiw	r28, 0x39	; 57
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	e9 97       	sbiw	r28, 0x39	; 57
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e8       	ldi	r26, 0x80	; 128
    130e:	bf e3       	ldi	r27, 0x3F	; 63
    1310:	8d ab       	std	Y+53, r24	; 0x35
    1312:	9e ab       	std	Y+54, r25	; 0x36
    1314:	af ab       	std	Y+55, r26	; 0x37
    1316:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	6d a9       	ldd	r22, Y+53	; 0x35
    131a:	7e a9       	ldd	r23, Y+54	; 0x36
    131c:	8f a9       	ldd	r24, Y+55	; 0x37
    131e:	98 ad       	ldd	r25, Y+56	; 0x38
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4a ef       	ldi	r20, 0xFA	; 250
    1326:	54 e4       	ldi	r21, 0x44	; 68
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	89 ab       	std	Y+49, r24	; 0x31
    1332:	9a ab       	std	Y+50, r25	; 0x32
    1334:	ab ab       	std	Y+51, r26	; 0x33
    1336:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1338:	69 a9       	ldd	r22, Y+49	; 0x31
    133a:	7a a9       	ldd	r23, Y+50	; 0x32
    133c:	8b a9       	ldd	r24, Y+51	; 0x33
    133e:	9c a9       	ldd	r25, Y+52	; 0x34
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e8       	ldi	r20, 0x80	; 128
    1346:	5f e3       	ldi	r21, 0x3F	; 63
    1348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    134c:	88 23       	and	r24, r24
    134e:	2c f4       	brge	.+10     	; 0x135a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	98 ab       	std	Y+48, r25	; 0x30
    1356:	8f a7       	std	Y+47, r24	; 0x2f
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    135a:	69 a9       	ldd	r22, Y+49	; 0x31
    135c:	7a a9       	ldd	r23, Y+50	; 0x32
    135e:	8b a9       	ldd	r24, Y+51	; 0x33
    1360:	9c a9       	ldd	r25, Y+52	; 0x34
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    136e:	18 16       	cp	r1, r24
    1370:	4c f5       	brge	.+82     	; 0x13c4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1372:	6d a9       	ldd	r22, Y+53	; 0x35
    1374:	7e a9       	ldd	r23, Y+54	; 0x36
    1376:	8f a9       	ldd	r24, Y+55	; 0x37
    1378:	98 ad       	ldd	r25, Y+56	; 0x38
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e2       	ldi	r20, 0x20	; 32
    1380:	51 e4       	ldi	r21, 0x41	; 65
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	98 ab       	std	Y+48, r25	; 0x30
    1398:	8f a7       	std	Y+47, r24	; 0x2f
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <LCD_displayCharacter+0xd2>
    139c:	88 ec       	ldi	r24, 0xC8	; 200
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9e a7       	std	Y+46, r25	; 0x2e
    13a2:	8d a7       	std	Y+45, r24	; 0x2d
    13a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <LCD_displayCharacter+0xc0>
    13ac:	9e a7       	std	Y+46, r25	; 0x2e
    13ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b2:	98 a9       	ldd	r25, Y+48	; 0x30
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	98 ab       	std	Y+48, r25	; 0x30
    13b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    13bc:	98 a9       	ldd	r25, Y+48	; 0x30
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	69 f7       	brne	.-38     	; 0x139c <LCD_displayCharacter+0xb4>
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	69 a9       	ldd	r22, Y+49	; 0x31
    13c6:	7a a9       	ldd	r23, Y+50	; 0x32
    13c8:	8b a9       	ldd	r24, Y+51	; 0x33
    13ca:	9c a9       	ldd	r25, Y+52	; 0x34
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	98 ab       	std	Y+48, r25	; 0x30
    13d6:	8f a7       	std	Y+47, r24	; 0x2f
    13d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13da:	98 a9       	ldd	r25, Y+48	; 0x30
    13dc:	9c a7       	std	Y+44, r25	; 0x2c
    13de:	8b a7       	std	Y+43, r24	; 0x2b
    13e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_displayCharacter+0xfc>
    13e8:	9c a7       	std	Y+44, r25	; 0x2c
    13ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	64 e0       	ldi	r22, 0x04	; 4
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e8       	ldi	r26, 0x80	; 128
    13fc:	bf e3       	ldi	r27, 0x3F	; 63
    13fe:	8f a3       	std	Y+39, r24	; 0x27
    1400:	98 a7       	std	Y+40, r25	; 0x28
    1402:	a9 a7       	std	Y+41, r26	; 0x29
    1404:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1406:	6f a1       	ldd	r22, Y+39	; 0x27
    1408:	78 a5       	ldd	r23, Y+40	; 0x28
    140a:	89 a5       	ldd	r24, Y+41	; 0x29
    140c:	9a a5       	ldd	r25, Y+42	; 0x2a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	4a ef       	ldi	r20, 0xFA	; 250
    1414:	54 e4       	ldi	r21, 0x44	; 68
    1416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	8b a3       	std	Y+35, r24	; 0x23
    1420:	9c a3       	std	Y+36, r25	; 0x24
    1422:	ad a3       	std	Y+37, r26	; 0x25
    1424:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1426:	6b a1       	ldd	r22, Y+35	; 0x23
    1428:	7c a1       	ldd	r23, Y+36	; 0x24
    142a:	8d a1       	ldd	r24, Y+37	; 0x25
    142c:	9e a1       	ldd	r25, Y+38	; 0x26
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143a:	88 23       	and	r24, r24
    143c:	2c f4       	brge	.+10     	; 0x1448 <LCD_displayCharacter+0x160>
		__ticks = 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9a a3       	std	Y+34, r25	; 0x22
    1444:	89 a3       	std	Y+33, r24	; 0x21
    1446:	3f c0       	rjmp	.+126    	; 0x14c6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1448:	6b a1       	ldd	r22, Y+35	; 0x23
    144a:	7c a1       	ldd	r23, Y+36	; 0x24
    144c:	8d a1       	ldd	r24, Y+37	; 0x25
    144e:	9e a1       	ldd	r25, Y+38	; 0x26
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	3f ef       	ldi	r19, 0xFF	; 255
    1454:	4f e7       	ldi	r20, 0x7F	; 127
    1456:	57 e4       	ldi	r21, 0x47	; 71
    1458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145c:	18 16       	cp	r1, r24
    145e:	4c f5       	brge	.+82     	; 0x14b2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1460:	6f a1       	ldd	r22, Y+39	; 0x27
    1462:	78 a5       	ldd	r23, Y+40	; 0x28
    1464:	89 a5       	ldd	r24, Y+41	; 0x29
    1466:	9a a5       	ldd	r25, Y+42	; 0x2a
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	51 e4       	ldi	r21, 0x41	; 65
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9a a3       	std	Y+34, r25	; 0x22
    1486:	89 a3       	std	Y+33, r24	; 0x21
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <LCD_displayCharacter+0x1c0>
    148a:	88 ec       	ldi	r24, 0xC8	; 200
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	98 a3       	std	Y+32, r25	; 0x20
    1490:	8f 8f       	std	Y+31, r24	; 0x1f
    1492:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1494:	98 a1       	ldd	r25, Y+32	; 0x20
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <LCD_displayCharacter+0x1ae>
    149a:	98 a3       	std	Y+32, r25	; 0x20
    149c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	89 a1       	ldd	r24, Y+33	; 0x21
    14a0:	9a a1       	ldd	r25, Y+34	; 0x22
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	9a a3       	std	Y+34, r25	; 0x22
    14a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a8:	89 a1       	ldd	r24, Y+33	; 0x21
    14aa:	9a a1       	ldd	r25, Y+34	; 0x22
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	69 f7       	brne	.-38     	; 0x148a <LCD_displayCharacter+0x1a2>
    14b0:	14 c0       	rjmp	.+40     	; 0x14da <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b2:	6b a1       	ldd	r22, Y+35	; 0x23
    14b4:	7c a1       	ldd	r23, Y+36	; 0x24
    14b6:	8d a1       	ldd	r24, Y+37	; 0x25
    14b8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9a a3       	std	Y+34, r25	; 0x22
    14c4:	89 a3       	std	Y+33, r24	; 0x21
    14c6:	89 a1       	ldd	r24, Y+33	; 0x21
    14c8:	9a a1       	ldd	r25, Y+34	; 0x22
    14ca:	9e 8f       	std	Y+30, r25	; 0x1e
    14cc:	8d 8f       	std	Y+29, r24	; 0x1d
    14ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <LCD_displayCharacter+0x1ea>
    14d6:	9e 8f       	std	Y+30, r25	; 0x1e
    14d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	69 ad       	ldd	r22, Y+57	; 0x39
    14de:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <GPIO_writePort>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a0 e8       	ldi	r26, 0x80	; 128
    14e8:	bf e3       	ldi	r27, 0x3F	; 63
    14ea:	89 8f       	std	Y+25, r24	; 0x19
    14ec:	9a 8f       	std	Y+26, r25	; 0x1a
    14ee:	ab 8f       	std	Y+27, r26	; 0x1b
    14f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f2:	69 8d       	ldd	r22, Y+25	; 0x19
    14f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a ef       	ldi	r20, 0xFA	; 250
    1500:	54 e4       	ldi	r21, 0x44	; 68
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8d 8b       	std	Y+21, r24	; 0x15
    150c:	9e 8b       	std	Y+22, r25	; 0x16
    150e:	af 8b       	std	Y+23, r26	; 0x17
    1510:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1512:	6d 89       	ldd	r22, Y+21	; 0x15
    1514:	7e 89       	ldd	r23, Y+22	; 0x16
    1516:	8f 89       	ldd	r24, Y+23	; 0x17
    1518:	98 8d       	ldd	r25, Y+24	; 0x18
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	2c f4       	brge	.+10     	; 0x1534 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 8b       	std	Y+20, r25	; 0x14
    1530:	8b 8b       	std	Y+19, r24	; 0x13
    1532:	3f c0       	rjmp	.+126    	; 0x15b2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1534:	6d 89       	ldd	r22, Y+21	; 0x15
    1536:	7e 89       	ldd	r23, Y+22	; 0x16
    1538:	8f 89       	ldd	r24, Y+23	; 0x17
    153a:	98 8d       	ldd	r25, Y+24	; 0x18
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	4c f5       	brge	.+82     	; 0x159e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	69 8d       	ldd	r22, Y+25	; 0x19
    154e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9c 8b       	std	Y+20, r25	; 0x14
    1572:	8b 8b       	std	Y+19, r24	; 0x13
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <LCD_displayCharacter+0x2ac>
    1576:	88 ec       	ldi	r24, 0xC8	; 200
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9a 8b       	std	Y+18, r25	; 0x12
    157c:	89 8b       	std	Y+17, r24	; 0x11
    157e:	89 89       	ldd	r24, Y+17	; 0x11
    1580:	9a 89       	ldd	r25, Y+18	; 0x12
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <LCD_displayCharacter+0x29a>
    1586:	9a 8b       	std	Y+18, r25	; 0x12
    1588:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158a:	8b 89       	ldd	r24, Y+19	; 0x13
    158c:	9c 89       	ldd	r25, Y+20	; 0x14
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9c 8b       	std	Y+20, r25	; 0x14
    1592:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1594:	8b 89       	ldd	r24, Y+19	; 0x13
    1596:	9c 89       	ldd	r25, Y+20	; 0x14
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f7       	brne	.-38     	; 0x1576 <LCD_displayCharacter+0x28e>
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159e:	6d 89       	ldd	r22, Y+21	; 0x15
    15a0:	7e 89       	ldd	r23, Y+22	; 0x16
    15a2:	8f 89       	ldd	r24, Y+23	; 0x17
    15a4:	98 8d       	ldd	r25, Y+24	; 0x18
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9c 8b       	std	Y+20, r25	; 0x14
    15b0:	8b 8b       	std	Y+19, r24	; 0x13
    15b2:	8b 89       	ldd	r24, Y+19	; 0x13
    15b4:	9c 89       	ldd	r25, Y+20	; 0x14
    15b6:	98 8b       	std	Y+16, r25	; 0x10
    15b8:	8f 87       	std	Y+15, r24	; 0x0f
    15ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    15bc:	98 89       	ldd	r25, Y+16	; 0x10
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <LCD_displayCharacter+0x2d6>
    15c2:	98 8b       	std	Y+16, r25	; 0x10
    15c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	64 e0       	ldi	r22, 0x04	; 4
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <GPIO_writePin>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e8       	ldi	r26, 0x80	; 128
    15d6:	bf e3       	ldi	r27, 0x3F	; 63
    15d8:	8b 87       	std	Y+11, r24	; 0x0b
    15da:	9c 87       	std	Y+12, r25	; 0x0c
    15dc:	ad 87       	std	Y+13, r26	; 0x0d
    15de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	4a ef       	ldi	r20, 0xFA	; 250
    15ee:	54 e4       	ldi	r21, 0x44	; 68
    15f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8f 83       	std	Y+7, r24	; 0x07
    15fa:	98 87       	std	Y+8, r25	; 0x08
    15fc:	a9 87       	std	Y+9, r26	; 0x09
    15fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f e3       	ldi	r21, 0x3F	; 63
    1610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1614:	88 23       	and	r24, r24
    1616:	2c f4       	brge	.+10     	; 0x1622 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	4c f5       	brge	.+82     	; 0x168c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163a:	6b 85       	ldd	r22, Y+11	; 0x0b
    163c:	7c 85       	ldd	r23, Y+12	; 0x0c
    163e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1640:	9e 85       	ldd	r25, Y+14	; 0x0e
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <LCD_displayCharacter+0x39a>
    1664:	88 ec       	ldi	r24, 0xC8	; 200
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_displayCharacter+0x388>
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	69 f7       	brne	.-38     	; 0x1664 <LCD_displayCharacter+0x37c>
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <LCD_displayCharacter+0x3c4>
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    16b4:	e9 96       	adiw	r28, 0x39	; 57
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <LCD_displayString+0x6>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	9b 83       	std	Y+3, r25	; 0x03
    16d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	0e c0       	rjmp	.+28     	; 0x16f6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	fc 01       	movw	r30, r24
    16e6:	e2 0f       	add	r30, r18
    16e8:	f3 1f       	adc	r31, r19
    16ea:	80 81       	ld	r24, Z
    16ec:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_displayCharacter>
		i++;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	fc 01       	movw	r30, r24
    1702:	e2 0f       	add	r30, r18
    1704:	f3 1f       	adc	r31, r19
    1706:	80 81       	ld	r24, Z
    1708:	88 23       	and	r24, r24
    170a:	39 f7       	brne	.-50     	; 0x16da <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <LCD_moveCursor+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <LCD_moveCursor+0x8>
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	3d 83       	std	Y+5, r19	; 0x05
    1732:	2c 83       	std	Y+4, r18	; 0x04
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	c1 f0       	breq	.+48     	; 0x176e <LCD_moveCursor+0x56>
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	2c f4       	brge	.+10     	; 0x1752 <LCD_moveCursor+0x3a>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	61 f0       	breq	.+24     	; 0x1768 <LCD_moveCursor+0x50>
    1750:	19 c0       	rjmp	.+50     	; 0x1784 <LCD_moveCursor+0x6c>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	69 f0       	breq	.+26     	; 0x1776 <LCD_moveCursor+0x5e>
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	9d 81       	ldd	r25, Y+5	; 0x05
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	61 f0       	breq	.+24     	; 0x177e <LCD_moveCursor+0x66>
    1766:	0e c0       	rjmp	.+28     	; 0x1784 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	80 5c       	subi	r24, 0xC0	; 192
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	80 5f       	subi	r24, 0xF0	; 240
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	80 5b       	subi	r24, 0xB0	; 176
    1782:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	80 68       	ori	r24, 0x80	; 128
    1788:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_sendCommand>
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <LCD_displayStringRowColumn+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <LCD_displayStringRowColumn+0x8>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	6a 83       	std	Y+2, r22	; 0x02
    17ac:	5c 83       	std	Y+4, r21	; 0x04
    17ae:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	6a 81       	ldd	r22, Y+2	; 0x02
    17b4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_displayString>
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	62 97       	sbiw	r28, 0x12	; 18
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	9a 8b       	std	Y+18, r25	; 0x12
    17e4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    17e6:	89 89       	ldd	r24, Y+17	; 0x11
    17e8:	9a 89       	ldd	r25, Y+18	; 0x12
    17ea:	9e 01       	movw	r18, r28
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	b9 01       	movw	r22, r18
    17f2:	4a e0       	ldi	r20, 0x0A	; 10
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	0e 94 44 16 	call	0x2c88	; 0x2c88 <itoa>
	LCD_displayString(buff); /* Display the string */
    17fa:	ce 01       	movw	r24, r28
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_displayString>
}
    1802:	62 96       	adiw	r28, 0x12	; 18
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_sendCommand>
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <LCD_shiftScreenRight>:
/*
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenRight(uint8 numOfChars)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <LCD_shiftScreenRight+0x6>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	03 c0       	rjmp	.+6      	; 0x183c <LCD_shiftScreenRight+0x14>
	while(numOfChars--)
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT); /* Send clear display command */
    1836:	8c e1       	ldi	r24, 0x1C	; 28
    1838:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_sendCommand>
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenRight(uint8 numOfChars)
{
	while(numOfChars--)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	88 23       	and	r24, r24
    1844:	11 f0       	breq	.+4      	; 0x184a <LCD_shiftScreenRight+0x22>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	8a 83       	std	Y+2, r24	; 0x02
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	99 81       	ldd	r25, Y+1	; 0x01
    184e:	91 50       	subi	r25, 0x01	; 1
    1850:	99 83       	std	Y+1, r25	; 0x01
    1852:	88 23       	and	r24, r24
    1854:	81 f7       	brne	.-32     	; 0x1836 <LCD_shiftScreenRight+0xe>
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT); /* Send clear display command */
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <LCD_shiftScreenLeft>:
/*
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenLeft(uint8 numOfChars)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <LCD_shiftScreenLeft+0x6>
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <LCD_shiftScreenLeft+0x14>
	while(numOfChars--)
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT); /* Send clear display command */
    186e:	88 e1       	ldi	r24, 0x18	; 24
    1870:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_sendCommand>
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenLeft(uint8 numOfChars)
{
	while(numOfChars--)
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	88 23       	and	r24, r24
    187c:	11 f0       	breq	.+4      	; 0x1882 <LCD_shiftScreenLeft+0x22>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	99 81       	ldd	r25, Y+1	; 0x01
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	99 83       	std	Y+1, r25	; 0x01
    188a:	88 23       	and	r24, r24
    188c:	81 f7       	brne	.-32     	; 0x186e <LCD_shiftScreenLeft+0xe>
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT); /* Send clear display command */
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <GPIO_setupPinDirection+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <GPIO_setupPinDirection+0x8>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	6a 83       	std	Y+2, r22	; 0x02
    18aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	88 30       	cpi	r24, 0x08	; 8
    18b0:	08 f0       	brcs	.+2      	; 0x18b4 <GPIO_setupPinDirection+0x1c>
    18b2:	d5 c0       	rjmp	.+426    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <GPIO_setupPinDirection+0x24>
    18ba:	d1 c0       	rjmp	.+418    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3d 83       	std	Y+5, r19	; 0x05
    18c4:	2c 83       	std	Y+4, r18	; 0x04
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <GPIO_setupPinDirection+0x3a>
    18d0:	43 c0       	rjmp	.+134    	; 0x1958 <GPIO_setupPinDirection+0xc0>
    18d2:	2c 81       	ldd	r18, Y+4	; 0x04
    18d4:	3d 81       	ldd	r19, Y+5	; 0x05
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	2c f4       	brge	.+10     	; 0x18e6 <GPIO_setupPinDirection+0x4e>
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	71 f0       	breq	.+28     	; 0x1900 <GPIO_setupPinDirection+0x68>
    18e4:	bc c0       	rjmp	.+376    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
    18e6:	2c 81       	ldd	r18, Y+4	; 0x04
    18e8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <GPIO_setupPinDirection+0x5a>
    18f0:	5f c0       	rjmp	.+190    	; 0x19b0 <GPIO_setupPinDirection+0x118>
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	83 30       	cpi	r24, 0x03	; 3
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <GPIO_setupPinDirection+0x66>
    18fc:	85 c0       	rjmp	.+266    	; 0x1a08 <GPIO_setupPinDirection+0x170>
    18fe:	af c0       	rjmp	.+350    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	a1 f4       	brne	.+40     	; 0x192e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1906:	aa e3       	ldi	r26, 0x3A	; 58
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ea e3       	ldi	r30, 0x3A	; 58
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_setupPinDirection+0x8c>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_setupPinDirection+0x88>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	98 c0       	rjmp	.+304    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    192e:	aa e3       	ldi	r26, 0x3A	; 58
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	ea e3       	ldi	r30, 0x3A	; 58
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <GPIO_setupPinDirection+0xb4>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <GPIO_setupPinDirection+0xb0>
    1950:	80 95       	com	r24
    1952:	84 23       	and	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	83 c0       	rjmp	.+262    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	a1 f4       	brne	.+40     	; 0x1986 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    195e:	a7 e3       	ldi	r26, 0x37	; 55
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e7 e3       	ldi	r30, 0x37	; 55
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <GPIO_setupPinDirection+0xe4>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <GPIO_setupPinDirection+0xe0>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	6c c0       	rjmp	.+216    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1986:	a7 e3       	ldi	r26, 0x37	; 55
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e7 e3       	ldi	r30, 0x37	; 55
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <GPIO_setupPinDirection+0x10c>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <GPIO_setupPinDirection+0x108>
    19a8:	80 95       	com	r24
    19aa:	84 23       	and	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	57 c0       	rjmp	.+174    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	a1 f4       	brne	.+40     	; 0x19de <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19b6:	a4 e3       	ldi	r26, 0x34	; 52
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e4 e3       	ldi	r30, 0x34	; 52
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <GPIO_setupPinDirection+0x13c>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <GPIO_setupPinDirection+0x138>
    19d8:	84 2b       	or	r24, r20
    19da:	8c 93       	st	X, r24
    19dc:	40 c0       	rjmp	.+128    	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19de:	a4 e3       	ldi	r26, 0x34	; 52
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e4 e3       	ldi	r30, 0x34	; 52
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 2e       	mov	r0, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <GPIO_setupPinDirection+0x164>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <GPIO_setupPinDirection+0x160>
    1a00:	80 95       	com	r24
    1a02:	84 23       	and	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	2b c0       	rjmp	.+86     	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	a1 f4       	brne	.+40     	; 0x1a36 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a0e:	a1 e3       	ldi	r26, 0x31	; 49
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e1 e3       	ldi	r30, 0x31	; 49
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <GPIO_setupPinDirection+0x194>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <GPIO_setupPinDirection+0x190>
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a36:	a1 e3       	ldi	r26, 0x31	; 49
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e1 e3       	ldi	r30, 0x31	; 49
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <GPIO_setupPinDirection+0x1bc>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <GPIO_setupPinDirection+0x1b8>
    1a58:	80 95       	com	r24
    1a5a:	84 23       	and	r24, r20
    1a5c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <GPIO_writePin+0x6>
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <GPIO_writePin+0x8>
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	6a 83       	std	Y+2, r22	; 0x02
    1a80:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	88 30       	cpi	r24, 0x08	; 8
    1a86:	08 f0       	brcs	.+2      	; 0x1a8a <GPIO_writePin+0x1c>
    1a88:	d5 c0       	rjmp	.+426    	; 0x1c34 <GPIO_writePin+0x1c6>
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <GPIO_writePin+0x24>
    1a90:	d1 c0       	rjmp	.+418    	; 0x1c34 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	3d 83       	std	Y+5, r19	; 0x05
    1a9a:	2c 83       	std	Y+4, r18	; 0x04
    1a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <GPIO_writePin+0x3a>
    1aa6:	43 c0       	rjmp	.+134    	; 0x1b2e <GPIO_writePin+0xc0>
    1aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <GPIO_writePin+0x4e>
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <GPIO_writePin+0x68>
    1aba:	bc c0       	rjmp	.+376    	; 0x1c34 <GPIO_writePin+0x1c6>
    1abc:	2c 81       	ldd	r18, Y+4	; 0x04
    1abe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac0:	22 30       	cpi	r18, 0x02	; 2
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <GPIO_writePin+0x5a>
    1ac6:	5f c0       	rjmp	.+190    	; 0x1b86 <GPIO_writePin+0x118>
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <GPIO_writePin+0x66>
    1ad2:	85 c0       	rjmp	.+266    	; 0x1bde <GPIO_writePin+0x170>
    1ad4:	af c0       	rjmp	.+350    	; 0x1c34 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	a1 f4       	brne	.+40     	; 0x1b04 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1adc:	ab e3       	ldi	r26, 0x3B	; 59
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	eb e3       	ldi	r30, 0x3B	; 59
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <GPIO_writePin+0x8c>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <GPIO_writePin+0x88>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	98 c0       	rjmp	.+304    	; 0x1c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b04:	ab e3       	ldi	r26, 0x3B	; 59
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	eb e3       	ldi	r30, 0x3B	; 59
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_writePin+0xb4>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_writePin+0xb0>
    1b26:	80 95       	com	r24
    1b28:	84 23       	and	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	83 c0       	rjmp	.+262    	; 0x1c34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	a1 f4       	brne	.+40     	; 0x1b5c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b34:	a8 e3       	ldi	r26, 0x38	; 56
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e8 e3       	ldi	r30, 0x38	; 56
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 2e       	mov	r0, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <GPIO_writePin+0xe4>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <GPIO_writePin+0xe0>
    1b56:	84 2b       	or	r24, r20
    1b58:	8c 93       	st	X, r24
    1b5a:	6c c0       	rjmp	.+216    	; 0x1c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b5c:	a8 e3       	ldi	r26, 0x38	; 56
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e8 e3       	ldi	r30, 0x38	; 56
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <GPIO_writePin+0x10c>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <GPIO_writePin+0x108>
    1b7e:	80 95       	com	r24
    1b80:	84 23       	and	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	57 c0       	rjmp	.+174    	; 0x1c34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	a1 f4       	brne	.+40     	; 0x1bb4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b8c:	a5 e3       	ldi	r26, 0x35	; 53
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e5 e3       	ldi	r30, 0x35	; 53
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <GPIO_writePin+0x13c>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <GPIO_writePin+0x138>
    1bae:	84 2b       	or	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	40 c0       	rjmp	.+128    	; 0x1c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bb4:	a5 e3       	ldi	r26, 0x35	; 53
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e5 e3       	ldi	r30, 0x35	; 53
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_writePin+0x164>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_writePin+0x160>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	2b c0       	rjmp	.+86     	; 0x1c34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1be4:	a2 e3       	ldi	r26, 0x32	; 50
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e2 e3       	ldi	r30, 0x32	; 50
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <GPIO_writePin+0x194>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <GPIO_writePin+0x190>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c0c:	a2 e3       	ldi	r26, 0x32	; 50
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e2 e3       	ldi	r30, 0x32	; 50
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_writePin+0x1bc>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_writePin+0x1b8>
    1c2e:	80 95       	com	r24
    1c30:	84 23       	and	r24, r20
    1c32:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <GPIO_readPin+0x6>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <GPIO_readPin+0x8>
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	8a 83       	std	Y+2, r24	; 0x02
    1c54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c56:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 30       	cpi	r24, 0x08	; 8
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <GPIO_readPin+0x1c>
    1c5e:	84 c0       	rjmp	.+264    	; 0x1d68 <GPIO_readPin+0x124>
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	84 30       	cpi	r24, 0x04	; 4
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <GPIO_readPin+0x24>
    1c66:	80 c0       	rjmp	.+256    	; 0x1d68 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3d 83       	std	Y+5, r19	; 0x05
    1c70:	2c 83       	std	Y+4, r18	; 0x04
    1c72:	4c 81       	ldd	r20, Y+4	; 0x04
    1c74:	5d 81       	ldd	r21, Y+5	; 0x05
    1c76:	41 30       	cpi	r20, 0x01	; 1
    1c78:	51 05       	cpc	r21, r1
    1c7a:	79 f1       	breq	.+94     	; 0x1cda <GPIO_readPin+0x96>
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	91 05       	cpc	r25, r1
    1c84:	34 f4       	brge	.+12     	; 0x1c92 <GPIO_readPin+0x4e>
    1c86:	2c 81       	ldd	r18, Y+4	; 0x04
    1c88:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8a:	21 15       	cp	r18, r1
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	69 f0       	breq	.+26     	; 0x1caa <GPIO_readPin+0x66>
    1c90:	6b c0       	rjmp	.+214    	; 0x1d68 <GPIO_readPin+0x124>
    1c92:	4c 81       	ldd	r20, Y+4	; 0x04
    1c94:	5d 81       	ldd	r21, Y+5	; 0x05
    1c96:	42 30       	cpi	r20, 0x02	; 2
    1c98:	51 05       	cpc	r21, r1
    1c9a:	b9 f1       	breq	.+110    	; 0x1d0a <GPIO_readPin+0xc6>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_readPin+0x64>
    1ca6:	49 c0       	rjmp	.+146    	; 0x1d3a <GPIO_readPin+0xf6>
    1ca8:	5f c0       	rjmp	.+190    	; 0x1d68 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1caa:	e9 e3       	ldi	r30, 0x39	; 57
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a9 01       	movw	r20, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <GPIO_readPin+0x7e>
    1cbe:	55 95       	asr	r21
    1cc0:	47 95       	ror	r20
    1cc2:	8a 95       	dec	r24
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <GPIO_readPin+0x7a>
    1cc6:	ca 01       	movw	r24, r20
    1cc8:	81 70       	andi	r24, 0x01	; 1
    1cca:	90 70       	andi	r25, 0x00	; 0
    1ccc:	88 23       	and	r24, r24
    1cce:	19 f0       	breq	.+6      	; 0x1cd6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	49 c0       	rjmp	.+146    	; 0x1d68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cd6:	19 82       	std	Y+1, r1	; 0x01
    1cd8:	47 c0       	rjmp	.+142    	; 0x1d68 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cda:	e6 e3       	ldi	r30, 0x36	; 54
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a9 01       	movw	r20, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <GPIO_readPin+0xae>
    1cee:	55 95       	asr	r21
    1cf0:	47 95       	ror	r20
    1cf2:	8a 95       	dec	r24
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <GPIO_readPin+0xaa>
    1cf6:	ca 01       	movw	r24, r20
    1cf8:	81 70       	andi	r24, 0x01	; 1
    1cfa:	90 70       	andi	r25, 0x00	; 0
    1cfc:	88 23       	and	r24, r24
    1cfe:	19 f0       	breq	.+6      	; 0x1d06 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	31 c0       	rjmp	.+98     	; 0x1d68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d06:	19 82       	std	Y+1, r1	; 0x01
    1d08:	2f c0       	rjmp	.+94     	; 0x1d68 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d0a:	e3 e3       	ldi	r30, 0x33	; 51
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a9 01       	movw	r20, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <GPIO_readPin+0xde>
    1d1e:	55 95       	asr	r21
    1d20:	47 95       	ror	r20
    1d22:	8a 95       	dec	r24
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <GPIO_readPin+0xda>
    1d26:	ca 01       	movw	r24, r20
    1d28:	81 70       	andi	r24, 0x01	; 1
    1d2a:	90 70       	andi	r25, 0x00	; 0
    1d2c:	88 23       	and	r24, r24
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	19 c0       	rjmp	.+50     	; 0x1d68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d36:	19 82       	std	Y+1, r1	; 0x01
    1d38:	17 c0       	rjmp	.+46     	; 0x1d68 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d3a:	e0 e3       	ldi	r30, 0x30	; 48
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <GPIO_readPin+0x10e>
    1d4e:	55 95       	asr	r21
    1d50:	47 95       	ror	r20
    1d52:	8a 95       	dec	r24
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <GPIO_readPin+0x10a>
    1d56:	ca 01       	movw	r24, r20
    1d58:	81 70       	andi	r24, 0x01	; 1
    1d5a:	90 70       	andi	r25, 0x00	; 0
    1d5c:	88 23       	and	r24, r24
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d66:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <GPIO_setupPortDirection+0x6>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <GPIO_setupPortDirection+0x8>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	84 30       	cpi	r24, 0x04	; 4
    1d8e:	90 f5       	brcc	.+100    	; 0x1df4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	3c 83       	std	Y+4, r19	; 0x04
    1d98:	2b 83       	std	Y+3, r18	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	91 05       	cpc	r25, r1
    1da2:	d1 f0       	breq	.+52     	; 0x1dd8 <GPIO_setupPortDirection+0x5e>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <GPIO_setupPortDirection+0x3e>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	61 f0       	breq	.+24     	; 0x1dce <GPIO_setupPortDirection+0x54>
    1db6:	1e c0       	rjmp	.+60     	; 0x1df4 <GPIO_setupPortDirection+0x7a>
    1db8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dba:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbc:	22 30       	cpi	r18, 0x02	; 2
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	81 f0       	breq	.+32     	; 0x1de2 <GPIO_setupPortDirection+0x68>
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	83 30       	cpi	r24, 0x03	; 3
    1dc8:	91 05       	cpc	r25, r1
    1dca:	81 f0       	breq	.+32     	; 0x1dec <GPIO_setupPortDirection+0x72>
    1dcc:	13 c0       	rjmp	.+38     	; 0x1df4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dce:	ea e3       	ldi	r30, 0x3A	; 58
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	80 83       	st	Z, r24
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1dd8:	e7 e3       	ldi	r30, 0x37	; 55
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	80 83       	st	Z, r24
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1de2:	e4 e3       	ldi	r30, 0x34	; 52
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	80 83       	st	Z, r24
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1dec:	e1 e3       	ldi	r30, 0x31	; 49
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <GPIO_writePort+0x6>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <GPIO_writePort+0x8>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	84 30       	cpi	r24, 0x04	; 4
    1e16:	90 f5       	brcc	.+100    	; 0x1e7c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	3c 83       	std	Y+4, r19	; 0x04
    1e20:	2b 83       	std	Y+3, r18	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	91 05       	cpc	r25, r1
    1e2a:	d1 f0       	breq	.+52     	; 0x1e60 <GPIO_writePort+0x5e>
    1e2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e30:	22 30       	cpi	r18, 0x02	; 2
    1e32:	31 05       	cpc	r19, r1
    1e34:	2c f4       	brge	.+10     	; 0x1e40 <GPIO_writePort+0x3e>
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	61 f0       	breq	.+24     	; 0x1e56 <GPIO_writePort+0x54>
    1e3e:	1e c0       	rjmp	.+60     	; 0x1e7c <GPIO_writePort+0x7a>
    1e40:	2b 81       	ldd	r18, Y+3	; 0x03
    1e42:	3c 81       	ldd	r19, Y+4	; 0x04
    1e44:	22 30       	cpi	r18, 0x02	; 2
    1e46:	31 05       	cpc	r19, r1
    1e48:	81 f0       	breq	.+32     	; 0x1e6a <GPIO_writePort+0x68>
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	83 30       	cpi	r24, 0x03	; 3
    1e50:	91 05       	cpc	r25, r1
    1e52:	81 f0       	breq	.+32     	; 0x1e74 <GPIO_writePort+0x72>
    1e54:	13 c0       	rjmp	.+38     	; 0x1e7c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e56:	eb e3       	ldi	r30, 0x3B	; 59
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	80 83       	st	Z, r24
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e60:	e8 e3       	ldi	r30, 0x38	; 56
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	80 83       	st	Z, r24
    1e68:	09 c0       	rjmp	.+18     	; 0x1e7c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e6a:	e5 e3       	ldi	r30, 0x35	; 53
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	80 83       	st	Z, r24
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e74:	e2 e3       	ldi	r30, 0x32	; 50
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <GPIO_readPort+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <GPIO_readPort+0x8>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e98:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	90 f5       	brcc	.+100    	; 0x1f04 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	3c 83       	std	Y+4, r19	; 0x04
    1ea8:	2b 83       	std	Y+3, r18	; 0x03
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	d1 f0       	breq	.+52     	; 0x1ee8 <GPIO_readPort+0x5e>
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <GPIO_readPort+0x3e>
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	61 f0       	breq	.+24     	; 0x1ede <GPIO_readPort+0x54>
    1ec6:	1e c0       	rjmp	.+60     	; 0x1f04 <GPIO_readPort+0x7a>
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	81 f0       	breq	.+32     	; 0x1ef2 <GPIO_readPort+0x68>
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	83 30       	cpi	r24, 0x03	; 3
    1ed8:	91 05       	cpc	r25, r1
    1eda:	81 f0       	breq	.+32     	; 0x1efc <GPIO_readPort+0x72>
    1edc:	13 c0       	rjmp	.+38     	; 0x1f04 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ede:	e9 e3       	ldi	r30, 0x39	; 57
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	0e c0       	rjmp	.+28     	; 0x1f04 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ee8:	e6 e3       	ldi	r30, 0x36	; 54
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	09 c0       	rjmp	.+18     	; 0x1f04 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ef2:	e3 e3       	ldi	r30, 0x33	; 51
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1efc:	e0 e3       	ldi	r30, 0x30	; 48
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
// Timer1 Compare Match ISR
ISR(TIMER1_COMPA_vect)
{
    1f14:	1f 92       	push	r1
    1f16:	0f 92       	push	r0
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	0f 92       	push	r0
    1f1c:	11 24       	eor	r1, r1
    1f1e:	2f 93       	push	r18
    1f20:	3f 93       	push	r19
    1f22:	4f 93       	push	r20
    1f24:	5f 93       	push	r21
    1f26:	6f 93       	push	r22
    1f28:	7f 93       	push	r23
    1f2a:	8f 93       	push	r24
    1f2c:	9f 93       	push	r25
    1f2e:	af 93       	push	r26
    1f30:	bf 93       	push	r27
    1f32:	ef 93       	push	r30
    1f34:	ff 93       	push	r31
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	if (timer1_callback != NULL_PTR)
    1f3e:	80 91 68 00 	lds	r24, 0x0068
    1f42:	90 91 69 00 	lds	r25, 0x0069
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	29 f0       	breq	.+10     	; 0x1f54 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callback)(); /* another method to call the function using pointer to function timer1_callback(); */
    1f4a:	e0 91 68 00 	lds	r30, 0x0068
    1f4e:	f0 91 69 00 	lds	r31, 0x0069
    1f52:	09 95       	icall
	}
}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	ff 91       	pop	r31
    1f5a:	ef 91       	pop	r30
    1f5c:	bf 91       	pop	r27
    1f5e:	af 91       	pop	r26
    1f60:	9f 91       	pop	r25
    1f62:	8f 91       	pop	r24
    1f64:	7f 91       	pop	r23
    1f66:	6f 91       	pop	r22
    1f68:	5f 91       	pop	r21
    1f6a:	4f 91       	pop	r20
    1f6c:	3f 91       	pop	r19
    1f6e:	2f 91       	pop	r18
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	0f 90       	pop	r0
    1f76:	1f 90       	pop	r1
    1f78:	18 95       	reti

00001f7a <__vector_9>:

// Timer1 Overflow ISR
ISR(TIMER1_OVF_vect)
{
    1f7a:	1f 92       	push	r1
    1f7c:	0f 92       	push	r0
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	0f 92       	push	r0
    1f82:	11 24       	eor	r1, r1
    1f84:	2f 93       	push	r18
    1f86:	3f 93       	push	r19
    1f88:	4f 93       	push	r20
    1f8a:	5f 93       	push	r21
    1f8c:	6f 93       	push	r22
    1f8e:	7f 93       	push	r23
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	af 93       	push	r26
    1f96:	bf 93       	push	r27
    1f98:	ef 93       	push	r30
    1f9a:	ff 93       	push	r31
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	if (timer1_callback != NULL_PTR)
    1fa4:	80 91 68 00 	lds	r24, 0x0068
    1fa8:	90 91 69 00 	lds	r25, 0x0069
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	29 f0       	breq	.+10     	; 0x1fba <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callback)(); /* another method to call the function using pointer to function timer1_callback(); */
    1fb0:	e0 91 68 00 	lds	r30, 0x0068
    1fb4:	f0 91 69 00 	lds	r31, 0x0069
    1fb8:	09 95       	icall
	}
}
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	bf 91       	pop	r27
    1fc4:	af 91       	pop	r26
    1fc6:	9f 91       	pop	r25
    1fc8:	8f 91       	pop	r24
    1fca:	7f 91       	pop	r23
    1fcc:	6f 91       	pop	r22
    1fce:	5f 91       	pop	r21
    1fd0:	4f 91       	pop	r20
    1fd2:	3f 91       	pop	r19
    1fd4:	2f 91       	pop	r18
    1fd6:	0f 90       	pop	r0
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	0f 90       	pop	r0
    1fdc:	1f 90       	pop	r1
    1fde:	18 95       	reti

00001fe0 <Timer1_init>:
 * Function to initialize the Timer driver.
 * 1. Set the required clock.
 * 2. Initialize Timer1 Registers.
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <Timer1_init+0x6>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
	// Configure Timer1 Control Register
	TCCR1A = 0; // Normal mode by default
    1fee:	ef e4       	ldi	r30, 0x4F	; 79
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	10 82       	st	Z, r1
	TCCR1B = 0;
    1ff4:	ee e4       	ldi	r30, 0x4E	; 78
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	10 82       	st	Z, r1

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B |= (Config_Ptr->prescaler);
    1ffa:	ae e4       	ldi	r26, 0x4E	; 78
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	ee e4       	ldi	r30, 0x4E	; 78
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	90 81       	ld	r25, Z
    2004:	e9 81       	ldd	r30, Y+1	; 0x01
    2006:	fa 81       	ldd	r31, Y+2	; 0x02
    2008:	84 81       	ldd	r24, Z+4	; 0x04
    200a:	89 2b       	or	r24, r25
    200c:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = (Config_Ptr->initial_value);
    200e:	ac e4       	ldi	r26, 0x4C	; 76
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e9 81       	ldd	r30, Y+1	; 0x01
    2014:	fa 81       	ldd	r31, Y+2	; 0x02
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	11 96       	adiw	r26, 0x01	; 1
    201c:	9c 93       	st	X, r25
    201e:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == TIMER1_COMPARE_MODE)
    2020:	e9 81       	ldd	r30, Y+1	; 0x01
    2022:	fa 81       	ldd	r31, Y+2	; 0x02
    2024:	85 81       	ldd	r24, Z+5	; 0x05
    2026:	84 30       	cpi	r24, 0x04	; 4
    2028:	c1 f4       	brne	.+48     	; 0x205a <Timer1_init+0x7a>
	{
		TCCR1B |= (1 << WGM12);
    202a:	ae e4       	ldi	r26, 0x4E	; 78
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	ee e4       	ldi	r30, 0x4E	; 78
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	88 60       	ori	r24, 0x08	; 8
    2036:	8c 93       	st	X, r24

		// Set the compare value
		OCR1A = (Config_Ptr->compare_value);
    2038:	aa e4       	ldi	r26, 0x4A	; 74
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e9 81       	ldd	r30, Y+1	; 0x01
    203e:	fa 81       	ldd	r31, Y+2	; 0x02
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	11 96       	adiw	r26, 0x01	; 1
    2046:	9c 93       	st	X, r25
    2048:	8e 93       	st	-X, r24

		// Enable Compare Match interrupt
		TIMSK |= (1 << OCIE1A);
    204a:	a9 e5       	ldi	r26, 0x59	; 89
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e9 e5       	ldi	r30, 0x59	; 89
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 61       	ori	r24, 0x10	; 16
    2056:	8c 93       	st	X, r24
    2058:	07 c0       	rjmp	.+14     	; 0x2068 <Timer1_init+0x88>
	}
	else
	{
		// Enable Timer1 overflow interrupt
		TIMSK |= (1 << TOIE1);
    205a:	a9 e5       	ldi	r26, 0x59	; 89
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e9 e5       	ldi	r30, 0x59	; 89
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	84 60       	ori	r24, 0x04	; 4
    2066:	8c 93       	st	X, r24
	}
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <Timer1_deInit>:
/*
 * Description:
 *  Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    207a:	ef e4       	ldi	r30, 0x4F	; 79
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	10 82       	st	Z, r1
	TCCR1B = 0;
    2080:	ee e4       	ldi	r30, 0x4E	; 78
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	10 82       	st	Z, r1
	TCNT1 = 0;
    2086:	ec e4       	ldi	r30, 0x4C	; 76
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	11 82       	std	Z+1, r1	; 0x01
    208c:	10 82       	st	Z, r1
	OCR1A = 0;
    208e:	ea e4       	ldi	r30, 0x4A	; 74
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	11 82       	std	Z+1, r1	; 0x01
    2094:	10 82       	st	Z, r1

	// Disable Timer1 interrupts
	TIMSK &= ~((1 << OCIE1A) | (1 << TOIE1));
    2096:	a9 e5       	ldi	r26, 0x59	; 89
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e9 e5       	ldi	r30, 0x59	; 89
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	8b 7e       	andi	r24, 0xEB	; 235
    20a2:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	timer1_callback = NULL_PTR;
    20a4:	10 92 69 00 	sts	0x0069, r1
    20a8:	10 92 68 00 	sts	0x0068, r1
}
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <Timer1_setCallBack>:
/*
 * Description:
 *  Function to set the Call Back function address.
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <Timer1_setCallBack+0x6>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callback = a_ptr;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	90 93 69 00 	sts	0x0069, r25
    20c8:	80 93 68 00 	sts	0x0068, r24
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <TWI_init+0x6>
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    20e4:	e0 e2       	ldi	r30, 0x20	; 32
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	80 83       	st	Z, r24
    TWSR |= (Config_Ptr->bit_rate & 0x03);
    20ec:	a1 e2       	ldi	r26, 0x21	; 33
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e1 e2       	ldi	r30, 0x21	; 33
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	98 2f       	mov	r25, r24
    20f8:	e9 81       	ldd	r30, Y+1	; 0x01
    20fa:	fa 81       	ldd	r31, Y+2	; 0x02
    20fc:	81 81       	ldd	r24, Z+1	; 0x01
    20fe:	83 70       	andi	r24, 0x03	; 3
    2100:	89 2b       	or	r24, r25
    2102:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address << 1); // my address = 0x01 :)
    2104:	a2 e2       	ldi	r26, 0x22	; 34
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e9 81       	ldd	r30, Y+1	; 0x01
    210a:	fa 81       	ldd	r31, Y+2	; 0x02
    210c:	80 81       	ld	r24, Z
    210e:	88 0f       	add	r24, r24
    2110:	8c 93       	st	X, r24

    TWCR = (1 << TWEN); /* enable TWI */
    2112:	e6 e5       	ldi	r30, 0x56	; 86
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	84 e0       	ldi	r24, 0x04	; 4
    2118:	80 83       	st	Z, r24
}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <TWI_start>:

void TWI_start(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the start bit TWINT=1
     * send the start bit by TWSTA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    212c:	e6 e5       	ldi	r30, 0x56	; 86
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	84 ea       	ldi	r24, 0xA4	; 164
    2132:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    2134:	e6 e5       	ldi	r30, 0x56	; 86
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	88 23       	and	r24, r24
    213c:	dc f7       	brge	.-10     	; 0x2134 <TWI_start+0x10>
        ;
}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <TWI_stop>:

void TWI_stop(void)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the stop bit TWINT=1
     * send the stop bit by TWSTO=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    214c:	e6 e5       	ldi	r30, 0x56	; 86
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	84 e9       	ldi	r24, 0x94	; 148
    2152:	80 83       	st	Z, r24
}
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	0f 92       	push	r0
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2166:	e3 e2       	ldi	r30, 0x23	; 35
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	80 83       	st	Z, r24
    /*
     * Clear the TWINT flag before sending the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    216e:	e6 e5       	ldi	r30, 0x56	; 86
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	84 e8       	ldi	r24, 0x84	; 132
    2174:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    2176:	e6 e5       	ldi	r30, 0x56	; 86
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	88 23       	and	r24, r24
    217e:	dc f7       	brge	.-10     	; 0x2176 <TWI_writeByte+0x1c>
        ;
}
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable sending ACK after reading or receiving data TWEA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2190:	e6 e5       	ldi	r30, 0x56	; 86
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	84 ec       	ldi	r24, 0xC4	; 196
    2196:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    2198:	e6 e5       	ldi	r30, 0x56	; 86
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	88 23       	and	r24, r24
    21a0:	dc f7       	brge	.-10     	; 0x2198 <TWI_readByteWithACK+0x10>
        ;
    /* Read Data */
    return TWDR;
    21a2:	e3 e2       	ldi	r30, 0x23	; 35
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
}
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    21b6:	e6 e5       	ldi	r30, 0x56	; 86
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	84 e8       	ldi	r24, 0x84	; 132
    21bc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    21be:	e6 e5       	ldi	r30, 0x56	; 86
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	dc f7       	brge	.-10     	; 0x21be <TWI_readByteWithNACK+0x10>
        ;
    /* Read Data */
    return TWDR;
    21c8:	e3 e2       	ldi	r30, 0x23	; 35
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
}
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    21de:	e1 e2       	ldi	r30, 0x21	; 33
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	88 7f       	andi	r24, 0xF8	; 248
    21e6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <UART_init+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <UART_init+0x8>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	9d 83       	std	Y+5, r25	; 0x05
    2202:	8c 83       	std	Y+4, r24	; 0x04
	uint16 ubrr_value = 0;
    2204:	1b 82       	std	Y+3, r1	; 0x03
    2206:	1a 82       	std	Y+2, r1	; 0x02
	uint8 baud_divisor = 8UL;
    2208:	88 e0       	ldi	r24, 0x08	; 8
    220a:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (Config_Ptr->trans_speed << U2X);
    220c:	ab e2       	ldi	r26, 0x2B	; 43
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ec 81       	ldd	r30, Y+4	; 0x04
    2212:	fd 81       	ldd	r31, Y+5	; 0x05
    2214:	80 85       	ldd	r24, Z+8	; 0x08
    2216:	88 0f       	add	r24, r24
    2218:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    221a:	ea e2       	ldi	r30, 0x2A	; 42
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	88 e1       	ldi	r24, 0x18	; 24
    2220:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (Config_Ptr->trans_mod << UMSEL) | (Config_Ptr->stop_bit << USBS) | (Config_Ptr->parity << 4) | (1 << URSEL);
    2222:	a0 e4       	ldi	r26, 0x40	; 64
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ec 81       	ldd	r30, Y+4	; 0x04
    2228:	fd 81       	ldd	r31, Y+5	; 0x05
    222a:	87 81       	ldd	r24, Z+7	; 0x07
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	00 24       	eor	r0, r0
    2232:	96 95       	lsr	r25
    2234:	87 95       	ror	r24
    2236:	07 94       	ror	r0
    2238:	96 95       	lsr	r25
    223a:	87 95       	ror	r24
    223c:	07 94       	ror	r0
    223e:	98 2f       	mov	r25, r24
    2240:	80 2d       	mov	r24, r0
    2242:	28 2f       	mov	r18, r24
    2244:	ec 81       	ldd	r30, Y+4	; 0x04
    2246:	fd 81       	ldd	r31, Y+5	; 0x05
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	88 2f       	mov	r24, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	28 2b       	or	r18, r24
    225c:	ec 81       	ldd	r30, Y+4	; 0x04
    225e:	fd 81       	ldd	r31, Y+5	; 0x05
    2260:	81 81       	ldd	r24, Z+1	; 0x01
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	82 95       	swap	r24
    2268:	92 95       	swap	r25
    226a:	90 7f       	andi	r25, 0xF0	; 240
    226c:	98 27       	eor	r25, r24
    226e:	80 7f       	andi	r24, 0xF0	; 240
    2270:	98 27       	eor	r25, r24
    2272:	82 2b       	or	r24, r18
    2274:	80 68       	ori	r24, 0x80	; 128
    2276:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data == Data_9Bit){
    2278:	ec 81       	ldd	r30, Y+4	; 0x04
    227a:	fd 81       	ldd	r31, Y+5	; 0x05
    227c:	80 81       	ld	r24, Z
    227e:	87 30       	cpi	r24, 0x07	; 7
    2280:	c1 f4       	brne	.+48     	; 0x22b2 <UART_init+0xc0>
		UCSRC |= ((Config_Ptr->bit_data << 1) & 0x06);
    2282:	a0 e4       	ldi	r26, 0x40	; 64
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e0 e4       	ldi	r30, 0x40	; 64
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	28 2f       	mov	r18, r24
    228e:	ec 81       	ldd	r30, Y+4	; 0x04
    2290:	fd 81       	ldd	r31, Y+5	; 0x05
    2292:	80 81       	ld	r24, Z
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	86 70       	andi	r24, 0x06	; 6
    229e:	82 2b       	or	r24, r18
    22a0:	8c 93       	st	X, r24
		UCSRB |= (1<<UCSZ2);
    22a2:	aa e2       	ldi	r26, 0x2A	; 42
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	ea e2       	ldi	r30, 0x2A	; 42
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	84 60       	ori	r24, 0x04	; 4
    22ae:	8c 93       	st	X, r24
    22b0:	10 c0       	rjmp	.+32     	; 0x22d2 <UART_init+0xe0>
	}else{
		UCSRC |= ((Config_Ptr->bit_data << 1) & 0x06);
    22b2:	a0 e4       	ldi	r26, 0x40	; 64
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e0 e4       	ldi	r30, 0x40	; 64
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	28 2f       	mov	r18, r24
    22be:	ec 81       	ldd	r30, Y+4	; 0x04
    22c0:	fd 81       	ldd	r31, Y+5	; 0x05
    22c2:	80 81       	ld	r24, Z
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	86 70       	andi	r24, 0x06	; 6
    22ce:	82 2b       	or	r24, r18
    22d0:	8c 93       	st	X, r24
	}

	/* Calculate the the divisor of the baud rate divider from 16 to 8 */
	if(Config_Ptr->trans_mod == ASYNC){
    22d2:	ec 81       	ldd	r30, Y+4	; 0x04
    22d4:	fd 81       	ldd	r31, Y+5	; 0x05
    22d6:	87 81       	ldd	r24, Z+7	; 0x07
    22d8:	88 23       	and	r24, r24
    22da:	59 f4       	brne	.+22     	; 0x22f2 <UART_init+0x100>
		if(Config_Ptr->trans_speed == SYNC_OR_ASYNC_Normal)
    22dc:	ec 81       	ldd	r30, Y+4	; 0x04
    22de:	fd 81       	ldd	r31, Y+5	; 0x05
    22e0:	80 85       	ldd	r24, Z+8	; 0x08
    22e2:	88 23       	and	r24, r24
    22e4:	19 f4       	brne	.+6      	; 0x22ec <UART_init+0xfa>
			baud_divisor = 16;
    22e6:	80 e1       	ldi	r24, 0x10	; 16
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <UART_init+0x104>
		else
			baud_divisor = 8;
    22ec:	88 e0       	ldi	r24, 0x08	; 8
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <UART_init+0x104>
	}else{
		baud_divisor = 2;
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * baud_divisor))) - 1);
    22f6:	ec 81       	ldd	r30, Y+4	; 0x04
    22f8:	fd 81       	ldd	r31, Y+5	; 0x05
    22fa:	83 81       	ldd	r24, Z+3	; 0x03
    22fc:	94 81       	ldd	r25, Z+4	; 0x04
    22fe:	a5 81       	ldd	r26, Z+5	; 0x05
    2300:	b6 81       	ldd	r27, Z+6	; 0x06
    2302:	29 81       	ldd	r18, Y+1	; 0x01
    2304:	22 2f       	mov	r18, r18
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__mulsi3>
    2314:	9b 01       	movw	r18, r22
    2316:	ac 01       	movw	r20, r24
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	92 e1       	ldi	r25, 0x12	; 18
    231c:	aa e7       	ldi	r26, 0x7A	; 122
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__udivmodsi4>
    2328:	da 01       	movw	r26, r20
    232a:	c9 01       	movw	r24, r18
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9b 83       	std	Y+3, r25	; 0x03
    2330:	8a 83       	std	Y+2, r24	; 0x02

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2332:	e0 e4       	ldi	r30, 0x40	; 64
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	89 2f       	mov	r24, r25
    233c:	99 27       	eor	r25, r25
    233e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2340:	e9 e2       	ldi	r30, 0x29	; 41
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	80 83       	st	Z, r24
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	0f 92       	push	r0
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    2364:	eb e2       	ldi	r30, 0x2B	; 43
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	80 72       	andi	r24, 0x20	; 32
    2370:	90 70       	andi	r25, 0x00	; 0
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	b9 f3       	breq	.-18     	; 0x2364 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2376:	ec e2       	ldi	r30, 0x2C	; 44
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    238e:	eb e2       	ldi	r30, 0x2B	; 43
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	88 23       	and	r24, r24
    2396:	dc f7       	brge	.-10     	; 0x238e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2398:	ec e2       	ldi	r30, 0x2C	; 44
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
}
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <UART_sendString+0x6>
    23aa:	0f 92       	push	r0
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	9b 83       	std	Y+3, r25	; 0x03
    23b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23b4:	19 82       	std	Y+1, r1	; 0x01
    23b6:	0e c0       	rjmp	.+28     	; 0x23d4 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	9b 81       	ldd	r25, Y+3	; 0x03
    23c2:	fc 01       	movw	r30, r24
    23c4:	e2 0f       	add	r30, r18
    23c6:	f3 1f       	adc	r31, r19
    23c8:	80 81       	ld	r24, Z
    23ca:	0e 94 ac 11 	call	0x2358	; 0x2358 <UART_sendByte>
		i++;
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	9b 81       	ldd	r25, Y+3	; 0x03
    23de:	fc 01       	movw	r30, r24
    23e0:	e2 0f       	add	r30, r18
    23e2:	f3 1f       	adc	r31, r19
    23e4:	80 81       	ld	r24, Z
    23e6:	88 23       	and	r24, r24
    23e8:	39 f7       	brne	.-50     	; 0x23b8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <UART_receiveString+0xa>
    2400:	0f 92       	push	r0
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	9b 83       	std	Y+3, r25	; 0x03
    2408:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    240a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	9b 81       	ldd	r25, Y+3	; 0x03
    2416:	8c 01       	movw	r16, r24
    2418:	02 0f       	add	r16, r18
    241a:	13 1f       	adc	r17, r19
    241c:	0e 94 c3 11 	call	0x2386	; 0x2386 <UART_recieveByte>
    2420:	f8 01       	movw	r30, r16
    2422:	80 83       	st	Z, r24
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	9b 81       	ldd	r25, Y+3	; 0x03
    2436:	8c 01       	movw	r16, r24
    2438:	02 0f       	add	r16, r18
    243a:	13 1f       	adc	r17, r19
    243c:	0e 94 c3 11 	call	0x2386	; 0x2386 <UART_recieveByte>
    2440:	f8 01       	movw	r30, r16
    2442:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	fc 01       	movw	r30, r24
    2450:	e2 0f       	add	r30, r18
    2452:	f3 1f       	adc	r31, r19
    2454:	80 81       	ld	r24, Z
    2456:	83 32       	cpi	r24, 0x23	; 35
    2458:	31 f7       	brne	.-52     	; 0x2426 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	fc 01       	movw	r30, r24
    2466:	e2 0f       	add	r30, r18
    2468:	f3 1f       	adc	r31, r19
    246a:	10 82       	st	Z, r1
}
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	08 95       	ret

0000247c <main>:
/*******************************************************************************
 *                           Main Function                                     *
 *******************************************************************************/

int main(void)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	2c 97       	sbiw	r28, 0x0c	; 12
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61

	// Configure the UART specifications
	UART_ConfigType uart_configuration;
	uart_configuration.baud_rate = 9600;
    2490:	80 e8       	ldi	r24, 0x80	; 128
    2492:	95 e2       	ldi	r25, 0x25	; 37
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	9e 83       	std	Y+6, r25	; 0x06
    249c:	af 83       	std	Y+7, r26	; 0x07
    249e:	b8 87       	std	Y+8, r27	; 0x08
	uart_configuration.bit_data = Data_8Bit;
    24a0:	83 e0       	ldi	r24, 0x03	; 3
    24a2:	8a 83       	std	Y+2, r24	; 0x02
	uart_configuration.parity = Disabled;
    24a4:	1b 82       	std	Y+3, r1	; 0x03
	uart_configuration.stop_bit = St_1Bit;
    24a6:	1c 82       	std	Y+4, r1	; 0x04
	uart_configuration.trans_mod = ASYNC;
    24a8:	19 86       	std	Y+9, r1	; 0x09
	uart_configuration.trans_speed = ASYNC_Double;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	8a 87       	std	Y+10, r24	; 0x0a

	// Start the UART
	UART_init(&uart_configuration);
    24ae:	ce 01       	movw	r24, r28
    24b0:	02 96       	adiw	r24, 0x02	; 2
    24b2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <UART_init>

	// Configure the TWI interface specifications
	TWI_ConfigType twi_configuration;
	twi_configuration.bit_rate = TWI_CPU_1;
    24b6:	1c 86       	std	Y+12, r1	; 0x0c
	twi_configuration.address = 0x01;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	8b 87       	std	Y+11, r24	; 0x0b

	/* Start the TWI/I2C Driver */
	TWI_init(&twi_configuration);
    24bc:	ce 01       	movw	r24, r28
    24be:	0b 96       	adiw	r24, 0x0b	; 11
    24c0:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <TWI_init>
	 * 		prescaler = 256;
	 * In Normal Mode:
	 * 		prescaler = 1024;
	 */
	static Timer1_ConfigType timer_config;
	timer_config.mode = TIMER1_COMPARE_MODE;
    24c4:	84 e0       	ldi	r24, 0x04	; 4
    24c6:	80 93 83 00 	sts	0x0083, r24
	timer_config.prescaler = TIMER1_PRESCALER_256;
    24ca:	84 e0       	ldi	r24, 0x04	; 4
    24cc:	80 93 82 00 	sts	0x0082, r24
	timer_config.initial_value = 0;
    24d0:	10 92 7f 00 	sts	0x007F, r1
    24d4:	10 92 7e 00 	sts	0x007E, r1
	timer_config.compare_value = 31250;
    24d8:	82 e1       	ldi	r24, 0x12	; 18
    24da:	9a e7       	ldi	r25, 0x7A	; 122
    24dc:	90 93 81 00 	sts	0x0081, r25
    24e0:	80 93 80 00 	sts	0x0080, r24

	// Set CallBack function for timer1
	//	Timer1_setCallBack(TimeOut);

	/* Start the Buzzer Driver */
	Buzzer_init();
    24e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	/* Start the DC-Motor Driver */
	DcMotor_Init();
    24e8:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>

	SREG |= (1 << 7); /* Enable Global Interrupts */
    24ec:	af e5       	ldi	r26, 0x5F	; 95
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	ef e5       	ldi	r30, 0x5F	; 95
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	80 68       	ori	r24, 0x80	; 128
    24f8:	8c 93       	st	X, r24
	{
		do
		{

			// receive password1 from the HMI_ECU
			receivePassword(&password1);
    24fa:	8a e6       	ldi	r24, 0x6A	; 106
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 77 15 	call	0x2aee	; 0x2aee <receivePassword>

			// receive password2 to the HMI_ECU
			receivePassword(&password2);
    2502:	8e e6       	ldi	r24, 0x6E	; 110
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 77 15 	call	0x2aee	; 0x2aee <receivePassword>

			if (password1 == password2)
    250a:	20 91 6a 00 	lds	r18, 0x006A
    250e:	30 91 6b 00 	lds	r19, 0x006B
    2512:	40 91 6c 00 	lds	r20, 0x006C
    2516:	50 91 6d 00 	lds	r21, 0x006D
    251a:	80 91 6e 00 	lds	r24, 0x006E
    251e:	90 91 6f 00 	lds	r25, 0x006F
    2522:	a0 91 70 00 	lds	r26, 0x0070
    2526:	b0 91 71 00 	lds	r27, 0x0071
    252a:	28 17       	cp	r18, r24
    252c:	39 07       	cpc	r19, r25
    252e:	4a 07       	cpc	r20, r26
    2530:	5b 07       	cpc	r21, r27
    2532:	b1 f4       	brne	.+44     	; 0x2560 <main+0xe4>
			{
				ack_set = SAME_PASS;
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	80 93 7c 00 	sts	0x007C, r24
				UART_sendByte(ack_set);
    253a:	80 91 7c 00 	lds	r24, 0x007C
    253e:	0e 94 ac 11 	call	0x2358	; 0x2358 <UART_sendByte>

				storePassword(EEPROM_ADD, password1);
    2542:	20 91 6a 00 	lds	r18, 0x006A
    2546:	30 91 6b 00 	lds	r19, 0x006B
    254a:	40 91 6c 00 	lds	r20, 0x006C
    254e:	50 91 6d 00 	lds	r21, 0x006D
    2552:	81 e1       	ldi	r24, 0x11	; 17
    2554:	93 e0       	ldi	r25, 0x03	; 3
    2556:	ba 01       	movw	r22, r20
    2558:	a9 01       	movw	r20, r18
    255a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <storePassword>
    255e:	06 c0       	rjmp	.+12     	; 0x256c <main+0xf0>
			}
			else
			{
				ack_set = DIFF_PASS;
    2560:	10 92 7c 00 	sts	0x007C, r1
				UART_sendByte(ack_set);
    2564:	80 91 7c 00 	lds	r24, 0x007C
    2568:	0e 94 ac 11 	call	0x2358	; 0x2358 <UART_sendByte>
			}
		} while (ack_set == DIFF_PASS);
    256c:	80 91 7c 00 	lds	r24, 0x007C
    2570:	88 23       	and	r24, r24
    2572:	19 f2       	breq	.-122    	; 0x24fa <main+0x7e>
		 */
		// receive option from HMI_MC
		uint8 option;
		while (1)
		{
			option = UART_recieveByte();
    2574:	0e 94 c3 11 	call	0x2386	; 0x2386 <UART_recieveByte>
    2578:	89 83       	std	Y+1, r24	; 0x01

			// receive optionPassword from the HMI_ECU

			countWrngPass = 0;
    257a:	10 92 7d 00 	sts	0x007D, r1
			do
			{
				option_password = 0;
    257e:	10 92 72 00 	sts	0x0072, r1
    2582:	10 92 73 00 	sts	0x0073, r1
    2586:	10 92 74 00 	sts	0x0074, r1
    258a:	10 92 75 00 	sts	0x0075, r1
				reStored_password = 0;
    258e:	10 92 76 00 	sts	0x0076, r1
    2592:	10 92 77 00 	sts	0x0077, r1
    2596:	10 92 78 00 	sts	0x0078, r1
    259a:	10 92 79 00 	sts	0x0079, r1
				receivePassword(&option_password);
    259e:	82 e7       	ldi	r24, 0x72	; 114
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 77 15 	call	0x2aee	; 0x2aee <receivePassword>

				reStorePassword(EEPROM_ADD, &reStored_password);
    25a6:	26 e7       	ldi	r18, 0x76	; 118
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e1       	ldi	r24, 0x11	; 17
    25ac:	93 e0       	ldi	r25, 0x03	; 3
    25ae:	b9 01       	movw	r22, r18
    25b0:	0e 94 26 14 	call	0x284c	; 0x284c <reStorePassword>

				if (option_password == reStored_password)
    25b4:	20 91 72 00 	lds	r18, 0x0072
    25b8:	30 91 73 00 	lds	r19, 0x0073
    25bc:	40 91 74 00 	lds	r20, 0x0074
    25c0:	50 91 75 00 	lds	r21, 0x0075
    25c4:	80 91 76 00 	lds	r24, 0x0076
    25c8:	90 91 77 00 	lds	r25, 0x0077
    25cc:	a0 91 78 00 	lds	r26, 0x0078
    25d0:	b0 91 79 00 	lds	r27, 0x0079
    25d4:	28 17       	cp	r18, r24
    25d6:	39 07       	cpc	r19, r25
    25d8:	4a 07       	cpc	r20, r26
    25da:	5b 07       	cpc	r21, r27
    25dc:	21 f4       	brne	.+8      	; 0x25e6 <main+0x16a>
				{
					UART_sendByte(5);
    25de:	85 e0       	ldi	r24, 0x05	; 5
    25e0:	0e 94 ac 11 	call	0x2358	; 0x2358 <UART_sendByte>
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <main+0x186>
					break;
				}
				else
				{
					countWrngPass++;
    25e6:	80 91 7d 00 	lds	r24, 0x007D
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
    25ec:	80 93 7d 00 	sts	0x007D, r24
					UART_sendByte(countWrngPass);
    25f0:	80 91 7d 00 	lds	r24, 0x007D
    25f4:	0e 94 ac 11 	call	0x2358	; 0x2358 <UART_sendByte>
				}

			} while (countWrngPass < 3);
    25f8:	80 91 7d 00 	lds	r24, 0x007D
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	08 f4       	brcc	.+2      	; 0x2602 <main+0x186>
    2600:	be cf       	rjmp	.-132    	; 0x257e <main+0x102>

			if (countWrngPass == 3)
    2602:	80 91 7d 00 	lds	r24, 0x007D
    2606:	83 30       	cpi	r24, 0x03	; 3
    2608:	c1 f4       	brne	.+48     	; 0x263a <main+0x1be>
			{
				// Activate Buzzer for 1-minute.
				Buzzer_on();
    260a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
				timerValue = PASSWORD_TIME_OUT;
    260e:	8c e3       	ldi	r24, 0x3C	; 60
    2610:	80 93 7a 00 	sts	0x007A, r24
				count_timer = 0;
    2614:	10 92 7b 00 	sts	0x007B, r1
				Timer1_setCallBack(TimeOut);
    2618:	87 eb       	ldi	r24, 0xB7	; 183
    261a:	95 e1       	ldi	r25, 0x15	; 21
    261c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    2620:	8e e7       	ldi	r24, 0x7E	; 126
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <Timer1_init>
				while (count_timer < timerValue)
    2628:	90 91 7b 00 	lds	r25, 0x007B
    262c:	80 91 7a 00 	lds	r24, 0x007A
    2630:	98 17       	cp	r25, r24
    2632:	d0 f3       	brcs	.-12     	; 0x2628 <main+0x1ac>
					; //// <<--------------------
				Buzzer_off();
    2634:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
    2638:	9d cf       	rjmp	.-198    	; 0x2574 <main+0xf8>
				continue;
			}

			if (option == '+')
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	8b 32       	cpi	r24, 0x2B	; 43
    263e:	09 f0       	breq	.+2      	; 0x2642 <main+0x1c6>
    2640:	4a c0       	rjmp	.+148    	; 0x26d6 <main+0x25a>
			{
				// rotates motor for 15-seconds CW
				timerValue = DOOR_OPEN_TIME;
    2642:	8f e0       	ldi	r24, 0x0F	; 15
    2644:	80 93 7a 00 	sts	0x007A, r24
				count_timer = 0;
    2648:	10 92 7b 00 	sts	0x007B, r1
				Timer1_setCallBack(TimeOut);
    264c:	87 eb       	ldi	r24, 0xB7	; 183
    264e:	95 e1       	ldi	r25, 0x15	; 21
    2650:	0e 94 59 10 	call	0x20b2	; 0x20b2 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    2654:	8e e7       	ldi	r24, 0x7E	; 126
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <Timer1_init>
				DcMotor_Rotate(CW, 200);
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	68 ec       	ldi	r22, 0xC8	; 200
    2660:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
				while (count_timer < timerValue)
    2664:	90 91 7b 00 	lds	r25, 0x007B
    2668:	80 91 7a 00 	lds	r24, 0x007A
    266c:	98 17       	cp	r25, r24
    266e:	d0 f3       	brcs	.-12     	; 0x2664 <main+0x1e8>
					; //// <<--------------------

				// hold the motor for 3-seconds
				timerValue = DOOR_HOLD_TIME;
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	80 93 7a 00 	sts	0x007A, r24
				count_timer = 0;
    2676:	10 92 7b 00 	sts	0x007B, r1
				Timer1_setCallBack(TimeOut);
    267a:	87 eb       	ldi	r24, 0xB7	; 183
    267c:	95 e1       	ldi	r25, 0x15	; 21
    267e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    2682:	8e e7       	ldi	r24, 0x7E	; 126
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <Timer1_init>
				DcMotor_Rotate(CW, 0);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
				while (count_timer < timerValue)
    2692:	90 91 7b 00 	lds	r25, 0x007B
    2696:	80 91 7a 00 	lds	r24, 0x007A
    269a:	98 17       	cp	r25, r24
    269c:	d0 f3       	brcs	.-12     	; 0x2692 <main+0x216>
					; //// <<--------------------

				// rotates motor for 15-seconds A_CW
				timerValue = DOOR_CLOSE_TIME;
    269e:	8f e0       	ldi	r24, 0x0F	; 15
    26a0:	80 93 7a 00 	sts	0x007A, r24
				count_timer = 0;
    26a4:	10 92 7b 00 	sts	0x007B, r1
				Timer1_setCallBack(TimeOut);
    26a8:	87 eb       	ldi	r24, 0xB7	; 183
    26aa:	95 e1       	ldi	r25, 0x15	; 21
    26ac:	0e 94 59 10 	call	0x20b2	; 0x20b2 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    26b0:	8e e7       	ldi	r24, 0x7E	; 126
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <Timer1_init>
				DcMotor_Rotate(A_CW, 200);
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	68 ec       	ldi	r22, 0xC8	; 200
    26bc:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
				while (count_timer < timerValue)
    26c0:	90 91 7b 00 	lds	r25, 0x007B
    26c4:	80 91 7a 00 	lds	r24, 0x007A
    26c8:	98 17       	cp	r25, r24
    26ca:	d0 f3       	brcs	.-12     	; 0x26c0 <main+0x244>
					; //// <<--------------------

				// stop motor
				DcMotor_Rotate(stop, 0);
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    26d4:	4f cf       	rjmp	.-354    	; 0x2574 <main+0xf8>
			}
			else if (option == '-')
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	8d 32       	cpi	r24, 0x2D	; 45
    26da:	09 f4       	brne	.+2      	; 0x26de <main+0x262>
    26dc:	0e cf       	rjmp	.-484    	; 0x24fa <main+0x7e>
    26de:	4a cf       	rjmp	.-364    	; 0x2574 <main+0xf8>

000026e0 <storePassword>:
/*
 * Description:
 * function to Store the current password in the EEPROM
 */
void storePassword(uint16 address, uint32 password)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	65 97       	sbiw	r28, 0x15	; 21
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	99 8b       	std	Y+17, r25	; 0x11
    26f6:	88 8b       	std	Y+16, r24	; 0x10
    26f8:	4a 8b       	std	Y+18, r20	; 0x12
    26fa:	5b 8b       	std	Y+19, r21	; 0x13
    26fc:	6c 8b       	std	Y+20, r22	; 0x14
    26fe:	7d 8b       	std	Y+21, r23	; 0x15
	uint8 i;
	for (i = 0; i < 4; i++)
    2700:	1f 86       	std	Y+15, r1	; 0x0f
    2702:	97 c0       	rjmp	.+302    	; 0x2832 <storePassword+0x152>
	{
		EEPROM_writeByte(address + i, (password >> (i * 8)) & 0x000000FF);
    2704:	8f 85       	ldd	r24, Y+15	; 0x0f
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	88 89       	ldd	r24, Y+16	; 0x10
    270c:	99 89       	ldd	r25, Y+17	; 0x11
    270e:	a9 01       	movw	r20, r18
    2710:	48 0f       	add	r20, r24
    2712:	59 1f       	adc	r21, r25
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9c 01       	movw	r18, r24
    271c:	22 0f       	add	r18, r18
    271e:	33 1f       	adc	r19, r19
    2720:	22 0f       	add	r18, r18
    2722:	33 1f       	adc	r19, r19
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	8a 89       	ldd	r24, Y+18	; 0x12
    272a:	9b 89       	ldd	r25, Y+19	; 0x13
    272c:	ac 89       	ldd	r26, Y+20	; 0x14
    272e:	bd 89       	ldd	r27, Y+21	; 0x15
    2730:	04 c0       	rjmp	.+8      	; 0x273a <storePassword+0x5a>
    2732:	b6 95       	lsr	r27
    2734:	a7 95       	ror	r26
    2736:	97 95       	ror	r25
    2738:	87 95       	ror	r24
    273a:	2a 95       	dec	r18
    273c:	d2 f7       	brpl	.-12     	; 0x2732 <storePassword+0x52>
    273e:	28 2f       	mov	r18, r24
    2740:	ca 01       	movw	r24, r20
    2742:	62 2f       	mov	r22, r18
    2744:	0e 94 48 06 	call	0xc90	; 0xc90 <EEPROM_writeByte>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e2       	ldi	r26, 0x20	; 32
    274e:	b1 e4       	ldi	r27, 0x41	; 65
    2750:	8b 87       	std	Y+11, r24	; 0x0b
    2752:	9c 87       	std	Y+12, r25	; 0x0c
    2754:	ad 87       	std	Y+13, r26	; 0x0d
    2756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	98 87       	std	Y+8, r25	; 0x08
    2774:	a9 87       	std	Y+9, r26	; 0x09
    2776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <storePassword+0xba>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <storePassword+0x138>
	else if (__tmp > 65535)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <storePassword+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <storePassword+0x11a>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <storePassword+0x108>
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <storePassword+0xfc>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <storePassword+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <storePassword+0x144>
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
 * function to Store the current password in the EEPROM
 */
void storePassword(uint16 address, uint32 password)
{
	uint8 i;
	for (i = 0; i < 4; i++)
    282c:	8f 85       	ldd	r24, Y+15	; 0x0f
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	8f 87       	std	Y+15, r24	; 0x0f
    2832:	8f 85       	ldd	r24, Y+15	; 0x0f
    2834:	84 30       	cpi	r24, 0x04	; 4
    2836:	08 f4       	brcc	.+2      	; 0x283a <storePassword+0x15a>
    2838:	65 cf       	rjmp	.-310    	; 0x2704 <storePassword+0x24>
	{
		EEPROM_writeByte(address + i, (password >> (i * 8)) & 0x000000FF);
		_delay_ms(10);
	}
}
    283a:	65 96       	adiw	r28, 0x15	; 21
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <reStorePassword>:
/*
 * Description:
 * function to Retrieve the password from the EEPROM
 */
void reStorePassword(uint16 address, uint32 *password)
{
    284c:	af 92       	push	r10
    284e:	bf 92       	push	r11
    2850:	cf 92       	push	r12
    2852:	df 92       	push	r13
    2854:	ef 92       	push	r14
    2856:	ff 92       	push	r15
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	a2 97       	sbiw	r28, 0x22	; 34
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	98 a3       	std	Y+32, r25	; 0x20
    2872:	8f 8f       	std	Y+31, r24	; 0x1f
    2874:	7a a3       	std	Y+34, r23	; 0x22
    2876:	69 a3       	std	Y+33, r22	; 0x21
	*password = 0;
    2878:	e9 a1       	ldd	r30, Y+33	; 0x21
    287a:	fa a1       	ldd	r31, Y+34	; 0x22
    287c:	10 82       	st	Z, r1
    287e:	11 82       	std	Z+1, r1	; 0x01
    2880:	12 82       	std	Z+2, r1	; 0x02
    2882:	13 82       	std	Z+3, r1	; 0x03
	uint8 i;
	uint8 byte = 0;
    2884:	1e 8e       	std	Y+30, r1	; 0x1e
	for (i = 0; i < 4; i++)
    2886:	1d 8e       	std	Y+29, r1	; 0x1d
    2888:	ab c0       	rjmp	.+342    	; 0x29e0 <reStorePassword+0x194>
	{
		EEPROM_readByte((address + i), &byte);
    288a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2892:	98 a1       	ldd	r25, Y+32	; 0x20
    2894:	82 0f       	add	r24, r18
    2896:	93 1f       	adc	r25, r19
    2898:	9e 01       	movw	r18, r28
    289a:	22 5e       	subi	r18, 0xE2	; 226
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	b9 01       	movw	r22, r18
    28a0:	0e 94 89 06 	call	0xd12	; 0xd12 <EEPROM_readByte>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a8 e4       	ldi	r26, 0x48	; 72
    28aa:	b2 e4       	ldi	r27, 0x42	; 66
    28ac:	89 8f       	std	Y+25, r24	; 0x19
    28ae:	9a 8f       	std	Y+26, r25	; 0x1a
    28b0:	ab 8f       	std	Y+27, r26	; 0x1b
    28b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	69 8d       	ldd	r22, Y+25	; 0x19
    28b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a ef       	ldi	r20, 0xFA	; 250
    28c2:	54 e4       	ldi	r21, 0x44	; 68
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	8d 8b       	std	Y+21, r24	; 0x15
    28ce:	9e 8b       	std	Y+22, r25	; 0x16
    28d0:	af 8b       	std	Y+23, r26	; 0x17
    28d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d4:	6d 89       	ldd	r22, Y+21	; 0x15
    28d6:	7e 89       	ldd	r23, Y+22	; 0x16
    28d8:	8f 89       	ldd	r24, Y+23	; 0x17
    28da:	98 8d       	ldd	r25, Y+24	; 0x18
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <reStorePassword+0xaa>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 8b       	std	Y+20, r25	; 0x14
    28f2:	8b 8b       	std	Y+19, r24	; 0x13
    28f4:	3f c0       	rjmp	.+126    	; 0x2974 <reStorePassword+0x128>
	else if (__tmp > 65535)
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	3f ef       	ldi	r19, 0xFF	; 255
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	4c f5       	brge	.+82     	; 0x2960 <reStorePassword+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	69 8d       	ldd	r22, Y+25	; 0x19
    2910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9c 8b       	std	Y+20, r25	; 0x14
    2934:	8b 8b       	std	Y+19, r24	; 0x13
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <reStorePassword+0x10a>
    2938:	88 ec       	ldi	r24, 0xC8	; 200
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9a 8b       	std	Y+18, r25	; 0x12
    293e:	89 8b       	std	Y+17, r24	; 0x11
    2940:	89 89       	ldd	r24, Y+17	; 0x11
    2942:	9a 89       	ldd	r25, Y+18	; 0x12
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <reStorePassword+0xf8>
    2948:	9a 8b       	std	Y+18, r25	; 0x12
    294a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294c:	8b 89       	ldd	r24, Y+19	; 0x13
    294e:	9c 89       	ldd	r25, Y+20	; 0x14
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	9c 8b       	std	Y+20, r25	; 0x14
    2954:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	9c 89       	ldd	r25, Y+20	; 0x14
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	69 f7       	brne	.-38     	; 0x2938 <reStorePassword+0xec>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <reStorePassword+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	6d 89       	ldd	r22, Y+21	; 0x15
    2962:	7e 89       	ldd	r23, Y+22	; 0x16
    2964:	8f 89       	ldd	r24, Y+23	; 0x17
    2966:	98 8d       	ldd	r25, Y+24	; 0x18
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9c 8b       	std	Y+20, r25	; 0x14
    2972:	8b 8b       	std	Y+19, r24	; 0x13
    2974:	8b 89       	ldd	r24, Y+19	; 0x13
    2976:	9c 89       	ldd	r25, Y+20	; 0x14
    2978:	98 8b       	std	Y+16, r25	; 0x10
    297a:	8f 87       	std	Y+15, r24	; 0x0f
    297c:	8f 85       	ldd	r24, Y+15	; 0x0f
    297e:	98 89       	ldd	r25, Y+16	; 0x10
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <reStorePassword+0x134>
    2984:	98 8b       	std	Y+16, r25	; 0x10
    2986:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		*password |= ((uint32)byte) << (i * 8);
    2988:	e9 a1       	ldd	r30, Y+33	; 0x21
    298a:	fa a1       	ldd	r31, Y+34	; 0x22
    298c:	e0 80       	ld	r14, Z
    298e:	f1 80       	ldd	r15, Z+1	; 0x01
    2990:	02 81       	ldd	r16, Z+2	; 0x02
    2992:	13 81       	ldd	r17, Z+3	; 0x03
    2994:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	59 01       	movw	r10, r18
    29b2:	6a 01       	movw	r12, r20
    29b4:	04 c0       	rjmp	.+8      	; 0x29be <reStorePassword+0x172>
    29b6:	aa 0c       	add	r10, r10
    29b8:	bb 1c       	adc	r11, r11
    29ba:	cc 1c       	adc	r12, r12
    29bc:	dd 1c       	adc	r13, r13
    29be:	8a 95       	dec	r24
    29c0:	d2 f7       	brpl	.-12     	; 0x29b6 <reStorePassword+0x16a>
    29c2:	d6 01       	movw	r26, r12
    29c4:	c5 01       	movw	r24, r10
    29c6:	8e 29       	or	r24, r14
    29c8:	9f 29       	or	r25, r15
    29ca:	a0 2b       	or	r26, r16
    29cc:	b1 2b       	or	r27, r17
    29ce:	e9 a1       	ldd	r30, Y+33	; 0x21
    29d0:	fa a1       	ldd	r31, Y+34	; 0x22
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
void reStorePassword(uint16 address, uint32 *password)
{
	*password = 0;
	uint8 i;
	uint8 byte = 0;
	for (i = 0; i < 4; i++)
    29da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29dc:	8f 5f       	subi	r24, 0xFF	; 255
    29de:	8d 8f       	std	Y+29, r24	; 0x1d
    29e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e2:	84 30       	cpi	r24, 0x04	; 4
    29e4:	08 f4       	brcc	.+2      	; 0x29e8 <reStorePassword+0x19c>
    29e6:	51 cf       	rjmp	.-350    	; 0x288a <reStorePassword+0x3e>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	a0 ea       	ldi	r26, 0xA0	; 160
    29ee:	b1 e4       	ldi	r27, 0x41	; 65
    29f0:	8b 87       	std	Y+11, r24	; 0x0b
    29f2:	9c 87       	std	Y+12, r25	; 0x0c
    29f4:	ad 87       	std	Y+13, r26	; 0x0d
    29f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	4a ef       	ldi	r20, 0xFA	; 250
    2a06:	54 e4       	ldi	r21, 0x44	; 68
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	8f 83       	std	Y+7, r24	; 0x07
    2a12:	98 87       	std	Y+8, r25	; 0x08
    2a14:	a9 87       	std	Y+9, r26	; 0x09
    2a16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a18:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1a:	78 85       	ldd	r23, Y+8	; 0x08
    2a1c:	89 85       	ldd	r24, Y+9	; 0x09
    2a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e8       	ldi	r20, 0x80	; 128
    2a26:	5f e3       	ldi	r21, 0x3F	; 63
    2a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2c:	88 23       	and	r24, r24
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <reStorePassword+0x1ee>
		__ticks = 1;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	3f c0       	rjmp	.+126    	; 0x2ab8 <reStorePassword+0x26c>
	else if (__tmp > 65535)
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	3f ef       	ldi	r19, 0xFF	; 255
    2a46:	4f e7       	ldi	r20, 0x7F	; 127
    2a48:	57 e4       	ldi	r21, 0x47	; 71
    2a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4e:	18 16       	cp	r1, r24
    2a50:	4c f5       	brge	.+82     	; 0x2aa4 <reStorePassword+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e2       	ldi	r20, 0x20	; 32
    2a60:	51 e4       	ldi	r21, 0x41	; 65
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9e 83       	std	Y+6, r25	; 0x06
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <reStorePassword+0x24e>
    2a7c:	88 ec       	ldi	r24, 0xC8	; 200
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9c 83       	std	Y+4, r25	; 0x04
    2a82:	8b 83       	std	Y+3, r24	; 0x03
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <reStorePassword+0x23c>
    2a8c:	9c 83       	std	Y+4, r25	; 0x04
    2a8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	9e 81       	ldd	r25, Y+6	; 0x06
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	9e 83       	std	Y+6, r25	; 0x06
    2a98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	69 f7       	brne	.-38     	; 0x2a7c <reStorePassword+0x230>
    2aa2:	14 c0       	rjmp	.+40     	; 0x2acc <reStorePassword+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9e 83       	std	Y+6, r25	; 0x06
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	9e 81       	ldd	r25, Y+6	; 0x06
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <reStorePassword+0x278>
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		*password |= ((uint32)byte) << (i * 8);
	}

	_delay_ms(20);
}
    2acc:	a2 96       	adiw	r28, 0x22	; 34
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
    2ae8:	bf 90       	pop	r11
    2aea:	af 90       	pop	r10
    2aec:	08 95       	ret

00002aee <receivePassword>:
/*
 * Description:
 * function to receive the password from the HMI_ECU
 */
void receivePassword(uint32 *password)
{
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <receivePassword+0x6>
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <receivePassword+0x8>
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	8b 83       	std	Y+3, r24	; 0x03
	uint8 recived_byte = 0;
    2afe:	1a 82       	std	Y+2, r1	; 0x02
	*password = 0;
    2b00:	eb 81       	ldd	r30, Y+3	; 0x03
    2b02:	fc 81       	ldd	r31, Y+4	; 0x04
    2b04:	10 82       	st	Z, r1
    2b06:	11 82       	std	Z+1, r1	; 0x01
    2b08:	12 82       	std	Z+2, r1	; 0x02
    2b0a:	13 82       	std	Z+3, r1	; 0x03
	// receive password from the HMI_ECU
	for (uint8 i = 0; i < 5; i++)
    2b0c:	19 82       	std	Y+1, r1	; 0x01
    2b0e:	25 c0       	rjmp	.+74     	; 0x2b5a <receivePassword+0x6c>
	{
		recived_byte = UART_recieveByte();
    2b10:	0e 94 c3 11 	call	0x2386	; 0x2386 <UART_recieveByte>
    2b14:	8a 83       	std	Y+2, r24	; 0x02
		*password = ((*password) * 10) + recived_byte;
    2b16:	eb 81       	ldd	r30, Y+3	; 0x03
    2b18:	fc 81       	ldd	r31, Y+4	; 0x04
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b20:	b3 81       	ldd	r27, Z+3	; 0x03
    2b22:	2a e0       	ldi	r18, 0x0A	; 10
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__mulsi3>
    2b32:	9b 01       	movw	r18, r22
    2b34:	ac 01       	movw	r20, r24
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	88 2f       	mov	r24, r24
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	82 0f       	add	r24, r18
    2b42:	93 1f       	adc	r25, r19
    2b44:	a4 1f       	adc	r26, r20
    2b46:	b5 1f       	adc	r27, r21
    2b48:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4c:	80 83       	st	Z, r24
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	a2 83       	std	Z+2, r26	; 0x02
    2b52:	b3 83       	std	Z+3, r27	; 0x03
void receivePassword(uint32 *password)
{
	uint8 recived_byte = 0;
	*password = 0;
	// receive password from the HMI_ECU
	for (uint8 i = 0; i < 5; i++)
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	89 83       	std	Y+1, r24	; 0x01
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	85 30       	cpi	r24, 0x05	; 5
    2b5e:	c0 f2       	brcs	.-80     	; 0x2b10 <receivePassword+0x22>
	{
		recived_byte = UART_recieveByte();
		*password = ((*password) * 10) + recived_byte;
	}
}
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <TimeOut>:
 * Description:
 * Callback function for the timer function
 * that is called when the timer interrupt occurs
 */
void TimeOut(void)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
	if (count_timer >= timerValue)
    2b76:	90 91 7b 00 	lds	r25, 0x007B
    2b7a:	80 91 7a 00 	lds	r24, 0x007A
    2b7e:	98 17       	cp	r25, r24
    2b80:	18 f0       	brcs	.+6      	; 0x2b88 <TimeOut+0x1a>
	{
		Timer1_deInit();
    2b82:	0e 94 39 10 	call	0x2072	; 0x2072 <Timer1_deInit>
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <TimeOut+0x24>
		return;
	}
	count_timer++;
    2b88:	80 91 7b 00 	lds	r24, 0x007B
    2b8c:	8f 5f       	subi	r24, 0xFF	; 255
    2b8e:	80 93 7b 00 	sts	0x007B, r24
}
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <__mulsi3>:
    2b98:	62 9f       	mul	r22, r18
    2b9a:	d0 01       	movw	r26, r0
    2b9c:	73 9f       	mul	r23, r19
    2b9e:	f0 01       	movw	r30, r0
    2ba0:	82 9f       	mul	r24, r18
    2ba2:	e0 0d       	add	r30, r0
    2ba4:	f1 1d       	adc	r31, r1
    2ba6:	64 9f       	mul	r22, r20
    2ba8:	e0 0d       	add	r30, r0
    2baa:	f1 1d       	adc	r31, r1
    2bac:	92 9f       	mul	r25, r18
    2bae:	f0 0d       	add	r31, r0
    2bb0:	83 9f       	mul	r24, r19
    2bb2:	f0 0d       	add	r31, r0
    2bb4:	74 9f       	mul	r23, r20
    2bb6:	f0 0d       	add	r31, r0
    2bb8:	65 9f       	mul	r22, r21
    2bba:	f0 0d       	add	r31, r0
    2bbc:	99 27       	eor	r25, r25
    2bbe:	72 9f       	mul	r23, r18
    2bc0:	b0 0d       	add	r27, r0
    2bc2:	e1 1d       	adc	r30, r1
    2bc4:	f9 1f       	adc	r31, r25
    2bc6:	63 9f       	mul	r22, r19
    2bc8:	b0 0d       	add	r27, r0
    2bca:	e1 1d       	adc	r30, r1
    2bcc:	f9 1f       	adc	r31, r25
    2bce:	bd 01       	movw	r22, r26
    2bd0:	cf 01       	movw	r24, r30
    2bd2:	11 24       	eor	r1, r1
    2bd4:	08 95       	ret

00002bd6 <__udivmodsi4>:
    2bd6:	a1 e2       	ldi	r26, 0x21	; 33
    2bd8:	1a 2e       	mov	r1, r26
    2bda:	aa 1b       	sub	r26, r26
    2bdc:	bb 1b       	sub	r27, r27
    2bde:	fd 01       	movw	r30, r26
    2be0:	0d c0       	rjmp	.+26     	; 0x2bfc <__udivmodsi4_ep>

00002be2 <__udivmodsi4_loop>:
    2be2:	aa 1f       	adc	r26, r26
    2be4:	bb 1f       	adc	r27, r27
    2be6:	ee 1f       	adc	r30, r30
    2be8:	ff 1f       	adc	r31, r31
    2bea:	a2 17       	cp	r26, r18
    2bec:	b3 07       	cpc	r27, r19
    2bee:	e4 07       	cpc	r30, r20
    2bf0:	f5 07       	cpc	r31, r21
    2bf2:	20 f0       	brcs	.+8      	; 0x2bfc <__udivmodsi4_ep>
    2bf4:	a2 1b       	sub	r26, r18
    2bf6:	b3 0b       	sbc	r27, r19
    2bf8:	e4 0b       	sbc	r30, r20
    2bfa:	f5 0b       	sbc	r31, r21

00002bfc <__udivmodsi4_ep>:
    2bfc:	66 1f       	adc	r22, r22
    2bfe:	77 1f       	adc	r23, r23
    2c00:	88 1f       	adc	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	1a 94       	dec	r1
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <__udivmodsi4_loop>
    2c08:	60 95       	com	r22
    2c0a:	70 95       	com	r23
    2c0c:	80 95       	com	r24
    2c0e:	90 95       	com	r25
    2c10:	9b 01       	movw	r18, r22
    2c12:	ac 01       	movw	r20, r24
    2c14:	bd 01       	movw	r22, r26
    2c16:	cf 01       	movw	r24, r30
    2c18:	08 95       	ret

00002c1a <__prologue_saves__>:
    2c1a:	2f 92       	push	r2
    2c1c:	3f 92       	push	r3
    2c1e:	4f 92       	push	r4
    2c20:	5f 92       	push	r5
    2c22:	6f 92       	push	r6
    2c24:	7f 92       	push	r7
    2c26:	8f 92       	push	r8
    2c28:	9f 92       	push	r9
    2c2a:	af 92       	push	r10
    2c2c:	bf 92       	push	r11
    2c2e:	cf 92       	push	r12
    2c30:	df 92       	push	r13
    2c32:	ef 92       	push	r14
    2c34:	ff 92       	push	r15
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	ca 1b       	sub	r28, r26
    2c44:	db 0b       	sbc	r29, r27
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	09 94       	ijmp

00002c52 <__epilogue_restores__>:
    2c52:	2a 88       	ldd	r2, Y+18	; 0x12
    2c54:	39 88       	ldd	r3, Y+17	; 0x11
    2c56:	48 88       	ldd	r4, Y+16	; 0x10
    2c58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c64:	b9 84       	ldd	r11, Y+9	; 0x09
    2c66:	c8 84       	ldd	r12, Y+8	; 0x08
    2c68:	df 80       	ldd	r13, Y+7	; 0x07
    2c6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c70:	1b 81       	ldd	r17, Y+3	; 0x03
    2c72:	aa 81       	ldd	r26, Y+2	; 0x02
    2c74:	b9 81       	ldd	r27, Y+1	; 0x01
    2c76:	ce 0f       	add	r28, r30
    2c78:	d1 1d       	adc	r29, r1
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	ed 01       	movw	r28, r26
    2c86:	08 95       	ret

00002c88 <itoa>:
    2c88:	fb 01       	movw	r30, r22
    2c8a:	9f 01       	movw	r18, r30
    2c8c:	e8 94       	clt
    2c8e:	42 30       	cpi	r20, 0x02	; 2
    2c90:	c4 f0       	brlt	.+48     	; 0x2cc2 <itoa+0x3a>
    2c92:	45 32       	cpi	r20, 0x25	; 37
    2c94:	b4 f4       	brge	.+44     	; 0x2cc2 <itoa+0x3a>
    2c96:	4a 30       	cpi	r20, 0x0A	; 10
    2c98:	29 f4       	brne	.+10     	; 0x2ca4 <itoa+0x1c>
    2c9a:	97 fb       	bst	r25, 7
    2c9c:	1e f4       	brtc	.+6      	; 0x2ca4 <itoa+0x1c>
    2c9e:	90 95       	com	r25
    2ca0:	81 95       	neg	r24
    2ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca4:	64 2f       	mov	r22, r20
    2ca6:	77 27       	eor	r23, r23
    2ca8:	0e 94 75 16 	call	0x2cea	; 0x2cea <__udivmodhi4>
    2cac:	80 5d       	subi	r24, 0xD0	; 208
    2cae:	8a 33       	cpi	r24, 0x3A	; 58
    2cb0:	0c f0       	brlt	.+2      	; 0x2cb4 <itoa+0x2c>
    2cb2:	89 5d       	subi	r24, 0xD9	; 217
    2cb4:	81 93       	st	Z+, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	a1 f7       	brne	.-24     	; 0x2ca4 <itoa+0x1c>
    2cbc:	16 f4       	brtc	.+4      	; 0x2cc2 <itoa+0x3a>
    2cbe:	5d e2       	ldi	r21, 0x2D	; 45
    2cc0:	51 93       	st	Z+, r21
    2cc2:	10 82       	st	Z, r1
    2cc4:	c9 01       	movw	r24, r18
    2cc6:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <strrev>

00002cca <strrev>:
    2cca:	dc 01       	movw	r26, r24
    2ccc:	fc 01       	movw	r30, r24
    2cce:	67 2f       	mov	r22, r23
    2cd0:	71 91       	ld	r23, Z+
    2cd2:	77 23       	and	r23, r23
    2cd4:	e1 f7       	brne	.-8      	; 0x2cce <strrev+0x4>
    2cd6:	32 97       	sbiw	r30, 0x02	; 2
    2cd8:	04 c0       	rjmp	.+8      	; 0x2ce2 <strrev+0x18>
    2cda:	7c 91       	ld	r23, X
    2cdc:	6d 93       	st	X+, r22
    2cde:	70 83       	st	Z, r23
    2ce0:	62 91       	ld	r22, -Z
    2ce2:	ae 17       	cp	r26, r30
    2ce4:	bf 07       	cpc	r27, r31
    2ce6:	c8 f3       	brcs	.-14     	; 0x2cda <strrev+0x10>
    2ce8:	08 95       	ret

00002cea <__udivmodhi4>:
    2cea:	aa 1b       	sub	r26, r26
    2cec:	bb 1b       	sub	r27, r27
    2cee:	51 e1       	ldi	r21, 0x11	; 17
    2cf0:	07 c0       	rjmp	.+14     	; 0x2d00 <__udivmodhi4_ep>

00002cf2 <__udivmodhi4_loop>:
    2cf2:	aa 1f       	adc	r26, r26
    2cf4:	bb 1f       	adc	r27, r27
    2cf6:	a6 17       	cp	r26, r22
    2cf8:	b7 07       	cpc	r27, r23
    2cfa:	10 f0       	brcs	.+4      	; 0x2d00 <__udivmodhi4_ep>
    2cfc:	a6 1b       	sub	r26, r22
    2cfe:	b7 0b       	sbc	r27, r23

00002d00 <__udivmodhi4_ep>:
    2d00:	88 1f       	adc	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	5a 95       	dec	r21
    2d06:	a9 f7       	brne	.-22     	; 0x2cf2 <__udivmodhi4_loop>
    2d08:	80 95       	com	r24
    2d0a:	90 95       	com	r25
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	08 95       	ret

00002d12 <_exit>:
    2d12:	f8 94       	cli

00002d14 <__stop_program>:
    2d14:	ff cf       	rjmp	.-2      	; 0x2d14 <__stop_program>
