
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000315a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000315a  000031ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800168  00800168  000032f6  2**0
                  ALLOC
  3 .stab         00003a74  00000000  00000000  000032f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ecd  00000000  00000000  00006d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000daf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ddea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__vector_6>
      1c:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 37       	cpi	r26, 0x74	; 116
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e5       	ldi	r30, 0x5A	; 90
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <main>
      8a:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 18 	jmp	0x306e	; 0x306e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 37 18 	jmp	0x306e	; 0x306e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
 * Setup the direction for the buzzer pin as output pin through the
 * GPIO driver.
 * Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Buzzer_on>:
/*
 * Description:
 * Function to enable the Buzzer through the GPIO.
 */
void Buzzer_on(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
	// _delay_ms(200);
	// GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Buzzer_off>:
/*
 * Description:
 * Function to disable the Buzzer through the GPIO.
 */
void Buzzer_off(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DcMotor_Init>:
 * The Function responsible for setup the direction for the two
 * motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */

void DcMotor_Init(void){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, PIN0_ID, PIN_OUTPUT);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN1_ID, PIN_OUTPUT);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>


	/* Motor is stop at the beginning */
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>

}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <DcMotor_Rotate>:
   stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the
   required speed value.
 */

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <DcMotor_Rotate+0x6>
     ebc:	00 d0       	rcall	.+0      	; 0xebe <DcMotor_Rotate+0x8>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3c 83       	std	Y+4, r19	; 0x04
     ece:	2b 83       	std	Y+3, r18	; 0x03
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	a1 f0       	breq	.+40     	; 0xf02 <DcMotor_Rotate+0x4c>
     eda:	2b 81       	ldd	r18, Y+3	; 0x03
     edc:	3c 81       	ldd	r19, Y+4	; 0x04
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	d1 f0       	breq	.+52     	; 0xf18 <DcMotor_Rotate+0x62>
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	01 f5       	brne	.+64     	; 0xf2c <DcMotor_Rotate+0x76>
	case CW:
		/* Motor is rotate CLOCK wise*/
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
     f00:	15 c0       	rjmp	.+42     	; 0xf2c <DcMotor_Rotate+0x76>
		break;
	case A_CW:
		/* Motor is rotate Anti-CLOCK wise*/
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
     f16:	0a c0       	rjmp	.+20     	; 0xf2c <DcMotor_Rotate+0x76>
		break;
	case stop:
		/* Motor is stop */
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>

	/*
	 * Send the required duty cycle to the PWM driver based on the
   	   required speed value.
	 */
	PWM_Timer0_Start(speed);
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	0e 94 a0 07 	call	0xf40	; 0xf40 <PWM_Timer0_Start>

}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <PWM_Timer0_Start>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */

void PWM_Timer0_Start(uint8 duty_cycle){
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
     f4c:	e2 e5       	ldi	r30, 0x52	; 82
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	10 82       	st	Z, r1

	OCR0  = duty_cycle; // Set Compare Value
     f52:	ec e5       	ldi	r30, 0x5C	; 92
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     f5a:	a7 e3       	ldi	r26, 0x37	; 55
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e7 e3       	ldi	r30, 0x37	; 55
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     f68:	e3 e5       	ldi	r30, 0x53	; 83
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	8a e6       	ldi	r24, 0x6A	; 106
     f6e:	80 83       	st	Z, r24
}
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../HAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <EEPROM_writeByte+0x6>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <EEPROM_writeByte+0x8>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit */
    TWI_start();
     f8a:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f8e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
     f92:	88 30       	cpi	r24, 0x08	; 8
     f94:	11 f0       	breq	.+4      	; 0xf9a <EEPROM_writeByte+0x22>
        return ERROR;
     f96:	1c 82       	std	Y+4, r1	; 0x04
     f98:	28 c0       	rjmp	.+80     	; 0xfea <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	80 70       	andi	r24, 0x00	; 0
     fa0:	97 70       	andi	r25, 0x07	; 7
     fa2:	88 0f       	add	r24, r24
     fa4:	89 2f       	mov	r24, r25
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 0b       	sbc	r25, r25
     faa:	91 95       	neg	r25
     fac:	80 6a       	ori	r24, 0xA0	; 160
     fae:	0e 94 14 16 	call	0x2c28	; 0x2c28 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     fb2:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
     fb6:	88 31       	cpi	r24, 0x18	; 24
     fb8:	11 f0       	breq	.+4      	; 0xfbe <EEPROM_writeByte+0x46>
        return ERROR;
     fba:	1c 82       	std	Y+4, r1	; 0x04
     fbc:	16 c0       	rjmp	.+44     	; 0xfea <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fc4:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
     fc8:	88 32       	cpi	r24, 0x28	; 40
     fca:	11 f0       	breq	.+4      	; 0xfd0 <EEPROM_writeByte+0x58>
        return ERROR;
     fcc:	1c 82       	std	Y+4, r1	; 0x04
     fce:	0d c0       	rjmp	.+26     	; 0xfea <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fd6:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
     fda:	88 32       	cpi	r24, 0x28	; 40
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <EEPROM_writeByte+0x6a>
        return ERROR;
     fde:	1c 82       	std	Y+4, r1	; 0x04
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     fe2:	0e 94 09 16 	call	0x2c12	; 0x2c12 <TWI_stop>

    return SUCCESS;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	8c 83       	std	Y+4, r24	; 0x04
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <EEPROM_readByte+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <EEPROM_readByte+0x8>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	7c 83       	std	Y+4, r23	; 0x04
    100e:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit */
    TWI_start();
    1010:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1014:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	11 f0       	breq	.+4      	; 0x1020 <EEPROM_readByte+0x26>
        return ERROR;
    101c:	1d 82       	std	Y+5, r1	; 0x05
    101e:	44 c0       	rjmp	.+136    	; 0x10a8 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	80 70       	andi	r24, 0x00	; 0
    1026:	97 70       	andi	r25, 0x07	; 7
    1028:	88 0f       	add	r24, r24
    102a:	89 2f       	mov	r24, r25
    102c:	88 1f       	adc	r24, r24
    102e:	99 0b       	sbc	r25, r25
    1030:	91 95       	neg	r25
    1032:	80 6a       	ori	r24, 0xA0	; 160
    1034:	0e 94 14 16 	call	0x2c28	; 0x2c28 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1038:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
    103c:	88 31       	cpi	r24, 0x18	; 24
    103e:	11 f0       	breq	.+4      	; 0x1044 <EEPROM_readByte+0x4a>
        return ERROR;
    1040:	1d 82       	std	Y+5, r1	; 0x05
    1042:	32 c0       	rjmp	.+100    	; 0x10a8 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	0e 94 14 16 	call	0x2c28	; 0x2c28 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    104a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
    104e:	88 32       	cpi	r24, 0x28	; 40
    1050:	11 f0       	breq	.+4      	; 0x1056 <EEPROM_readByte+0x5c>
        return ERROR;
    1052:	1d 82       	std	Y+5, r1	; 0x05
    1054:	29 c0       	rjmp	.+82     	; 0x10a8 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1056:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    105a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
    105e:	80 31       	cpi	r24, 0x10	; 16
    1060:	11 f0       	breq	.+4      	; 0x1066 <EEPROM_readByte+0x6c>
        return ERROR;
    1062:	1d 82       	std	Y+5, r1	; 0x05
    1064:	21 c0       	rjmp	.+66     	; 0x10a8 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	80 70       	andi	r24, 0x00	; 0
    106c:	97 70       	andi	r25, 0x07	; 7
    106e:	88 0f       	add	r24, r24
    1070:	89 2f       	mov	r24, r25
    1072:	88 1f       	adc	r24, r24
    1074:	99 0b       	sbc	r25, r25
    1076:	91 95       	neg	r25
    1078:	81 6a       	ori	r24, 0xA1	; 161
    107a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    107e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
    1082:	80 34       	cpi	r24, 0x40	; 64
    1084:	11 f0       	breq	.+4      	; 0x108a <EEPROM_readByte+0x90>
        return ERROR;
    1086:	1d 82       	std	Y+5, r1	; 0x05
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    108a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_readByteWithNACK>
    108e:	eb 81       	ldd	r30, Y+3	; 0x03
    1090:	fc 81       	ldd	r31, Y+4	; 0x04
    1092:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1094:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <TWI_getStatus>
    1098:	88 35       	cpi	r24, 0x58	; 88
    109a:	11 f0       	breq	.+4      	; 0x10a0 <EEPROM_readByte+0xa6>
        return ERROR;
    109c:	1d 82       	std	Y+5, r1	; 0x05
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    10a0:	0e 94 09 16 	call	0x2c12	; 0x2c12 <TWI_stop>

    return SUCCESS;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	60 97       	sbiw	r28, 0x10	; 16
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	64 e0       	ldi	r22, 0x04	; 4
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	65 e0       	ldi	r22, 0x05	; 5
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	66 e0       	ldi	r22, 0x06	; 6
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	67 e0       	ldi	r22, 0x07	; 7
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	63 e0       	ldi	r22, 0x03	; 3
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	64 e0       	ldi	r22, 0x04	; 4
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	65 e0       	ldi	r22, 0x05	; 5
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    111e:	1f 86       	std	Y+15, r1	; 0x0f
    1120:	b4 c0       	rjmp	.+360    	; 0x128a <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1122:	8f 85       	ldd	r24, Y+15	; 0x0f
    1124:	98 2f       	mov	r25, r24
    1126:	9c 5f       	subi	r25, 0xFC	; 252
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	69 2f       	mov	r22, r25
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1132:	8f 85       	ldd	r24, Y+15	; 0x0f
    1134:	98 2f       	mov	r25, r24
    1136:	9c 5f       	subi	r25, 0xFC	; 252
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	69 2f       	mov	r22, r25
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1142:	18 8a       	std	Y+16, r1	; 0x10
    1144:	22 c0       	rjmp	.+68     	; 0x118a <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1146:	88 89       	ldd	r24, Y+16	; 0x10
    1148:	98 2f       	mov	r25, r24
    114a:	9e 5f       	subi	r25, 0xFE	; 254
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	69 2f       	mov	r22, r25
    1150:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <GPIO_readPin>
    1154:	88 23       	and	r24, r24
    1156:	b1 f4       	brne	.+44     	; 0x1184 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1158:	8f 85       	ldd	r24, Y+15	; 0x0f
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	98 2f       	mov	r25, r24
    1168:	88 89       	ldd	r24, Y+16	; 0x10
    116a:	89 0f       	add	r24, r25
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	0e 94 4a 09 	call	0x1294	; 0x1294 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1172:	60 96       	adiw	r28, 0x10	; 16
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1184:	88 89       	ldd	r24, Y+16	; 0x10
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	88 8b       	std	Y+16, r24	; 0x10
    118a:	88 89       	ldd	r24, Y+16	; 0x10
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	d8 f2       	brcs	.-74     	; 0x1146 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1190:	8f 85       	ldd	r24, Y+15	; 0x0f
    1192:	98 2f       	mov	r25, r24
    1194:	9c 5f       	subi	r25, 0xFC	; 252
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	69 2f       	mov	r22, r25
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a0 ea       	ldi	r26, 0xA0	; 160
    11a6:	b0 e4       	ldi	r27, 0x40	; 64
    11a8:	8b 87       	std	Y+11, r24	; 0x0b
    11aa:	9c 87       	std	Y+12, r25	; 0x0c
    11ac:	ad 87       	std	Y+13, r26	; 0x0d
    11ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	4a ef       	ldi	r20, 0xFA	; 250
    11be:	54 e4       	ldi	r21, 0x44	; 68
    11c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	8f 83       	std	Y+7, r24	; 0x07
    11ca:	98 87       	std	Y+8, r25	; 0x08
    11cc:	a9 87       	std	Y+9, r26	; 0x09
    11ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d0:	6f 81       	ldd	r22, Y+7	; 0x07
    11d2:	78 85       	ldd	r23, Y+8	; 0x08
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e8       	ldi	r20, 0x80	; 128
    11de:	5f e3       	ldi	r21, 0x3F	; 63
    11e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11e4:	88 23       	and	r24, r24
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	3f c0       	rjmp	.+126    	; 0x1270 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	3f ef       	ldi	r19, 0xFF	; 255
    11fe:	4f e7       	ldi	r20, 0x7F	; 127
    1200:	57 e4       	ldi	r21, 0x47	; 71
    1202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1206:	18 16       	cp	r1, r24
    1208:	4c f5       	brge	.+82     	; 0x125c <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120a:	6b 85       	ldd	r22, Y+11	; 0x0b
    120c:	7c 85       	ldd	r23, Y+12	; 0x0c
    120e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1210:	9e 85       	ldd	r25, Y+14	; 0x0e
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e2       	ldi	r20, 0x20	; 32
    1218:	51 e4       	ldi	r21, 0x41	; 65
    121a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <KEYPAD_getPressedKey+0x198>
    1234:	88 ec       	ldi	r24, 0xC8	; 200
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <KEYPAD_getPressedKey+0x186>
    1244:	9c 83       	std	Y+4, r25	; 0x04
    1246:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	69 f7       	brne	.-38     	; 0x1234 <KEYPAD_getPressedKey+0x17a>
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125c:	6f 81       	ldd	r22, Y+7	; 0x07
    125e:	78 85       	ldd	r23, Y+8	; 0x08
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9e 83       	std	Y+6, r25	; 0x06
    126e:	8d 83       	std	Y+5, r24	; 0x05
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <KEYPAD_getPressedKey+0x1c2>
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1284:	8f 85       	ldd	r24, Y+15	; 0x0f
    1286:	8f 5f       	subi	r24, 0xFF	; 255
    1288:	8f 87       	std	Y+15, r24	; 0x0f
    128a:	8f 85       	ldd	r24, Y+15	; 0x0f
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f4       	brcc	.+2      	; 0x1292 <KEYPAD_getPressedKey+0x1d8>
    1290:	48 cf       	rjmp	.-368    	; 0x1122 <KEYPAD_getPressedKey+0x68>
    1292:	45 cf       	rjmp	.-374    	; 0x111e <KEYPAD_getPressedKey+0x64>

00001294 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <KEYPAD_4x4_adjustKeyNumber+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <KEYPAD_4x4_adjustKeyNumber+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    12a2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3c 83       	std	Y+4, r19	; 0x04
    12ac:	2b 83       	std	Y+3, r18	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <KEYPAD_4x4_adjustKeyNumber+0x26>
    12b8:	70 c0       	rjmp	.+224    	; 0x139a <KEYPAD_4x4_adjustKeyNumber+0x106>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	29 30       	cpi	r18, 0x09	; 9
    12c0:	31 05       	cpc	r19, r1
    12c2:	5c f5       	brge	.+86     	; 0x131a <KEYPAD_4x4_adjustKeyNumber+0x86>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    12ce:	59 c0       	rjmp	.+178    	; 0x1382 <KEYPAD_4x4_adjustKeyNumber+0xee>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	25 30       	cpi	r18, 0x05	; 5
    12d6:	31 05       	cpc	r19, r1
    12d8:	9c f4       	brge	.+38     	; 0x1300 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	91 05       	cpc	r25, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    12e4:	48 c0       	rjmp	.+144    	; 0x1376 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	23 30       	cpi	r18, 0x03	; 3
    12ec:	31 05       	cpc	r19, r1
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    12f0:	45 c0       	rjmp	.+138    	; 0x137c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	91 05       	cpc	r25, r1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <KEYPAD_4x4_adjustKeyNumber+0x6a>
    12fc:	39 c0       	rjmp	.+114    	; 0x1370 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    12fe:	67 c0       	rjmp	.+206    	; 0x13ce <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	26 30       	cpi	r18, 0x06	; 6
    1306:	31 05       	cpc	r19, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <KEYPAD_4x4_adjustKeyNumber+0x78>
    130a:	41 c0       	rjmp	.+130    	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	87 30       	cpi	r24, 0x07	; 7
    1312:	91 05       	cpc	r25, r1
    1314:	0c f0       	brlt	.+2      	; 0x1318 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1316:	3e c0       	rjmp	.+124    	; 0x1394 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1318:	37 c0       	rjmp	.+110    	; 0x1388 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    131a:	2b 81       	ldd	r18, Y+3	; 0x03
    131c:	3c 81       	ldd	r19, Y+4	; 0x04
    131e:	2c 30       	cpi	r18, 0x0C	; 12
    1320:	31 05       	cpc	r19, r1
    1322:	09 f4       	brne	.+2      	; 0x1326 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1324:	46 c0       	rjmp	.+140    	; 0x13b2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	8d 30       	cpi	r24, 0x0D	; 13
    132c:	91 05       	cpc	r25, r1
    132e:	5c f4       	brge	.+22     	; 0x1346 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	2a 30       	cpi	r18, 0x0A	; 10
    1336:	31 05       	cpc	r19, r1
    1338:	b1 f1       	breq	.+108    	; 0x13a6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	8b 30       	cpi	r24, 0x0B	; 11
    1340:	91 05       	cpc	r25, r1
    1342:	a4 f5       	brge	.+104    	; 0x13ac <KEYPAD_4x4_adjustKeyNumber+0x118>
    1344:	2d c0       	rjmp	.+90     	; 0x13a0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	2e 30       	cpi	r18, 0x0E	; 14
    134c:	31 05       	cpc	r19, r1
    134e:	b9 f1       	breq	.+110    	; 0x13be <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	8e 30       	cpi	r24, 0x0E	; 14
    1356:	91 05       	cpc	r25, r1
    1358:	7c f1       	brlt	.+94     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	2f 30       	cpi	r18, 0x0F	; 15
    1360:	31 05       	cpc	r19, r1
    1362:	79 f1       	breq	.+94     	; 0x13c2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	80 31       	cpi	r24, 0x10	; 16
    136a:	91 05       	cpc	r25, r1
    136c:	69 f1       	breq	.+90     	; 0x13c8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    136e:	2f c0       	rjmp	.+94     	; 0x13ce <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1370:	87 e0       	ldi	r24, 0x07	; 7
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	2e c0       	rjmp	.+92     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1376:	88 e0       	ldi	r24, 0x08	; 8
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	2b c0       	rjmp	.+86     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    137c:	89 e0       	ldi	r24, 0x09	; 9
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	28 c0       	rjmp	.+80     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    1382:	8f e2       	ldi	r24, 0x2F	; 47
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	25 c0       	rjmp	.+74     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	22 c0       	rjmp	.+68     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    138e:	85 e0       	ldi	r24, 0x05	; 5
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	1f c0       	rjmp	.+62     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1394:	86 e0       	ldi	r24, 0x06	; 6
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	1c c0       	rjmp	.+56     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    139a:	8a e2       	ldi	r24, 0x2A	; 42
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	19 c0       	rjmp	.+50     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	16 c0       	rjmp	.+44     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	13 c0       	rjmp	.+38     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	10 c0       	rjmp	.+32     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    13b2:	8d e2       	ldi	r24, 0x2D	; 45
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	0d c0       	rjmp	.+26     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    13b8:	8d e0       	ldi	r24, 0x0D	; 13
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	0a c0       	rjmp	.+20     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    13be:	19 82       	std	Y+1, r1	; 0x01
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    13c2:	8d e3       	ldi	r24, 0x3D	; 61
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    13c8:	8b e2       	ldi	r24, 0x2B	; 43
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	2e 97       	sbiw	r28, 0x0e	; 14
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 ea       	ldi	r26, 0xA0	; 160
    1410:	b1 e4       	ldi	r27, 0x41	; 65
    1412:	8b 87       	std	Y+11, r24	; 0x0b
    1414:	9c 87       	std	Y+12, r25	; 0x0c
    1416:	ad 87       	std	Y+13, r26	; 0x0d
    1418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	6b 85       	ldd	r22, Y+11	; 0x0b
    141c:	7c 85       	ldd	r23, Y+12	; 0x0c
    141e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1420:	9e 85       	ldd	r25, Y+14	; 0x0e
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4a ef       	ldi	r20, 0xFA	; 250
    1428:	54 e4       	ldi	r21, 0x44	; 68
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	8f 83       	std	Y+7, r24	; 0x07
    1434:	98 87       	std	Y+8, r25	; 0x08
    1436:	a9 87       	std	Y+9, r26	; 0x09
    1438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    143a:	6f 81       	ldd	r22, Y+7	; 0x07
    143c:	78 85       	ldd	r23, Y+8	; 0x08
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	2c f4       	brge	.+10     	; 0x145c <LCD_init+0x7a>
		__ticks = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	3f c0       	rjmp	.+126    	; 0x14da <LCD_init+0xf8>
	else if (__tmp > 65535)
    145c:	6f 81       	ldd	r22, Y+7	; 0x07
    145e:	78 85       	ldd	r23, Y+8	; 0x08
    1460:	89 85       	ldd	r24, Y+9	; 0x09
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	3f ef       	ldi	r19, 0xFF	; 255
    1468:	4f e7       	ldi	r20, 0x7F	; 127
    146a:	57 e4       	ldi	r21, 0x47	; 71
    146c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1470:	18 16       	cp	r1, r24
    1472:	4c f5       	brge	.+82     	; 0x14c6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1474:	6b 85       	ldd	r22, Y+11	; 0x0b
    1476:	7c 85       	ldd	r23, Y+12	; 0x0c
    1478:	8d 85       	ldd	r24, Y+13	; 0x0d
    147a:	9e 85       	ldd	r25, Y+14	; 0x0e
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9e 83       	std	Y+6, r25	; 0x06
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <LCD_init+0xda>
    149e:	88 ec       	ldi	r24, 0xC8	; 200
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <LCD_init+0xc8>
    14ae:	9c 83       	std	Y+4, r25	; 0x04
    14b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	69 f7       	brne	.-38     	; 0x149e <LCD_init+0xbc>
    14c4:	14 c0       	rjmp	.+40     	; 0x14ee <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c6:	6f 81       	ldd	r22, Y+7	; 0x07
    14c8:	78 85       	ldd	r23, Y+8	; 0x08
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <LCD_init+0x104>
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	6f ef       	ldi	r22, 0xFF	; 255
    14f2:	0e 94 77 12 	call	0x24ee	; 0x24ee <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    14f6:	88 e3       	ldi	r24, 0x38	; 56
    14f8:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    14fc:	8c e0       	ldi	r24, 0x0C	; 12
    14fe:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_sendCommand>
}
    1508:	2e 96       	adiw	r28, 0x0e	; 14
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	e9 97       	sbiw	r28, 0x39	; 57
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e8       	ldi	r26, 0x80	; 128
    1540:	bf e3       	ldi	r27, 0x3F	; 63
    1542:	8d ab       	std	Y+53, r24	; 0x35
    1544:	9e ab       	std	Y+54, r25	; 0x36
    1546:	af ab       	std	Y+55, r26	; 0x37
    1548:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	6d a9       	ldd	r22, Y+53	; 0x35
    154c:	7e a9       	ldd	r23, Y+54	; 0x36
    154e:	8f a9       	ldd	r24, Y+55	; 0x37
    1550:	98 ad       	ldd	r25, Y+56	; 0x38
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a ef       	ldi	r20, 0xFA	; 250
    1558:	54 e4       	ldi	r21, 0x44	; 68
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	89 ab       	std	Y+49, r24	; 0x31
    1564:	9a ab       	std	Y+50, r25	; 0x32
    1566:	ab ab       	std	Y+51, r26	; 0x33
    1568:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    156a:	69 a9       	ldd	r22, Y+49	; 0x31
    156c:	7a a9       	ldd	r23, Y+50	; 0x32
    156e:	8b a9       	ldd	r24, Y+51	; 0x33
    1570:	9c a9       	ldd	r25, Y+52	; 0x34
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	2c f4       	brge	.+10     	; 0x158c <LCD_sendCommand+0x72>
		__ticks = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	98 ab       	std	Y+48, r25	; 0x30
    1588:	8f a7       	std	Y+47, r24	; 0x2f
    158a:	3f c0       	rjmp	.+126    	; 0x160a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    158c:	69 a9       	ldd	r22, Y+49	; 0x31
    158e:	7a a9       	ldd	r23, Y+50	; 0x32
    1590:	8b a9       	ldd	r24, Y+51	; 0x33
    1592:	9c a9       	ldd	r25, Y+52	; 0x34
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	4c f5       	brge	.+82     	; 0x15f6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	6d a9       	ldd	r22, Y+53	; 0x35
    15a6:	7e a9       	ldd	r23, Y+54	; 0x36
    15a8:	8f a9       	ldd	r24, Y+55	; 0x37
    15aa:	98 ad       	ldd	r25, Y+56	; 0x38
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	98 ab       	std	Y+48, r25	; 0x30
    15ca:	8f a7       	std	Y+47, r24	; 0x2f
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <LCD_sendCommand+0xd2>
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9e a7       	std	Y+46, r25	; 0x2e
    15d4:	8d a7       	std	Y+45, r24	; 0x2d
    15d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <LCD_sendCommand+0xc0>
    15de:	9e a7       	std	Y+46, r25	; 0x2e
    15e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e4:	98 a9       	ldd	r25, Y+48	; 0x30
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	98 ab       	std	Y+48, r25	; 0x30
    15ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ee:	98 a9       	ldd	r25, Y+48	; 0x30
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f7       	brne	.-38     	; 0x15ce <LCD_sendCommand+0xb4>
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	69 a9       	ldd	r22, Y+49	; 0x31
    15f8:	7a a9       	ldd	r23, Y+50	; 0x32
    15fa:	8b a9       	ldd	r24, Y+51	; 0x33
    15fc:	9c a9       	ldd	r25, Y+52	; 0x34
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	98 ab       	std	Y+48, r25	; 0x30
    1608:	8f a7       	std	Y+47, r24	; 0x2f
    160a:	8f a5       	ldd	r24, Y+47	; 0x2f
    160c:	98 a9       	ldd	r25, Y+48	; 0x30
    160e:	9c a7       	std	Y+44, r25	; 0x2c
    1610:	8b a7       	std	Y+43, r24	; 0x2b
    1612:	8b a5       	ldd	r24, Y+43	; 0x2b
    1614:	9c a5       	ldd	r25, Y+44	; 0x2c
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <LCD_sendCommand+0xfc>
    161a:	9c a7       	std	Y+44, r25	; 0x2c
    161c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a0 e8       	ldi	r26, 0x80	; 128
    162e:	bf e3       	ldi	r27, 0x3F	; 63
    1630:	8f a3       	std	Y+39, r24	; 0x27
    1632:	98 a7       	std	Y+40, r25	; 0x28
    1634:	a9 a7       	std	Y+41, r26	; 0x29
    1636:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	6f a1       	ldd	r22, Y+39	; 0x27
    163a:	78 a5       	ldd	r23, Y+40	; 0x28
    163c:	89 a5       	ldd	r24, Y+41	; 0x29
    163e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a ef       	ldi	r20, 0xFA	; 250
    1646:	54 e4       	ldi	r21, 0x44	; 68
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	8b a3       	std	Y+35, r24	; 0x23
    1652:	9c a3       	std	Y+36, r25	; 0x24
    1654:	ad a3       	std	Y+37, r26	; 0x25
    1656:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1658:	6b a1       	ldd	r22, Y+35	; 0x23
    165a:	7c a1       	ldd	r23, Y+36	; 0x24
    165c:	8d a1       	ldd	r24, Y+37	; 0x25
    165e:	9e a1       	ldd	r25, Y+38	; 0x26
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    166c:	88 23       	and	r24, r24
    166e:	2c f4       	brge	.+10     	; 0x167a <LCD_sendCommand+0x160>
		__ticks = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9a a3       	std	Y+34, r25	; 0x22
    1676:	89 a3       	std	Y+33, r24	; 0x21
    1678:	3f c0       	rjmp	.+126    	; 0x16f8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    167a:	6b a1       	ldd	r22, Y+35	; 0x23
    167c:	7c a1       	ldd	r23, Y+36	; 0x24
    167e:	8d a1       	ldd	r24, Y+37	; 0x25
    1680:	9e a1       	ldd	r25, Y+38	; 0x26
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	4c f5       	brge	.+82     	; 0x16e4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	6f a1       	ldd	r22, Y+39	; 0x27
    1694:	78 a5       	ldd	r23, Y+40	; 0x28
    1696:	89 a5       	ldd	r24, Y+41	; 0x29
    1698:	9a a5       	ldd	r25, Y+42	; 0x2a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e2       	ldi	r20, 0x20	; 32
    16a0:	51 e4       	ldi	r21, 0x41	; 65
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9a a3       	std	Y+34, r25	; 0x22
    16b8:	89 a3       	std	Y+33, r24	; 0x21
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <LCD_sendCommand+0x1c0>
    16bc:	88 ec       	ldi	r24, 0xC8	; 200
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	98 a3       	std	Y+32, r25	; 0x20
    16c2:	8f 8f       	std	Y+31, r24	; 0x1f
    16c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16c6:	98 a1       	ldd	r25, Y+32	; 0x20
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <LCD_sendCommand+0x1ae>
    16cc:	98 a3       	std	Y+32, r25	; 0x20
    16ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d0:	89 a1       	ldd	r24, Y+33	; 0x21
    16d2:	9a a1       	ldd	r25, Y+34	; 0x22
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9a a3       	std	Y+34, r25	; 0x22
    16d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	89 a1       	ldd	r24, Y+33	; 0x21
    16dc:	9a a1       	ldd	r25, Y+34	; 0x22
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	69 f7       	brne	.-38     	; 0x16bc <LCD_sendCommand+0x1a2>
    16e2:	14 c0       	rjmp	.+40     	; 0x170c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e4:	6b a1       	ldd	r22, Y+35	; 0x23
    16e6:	7c a1       	ldd	r23, Y+36	; 0x24
    16e8:	8d a1       	ldd	r24, Y+37	; 0x25
    16ea:	9e a1       	ldd	r25, Y+38	; 0x26
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9a a3       	std	Y+34, r25	; 0x22
    16f6:	89 a3       	std	Y+33, r24	; 0x21
    16f8:	89 a1       	ldd	r24, Y+33	; 0x21
    16fa:	9a a1       	ldd	r25, Y+34	; 0x22
    16fc:	9e 8f       	std	Y+30, r25	; 0x1e
    16fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1702:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCD_sendCommand+0x1ea>
    1708:	9e 8f       	std	Y+30, r25	; 0x1e
    170a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	69 ad       	ldd	r22, Y+57	; 0x39
    1710:	0e 94 bb 12 	call	0x2576	; 0x2576 <GPIO_writePort>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e8       	ldi	r26, 0x80	; 128
    171a:	bf e3       	ldi	r27, 0x3F	; 63
    171c:	89 8f       	std	Y+25, r24	; 0x19
    171e:	9a 8f       	std	Y+26, r25	; 0x1a
    1720:	ab 8f       	std	Y+27, r26	; 0x1b
    1722:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	69 8d       	ldd	r22, Y+25	; 0x19
    1726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    172a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8d 8b       	std	Y+21, r24	; 0x15
    173e:	9e 8b       	std	Y+22, r25	; 0x16
    1740:	af 8b       	std	Y+23, r26	; 0x17
    1742:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1744:	6d 89       	ldd	r22, Y+21	; 0x15
    1746:	7e 89       	ldd	r23, Y+22	; 0x16
    1748:	8f 89       	ldd	r24, Y+23	; 0x17
    174a:	98 8d       	ldd	r25, Y+24	; 0x18
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <LCD_sendCommand+0x24c>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1766:	6d 89       	ldd	r22, Y+21	; 0x15
    1768:	7e 89       	ldd	r23, Y+22	; 0x16
    176a:	8f 89       	ldd	r24, Y+23	; 0x17
    176c:	98 8d       	ldd	r25, Y+24	; 0x18
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	69 8d       	ldd	r22, Y+25	; 0x19
    1780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9c 8b       	std	Y+20, r25	; 0x14
    17a4:	8b 8b       	std	Y+19, r24	; 0x13
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <LCD_sendCommand+0x2ac>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9a 8b       	std	Y+18, r25	; 0x12
    17ae:	89 8b       	std	Y+17, r24	; 0x11
    17b0:	89 89       	ldd	r24, Y+17	; 0x11
    17b2:	9a 89       	ldd	r25, Y+18	; 0x12
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_sendCommand+0x29a>
    17b8:	9a 8b       	std	Y+18, r25	; 0x12
    17ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8b 89       	ldd	r24, Y+19	; 0x13
    17be:	9c 89       	ldd	r25, Y+20	; 0x14
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9c 8b       	std	Y+20, r25	; 0x14
    17c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <LCD_sendCommand+0x28e>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6d 89       	ldd	r22, Y+21	; 0x15
    17d2:	7e 89       	ldd	r23, Y+22	; 0x16
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
    17d6:	98 8d       	ldd	r25, Y+24	; 0x18
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9c 8b       	std	Y+20, r25	; 0x14
    17e2:	8b 8b       	std	Y+19, r24	; 0x13
    17e4:	8b 89       	ldd	r24, Y+19	; 0x13
    17e6:	9c 89       	ldd	r25, Y+20	; 0x14
    17e8:	98 8b       	std	Y+16, r25	; 0x10
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
    17ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ee:	98 89       	ldd	r25, Y+16	; 0x10
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_sendCommand+0x2d6>
    17f4:	98 8b       	std	Y+16, r25	; 0x10
    17f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e8       	ldi	r26, 0x80	; 128
    1808:	bf e3       	ldi	r27, 0x3F	; 63
    180a:	8b 87       	std	Y+11, r24	; 0x0b
    180c:	9c 87       	std	Y+12, r25	; 0x0c
    180e:	ad 87       	std	Y+13, r26	; 0x0d
    1810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6b 85       	ldd	r22, Y+11	; 0x0b
    1814:	7c 85       	ldd	r23, Y+12	; 0x0c
    1816:	8d 85       	ldd	r24, Y+13	; 0x0d
    1818:	9e 85       	ldd	r25, Y+14	; 0x0e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	98 87       	std	Y+8, r25	; 0x08
    182e:	a9 87       	std	Y+9, r26	; 0x09
    1830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <LCD_sendCommand+0x33a>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6b 85       	ldd	r22, Y+11	; 0x0b
    186e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <LCD_sendCommand+0x39a>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_sendCommand+0x388>
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <LCD_sendCommand+0x37c>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <LCD_sendCommand+0x3c4>
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18e6:	e9 96       	adiw	r28, 0x39	; 57
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	e9 97       	sbiw	r28, 0x39	; 57
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a0 e8       	ldi	r26, 0x80	; 128
    191e:	bf e3       	ldi	r27, 0x3F	; 63
    1920:	8d ab       	std	Y+53, r24	; 0x35
    1922:	9e ab       	std	Y+54, r25	; 0x36
    1924:	af ab       	std	Y+55, r26	; 0x37
    1926:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1928:	6d a9       	ldd	r22, Y+53	; 0x35
    192a:	7e a9       	ldd	r23, Y+54	; 0x36
    192c:	8f a9       	ldd	r24, Y+55	; 0x37
    192e:	98 ad       	ldd	r25, Y+56	; 0x38
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4a ef       	ldi	r20, 0xFA	; 250
    1936:	54 e4       	ldi	r21, 0x44	; 68
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	89 ab       	std	Y+49, r24	; 0x31
    1942:	9a ab       	std	Y+50, r25	; 0x32
    1944:	ab ab       	std	Y+51, r26	; 0x33
    1946:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1948:	69 a9       	ldd	r22, Y+49	; 0x31
    194a:	7a a9       	ldd	r23, Y+50	; 0x32
    194c:	8b a9       	ldd	r24, Y+51	; 0x33
    194e:	9c a9       	ldd	r25, Y+52	; 0x34
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	5f e3       	ldi	r21, 0x3F	; 63
    1958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    195c:	88 23       	and	r24, r24
    195e:	2c f4       	brge	.+10     	; 0x196a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	98 ab       	std	Y+48, r25	; 0x30
    1966:	8f a7       	std	Y+47, r24	; 0x2f
    1968:	3f c0       	rjmp	.+126    	; 0x19e8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    196a:	69 a9       	ldd	r22, Y+49	; 0x31
    196c:	7a a9       	ldd	r23, Y+50	; 0x32
    196e:	8b a9       	ldd	r24, Y+51	; 0x33
    1970:	9c a9       	ldd	r25, Y+52	; 0x34
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	3f ef       	ldi	r19, 0xFF	; 255
    1976:	4f e7       	ldi	r20, 0x7F	; 127
    1978:	57 e4       	ldi	r21, 0x47	; 71
    197a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    197e:	18 16       	cp	r1, r24
    1980:	4c f5       	brge	.+82     	; 0x19d4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1982:	6d a9       	ldd	r22, Y+53	; 0x35
    1984:	7e a9       	ldd	r23, Y+54	; 0x36
    1986:	8f a9       	ldd	r24, Y+55	; 0x37
    1988:	98 ad       	ldd	r25, Y+56	; 0x38
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	bc 01       	movw	r22, r24
    199c:	cd 01       	movw	r24, r26
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	98 ab       	std	Y+48, r25	; 0x30
    19a8:	8f a7       	std	Y+47, r24	; 0x2f
    19aa:	0f c0       	rjmp	.+30     	; 0x19ca <LCD_displayCharacter+0xd2>
    19ac:	88 ec       	ldi	r24, 0xC8	; 200
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9e a7       	std	Y+46, r25	; 0x2e
    19b2:	8d a7       	std	Y+45, r24	; 0x2d
    19b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <LCD_displayCharacter+0xc0>
    19bc:	9e a7       	std	Y+46, r25	; 0x2e
    19be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c2:	98 a9       	ldd	r25, Y+48	; 0x30
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	98 ab       	std	Y+48, r25	; 0x30
    19c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    19cc:	98 a9       	ldd	r25, Y+48	; 0x30
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	69 f7       	brne	.-38     	; 0x19ac <LCD_displayCharacter+0xb4>
    19d2:	14 c0       	rjmp	.+40     	; 0x19fc <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d4:	69 a9       	ldd	r22, Y+49	; 0x31
    19d6:	7a a9       	ldd	r23, Y+50	; 0x32
    19d8:	8b a9       	ldd	r24, Y+51	; 0x33
    19da:	9c a9       	ldd	r25, Y+52	; 0x34
    19dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	98 ab       	std	Y+48, r25	; 0x30
    19e6:	8f a7       	std	Y+47, r24	; 0x2f
    19e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ea:	98 a9       	ldd	r25, Y+48	; 0x30
    19ec:	9c a7       	std	Y+44, r25	; 0x2c
    19ee:	8b a7       	std	Y+43, r24	; 0x2b
    19f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <LCD_displayCharacter+0xfc>
    19f8:	9c a7       	std	Y+44, r25	; 0x2c
    19fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a0 e8       	ldi	r26, 0x80	; 128
    1a0c:	bf e3       	ldi	r27, 0x3F	; 63
    1a0e:	8f a3       	std	Y+39, r24	; 0x27
    1a10:	98 a7       	std	Y+40, r25	; 0x28
    1a12:	a9 a7       	std	Y+41, r26	; 0x29
    1a14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	6f a1       	ldd	r22, Y+39	; 0x27
    1a18:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	4a ef       	ldi	r20, 0xFA	; 250
    1a24:	54 e4       	ldi	r21, 0x44	; 68
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	8b a3       	std	Y+35, r24	; 0x23
    1a30:	9c a3       	std	Y+36, r25	; 0x24
    1a32:	ad a3       	std	Y+37, r26	; 0x25
    1a34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a36:	6b a1       	ldd	r22, Y+35	; 0x23
    1a38:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9a a3       	std	Y+34, r25	; 0x22
    1a54:	89 a3       	std	Y+33, r24	; 0x21
    1a56:	3f c0       	rjmp	.+126    	; 0x1ad6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1a58:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	3f ef       	ldi	r19, 0xFF	; 255
    1a64:	4f e7       	ldi	r20, 0x7F	; 127
    1a66:	57 e4       	ldi	r21, 0x47	; 71
    1a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	4c f5       	brge	.+82     	; 0x1ac2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	6f a1       	ldd	r22, Y+39	; 0x27
    1a72:	78 a5       	ldd	r23, Y+40	; 0x28
    1a74:	89 a5       	ldd	r24, Y+41	; 0x29
    1a76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e2       	ldi	r20, 0x20	; 32
    1a7e:	51 e4       	ldi	r21, 0x41	; 65
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9a a3       	std	Y+34, r25	; 0x22
    1a96:	89 a3       	std	Y+33, r24	; 0x21
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <LCD_displayCharacter+0x1c0>
    1a9a:	88 ec       	ldi	r24, 0xC8	; 200
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	98 a3       	std	Y+32, r25	; 0x20
    1aa0:	8f 8f       	std	Y+31, r24	; 0x1f
    1aa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa4:	98 a1       	ldd	r25, Y+32	; 0x20
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <LCD_displayCharacter+0x1ae>
    1aaa:	98 a3       	std	Y+32, r25	; 0x20
    1aac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aae:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	9a a3       	std	Y+34, r25	; 0x22
    1ab6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	69 f7       	brne	.-38     	; 0x1a9a <LCD_displayCharacter+0x1a2>
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9a a3       	std	Y+34, r25	; 0x22
    1ad4:	89 a3       	std	Y+33, r24	; 0x21
    1ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ada:	9e 8f       	std	Y+30, r25	; 0x1e
    1adc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ade:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ae0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_displayCharacter+0x1ea>
    1ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	69 ad       	ldd	r22, Y+57	; 0x39
    1aee:	0e 94 bb 12 	call	0x2576	; 0x2576 <GPIO_writePort>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a0 e8       	ldi	r26, 0x80	; 128
    1af8:	bf e3       	ldi	r27, 0x3F	; 63
    1afa:	89 8f       	std	Y+25, r24	; 0x19
    1afc:	9a 8f       	std	Y+26, r25	; 0x1a
    1afe:	ab 8f       	std	Y+27, r26	; 0x1b
    1b00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b02:	69 8d       	ldd	r22, Y+25	; 0x19
    1b04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4a ef       	ldi	r20, 0xFA	; 250
    1b10:	54 e4       	ldi	r21, 0x44	; 68
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	8d 8b       	std	Y+21, r24	; 0x15
    1b1c:	9e 8b       	std	Y+22, r25	; 0x16
    1b1e:	af 8b       	std	Y+23, r26	; 0x17
    1b20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b22:	6d 89       	ldd	r22, Y+21	; 0x15
    1b24:	7e 89       	ldd	r23, Y+22	; 0x16
    1b26:	8f 89       	ldd	r24, Y+23	; 0x17
    1b28:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e8       	ldi	r20, 0x80	; 128
    1b30:	5f e3       	ldi	r21, 0x3F	; 63
    1b32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b36:	88 23       	and	r24, r24
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 8b       	std	Y+20, r25	; 0x14
    1b40:	8b 8b       	std	Y+19, r24	; 0x13
    1b42:	3f c0       	rjmp	.+126    	; 0x1bc2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1b44:	6d 89       	ldd	r22, Y+21	; 0x15
    1b46:	7e 89       	ldd	r23, Y+22	; 0x16
    1b48:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	3f ef       	ldi	r19, 0xFF	; 255
    1b50:	4f e7       	ldi	r20, 0x7F	; 127
    1b52:	57 e4       	ldi	r21, 0x47	; 71
    1b54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	4c f5       	brge	.+82     	; 0x1bae <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9c 8b       	std	Y+20, r25	; 0x14
    1b82:	8b 8b       	std	Y+19, r24	; 0x13
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <LCD_displayCharacter+0x2ac>
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9a 8b       	std	Y+18, r25	; 0x12
    1b8c:	89 8b       	std	Y+17, r24	; 0x11
    1b8e:	89 89       	ldd	r24, Y+17	; 0x11
    1b90:	9a 89       	ldd	r25, Y+18	; 0x12
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_displayCharacter+0x29a>
    1b96:	9a 8b       	std	Y+18, r25	; 0x12
    1b98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	9c 8b       	std	Y+20, r25	; 0x14
    1ba2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <LCD_displayCharacter+0x28e>
    1bac:	14 c0       	rjmp	.+40     	; 0x1bd6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9c 8b       	std	Y+20, r25	; 0x14
    1bc0:	8b 8b       	std	Y+19, r24	; 0x13
    1bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc6:	98 8b       	std	Y+16, r25	; 0x10
    1bc8:	8f 87       	std	Y+15, r24	; 0x0f
    1bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bcc:	98 89       	ldd	r25, Y+16	; 0x10
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_displayCharacter+0x2d6>
    1bd2:	98 8b       	std	Y+16, r25	; 0x10
    1bd4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <GPIO_writePin>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e8       	ldi	r26, 0x80	; 128
    1be6:	bf e3       	ldi	r27, 0x3F	; 63
    1be8:	8b 87       	std	Y+11, r24	; 0x0b
    1bea:	9c 87       	std	Y+12, r25	; 0x0c
    1bec:	ad 87       	std	Y+13, r26	; 0x0d
    1bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8f 83       	std	Y+7, r24	; 0x07
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	a9 87       	std	Y+9, r26	; 0x09
    1c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1c32:	6f 81       	ldd	r22, Y+7	; 0x07
    1c34:	78 85       	ldd	r23, Y+8	; 0x08
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_displayCharacter+0x39a>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_displayCharacter+0x388>
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_displayCharacter+0x37c>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_displayCharacter+0x3c4>
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cc4:	e9 96       	adiw	r28, 0x39	; 57
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <LCD_displayString+0x6>
    1cdc:	0f 92       	push	r0
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	9b 83       	std	Y+3, r25	; 0x03
    1ce4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
    1ce8:	0e c0       	rjmp	.+28     	; 0x1d06 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	e2 0f       	add	r30, r18
    1cf8:	f3 1f       	adc	r31, r19
    1cfa:	80 81       	ld	r24, Z
    1cfc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LCD_displayCharacter>
		i++;
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	8f 5f       	subi	r24, 0xFF	; 255
    1d04:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d10:	fc 01       	movw	r30, r24
    1d12:	e2 0f       	add	r30, r18
    1d14:	f3 1f       	adc	r31, r19
    1d16:	80 81       	ld	r24, Z
    1d18:	88 23       	and	r24, r24
    1d1a:	39 f7       	brne	.-50     	; 0x1cea <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <LCD_moveCursor+0x6>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <LCD_moveCursor+0x8>
    1d30:	0f 92       	push	r0
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	8a 83       	std	Y+2, r24	; 0x02
    1d38:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3d 83       	std	Y+5, r19	; 0x05
    1d42:	2c 83       	std	Y+4, r18	; 0x04
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	c1 f0       	breq	.+48     	; 0x1d7e <LCD_moveCursor+0x56>
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <LCD_moveCursor+0x3a>
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <LCD_moveCursor+0x50>
    1d60:	19 c0       	rjmp	.+50     	; 0x1d94 <LCD_moveCursor+0x6c>
    1d62:	2c 81       	ldd	r18, Y+4	; 0x04
    1d64:	3d 81       	ldd	r19, Y+5	; 0x05
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	69 f0       	breq	.+26     	; 0x1d86 <LCD_moveCursor+0x5e>
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	91 05       	cpc	r25, r1
    1d74:	61 f0       	breq	.+24     	; 0x1d8e <LCD_moveCursor+0x66>
    1d76:	0e c0       	rjmp	.+28     	; 0x1d94 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	0b c0       	rjmp	.+22     	; 0x1d94 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	80 5c       	subi	r24, 0xC0	; 192
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	07 c0       	rjmp	.+14     	; 0x1d94 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	80 5f       	subi	r24, 0xF0	; 240
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	80 5b       	subi	r24, 0xB0	; 176
    1d92:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	80 68       	ori	r24, 0x80	; 128
    1d98:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_sendCommand>
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <LCD_displayStringRowColumn+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <LCD_displayStringRowColumn+0x8>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	6a 83       	std	Y+2, r22	; 0x02
    1dbc:	5c 83       	std	Y+4, r21	; 0x04
    1dbe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	6a 81       	ldd	r22, Y+2	; 0x02
    1dc4:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_displayString>
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	62 97       	sbiw	r28, 0x12	; 18
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	9a 8b       	std	Y+18, r25	; 0x12
    1df4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1df6:	89 89       	ldd	r24, Y+17	; 0x11
    1df8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dfa:	9e 01       	movw	r18, r28
    1dfc:	2f 5f       	subi	r18, 0xFF	; 255
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	b9 01       	movw	r22, r18
    1e02:	4a e0       	ldi	r20, 0x0A	; 10
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	0e 94 66 18 	call	0x30cc	; 0x30cc <itoa>
	LCD_displayString(buff); /* Display the string */
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_displayString>
}
    1e12:	62 96       	adiw	r28, 0x12	; 18
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_sendCommand>
}
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <LCD_shiftScreenRight>:
/*
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenRight(uint8 numOfChars)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <LCD_shiftScreenRight+0x6>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <LCD_shiftScreenRight+0x14>
	while(numOfChars--)
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT); /* Send clear display command */
    1e46:	8c e1       	ldi	r24, 0x1C	; 28
    1e48:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_sendCommand>
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenRight(uint8 numOfChars)
{
	while(numOfChars--)
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	88 23       	and	r24, r24
    1e54:	11 f0       	breq	.+4      	; 0x1e5a <LCD_shiftScreenRight+0x22>
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	99 81       	ldd	r25, Y+1	; 0x01
    1e5e:	91 50       	subi	r25, 0x01	; 1
    1e60:	99 83       	std	Y+1, r25	; 0x01
    1e62:	88 23       	and	r24, r24
    1e64:	81 f7       	brne	.-32     	; 0x1e46 <LCD_shiftScreenRight+0xe>
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT); /* Send clear display command */
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <LCD_shiftScreenLeft>:
/*
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenLeft(uint8 numOfChars)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <LCD_shiftScreenLeft+0x6>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <LCD_shiftScreenLeft+0x14>
	while(numOfChars--)
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT); /* Send clear display command */
    1e7e:	88 e1       	ldi	r24, 0x18	; 24
    1e80:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_sendCommand>
 * Description :
 * Send the shift screen right command
 */
void LCD_shiftScreenLeft(uint8 numOfChars)
{
	while(numOfChars--)
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	8a 83       	std	Y+2, r24	; 0x02
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	88 23       	and	r24, r24
    1e8c:	11 f0       	breq	.+4      	; 0x1e92 <LCD_shiftScreenLeft+0x22>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	99 81       	ldd	r25, Y+1	; 0x01
    1e96:	91 50       	subi	r25, 0x01	; 1
    1e98:	99 83       	std	Y+1, r25	; 0x01
    1e9a:	88 23       	and	r24, r24
    1e9c:	81 f7       	brne	.-32     	; 0x1e7e <LCD_shiftScreenLeft+0xe>
		LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT); /* Send clear display command */
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LM35_getTemperature>:
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */

uint8 LM35_getTemperature(void)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <LM35_getTemperature+0x6>
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    1eb4:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    1eb6:	1a 82       	std	Y+2, r1	; 0x02
    1eb8:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <ADC_readChannel>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value * SENSOR_MAX_TEMPERATURE * ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE));
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	cc 01       	movw	r24, r24
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	26 e9       	ldi	r18, 0x96	; 150
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__mulsi3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	37 ed       	ldi	r19, 0xD7	; 215
    1ef6:	43 e2       	ldi	r20, 0x23	; 35
    1ef8:	50 e4       	ldi	r21, 0x40	; 64
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 ed       	ldi	r19, 0xD0	; 208
    1f0a:	4f eb       	ldi	r20, 0xBF	; 191
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <ADC_init>:
 *******************************************************************************/

#include "adc.h"


void ADC_init(const ADC_ConfigType * Config_Ptr){
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <ADC_init+0x6>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= ((Config_Ptr->V_reference)<<6);
    1f40:	a7 e2       	ldi	r26, 0x27	; 39
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e7 e2       	ldi	r30, 0x27	; 39
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	80 81       	ld	r24, Z
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	00 24       	eor	r0, r0
    1f58:	96 95       	lsr	r25
    1f5a:	87 95       	ror	r24
    1f5c:	07 94       	ror	r0
    1f5e:	96 95       	lsr	r25
    1f60:	87 95       	ror	r24
    1f62:	07 94       	ror	r0
    1f64:	98 2f       	mov	r25, r24
    1f66:	80 2d       	mov	r24, r0
    1f68:	82 2b       	or	r24, r18
    1f6a:	8c 93       	st	X, r24

	// Choose the ADC0 as default channel
	ADMUX |= (Config_Ptr->ch_number);
    1f6c:	a7 e2       	ldi	r26, 0x27	; 39
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e7 e2       	ldi	r30, 0x27	; 39
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	90 81       	ld	r25, Z
    1f76:	e9 81       	ldd	r30, Y+1	; 0x01
    1f78:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7a:	81 81       	ldd	r24, Z+1	; 0x01
    1f7c:	89 2b       	or	r24, r25
    1f7e:	8c 93       	st	X, r24
	// Enable the ADC
	SET_BIT(ADCSRA,ADEN);
    1f80:	a6 e2       	ldi	r26, 0x26	; 38
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e6 e2       	ldi	r30, 0x26	; 38
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	80 68       	ori	r24, 0x80	; 128
    1f8c:	8c 93       	st	X, r24
	/*
	//Disable ADC Interrupts
	CLEAR_BIT(ADCSRA,ADIE);
	*/
	//Adjust PreScaler
	ADCSRA |= (Config_Ptr->clock);
    1f8e:	a6 e2       	ldi	r26, 0x26	; 38
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e6 e2       	ldi	r30, 0x26	; 38
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	90 81       	ld	r25, Z
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	89 2b       	or	r24, r25
    1fa0:	8c 93       	st	X, r24
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <ADC_readChannel>:


uint16 ADC_readChannel(uint8 ch_num){
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	0f 92       	push	r0
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	89 83       	std	Y+1, r24	; 0x01
	// set channel number
	ADMUX = (ADMUX & 0xE0) | (ch_num & 0x1F);
    1fb8:	a7 e2       	ldi	r26, 0x27	; 39
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e7 e2       	ldi	r30, 0x27	; 39
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	90 7e       	andi	r25, 0xE0	; 224
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	8f 71       	andi	r24, 0x1F	; 31
    1fca:	89 2b       	or	r24, r25
    1fcc:	8c 93       	st	X, r24

	// Start the conversion
	SET_BIT(ADCSRA,ADSC);
    1fce:	a6 e2       	ldi	r26, 0x26	; 38
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e6 e2       	ldi	r30, 0x26	; 38
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	80 64       	ori	r24, 0x40	; 64
    1fda:	8c 93       	st	X, r24

	// Polling Until ADIF = 1
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
    1fdc:	e6 e2       	ldi	r30, 0x26	; 38
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	80 71       	andi	r24, 0x10	; 16
    1fe8:	90 70       	andi	r25, 0x00	; 0
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	b9 f3       	breq	.-18     	; 0x1fdc <ADC_readChannel+0x30>

	// clear flag ADIF
	SET_BIT(ADCSRA, ADIF);
    1fee:	a6 e2       	ldi	r26, 0x26	; 38
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e6 e2       	ldi	r30, 0x26	; 38
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	80 61       	ori	r24, 0x10	; 16
    1ffa:	8c 93       	st	X, r24

	// return DATA in ADC register
	return ADC;
    1ffc:	e4 e2       	ldi	r30, 0x24	; 36
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
}
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <GPIO_setupPinDirection+0x6>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <GPIO_setupPinDirection+0x8>
    2014:	0f 92       	push	r0
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	6a 83       	std	Y+2, r22	; 0x02
    201e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	88 30       	cpi	r24, 0x08	; 8
    2024:	08 f0       	brcs	.+2      	; 0x2028 <GPIO_setupPinDirection+0x1c>
    2026:	d5 c0       	rjmp	.+426    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	84 30       	cpi	r24, 0x04	; 4
    202c:	08 f0       	brcs	.+2      	; 0x2030 <GPIO_setupPinDirection+0x24>
    202e:	d1 c0       	rjmp	.+418    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	3d 83       	std	Y+5, r19	; 0x05
    2038:	2c 83       	std	Y+4, r18	; 0x04
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	9d 81       	ldd	r25, Y+5	; 0x05
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	91 05       	cpc	r25, r1
    2042:	09 f4       	brne	.+2      	; 0x2046 <GPIO_setupPinDirection+0x3a>
    2044:	43 c0       	rjmp	.+134    	; 0x20cc <GPIO_setupPinDirection+0xc0>
    2046:	2c 81       	ldd	r18, Y+4	; 0x04
    2048:	3d 81       	ldd	r19, Y+5	; 0x05
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	2c f4       	brge	.+10     	; 0x205a <GPIO_setupPinDirection+0x4e>
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	71 f0       	breq	.+28     	; 0x2074 <GPIO_setupPinDirection+0x68>
    2058:	bc c0       	rjmp	.+376    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
    205a:	2c 81       	ldd	r18, Y+4	; 0x04
    205c:	3d 81       	ldd	r19, Y+5	; 0x05
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <GPIO_setupPinDirection+0x5a>
    2064:	5f c0       	rjmp	.+190    	; 0x2124 <GPIO_setupPinDirection+0x118>
    2066:	8c 81       	ldd	r24, Y+4	; 0x04
    2068:	9d 81       	ldd	r25, Y+5	; 0x05
    206a:	83 30       	cpi	r24, 0x03	; 3
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <GPIO_setupPinDirection+0x66>
    2070:	85 c0       	rjmp	.+266    	; 0x217c <GPIO_setupPinDirection+0x170>
    2072:	af c0       	rjmp	.+350    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	a1 f4       	brne	.+40     	; 0x20a2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    207a:	aa e3       	ldi	r26, 0x3A	; 58
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	ea e3       	ldi	r30, 0x3A	; 58
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	48 2f       	mov	r20, r24
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 2e       	mov	r0, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <GPIO_setupPinDirection+0x8c>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	0a 94       	dec	r0
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <GPIO_setupPinDirection+0x88>
    209c:	84 2b       	or	r24, r20
    209e:	8c 93       	st	X, r24
    20a0:	98 c0       	rjmp	.+304    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    20a2:	aa e3       	ldi	r26, 0x3A	; 58
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ea e3       	ldi	r30, 0x3A	; 58
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	48 2f       	mov	r20, r24
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	02 2e       	mov	r0, r18
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <GPIO_setupPinDirection+0xb4>
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	0a 94       	dec	r0
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <GPIO_setupPinDirection+0xb0>
    20c4:	80 95       	com	r24
    20c6:	84 23       	and	r24, r20
    20c8:	8c 93       	st	X, r24
    20ca:	83 c0       	rjmp	.+262    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	a1 f4       	brne	.+40     	; 0x20fa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    20d2:	a7 e3       	ldi	r26, 0x37	; 55
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e7 e3       	ldi	r30, 0x37	; 55
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <GPIO_setupPinDirection+0xe4>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <GPIO_setupPinDirection+0xe0>
    20f4:	84 2b       	or	r24, r20
    20f6:	8c 93       	st	X, r24
    20f8:	6c c0       	rjmp	.+216    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    20fa:	a7 e3       	ldi	r26, 0x37	; 55
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e7 e3       	ldi	r30, 0x37	; 55
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	48 2f       	mov	r20, r24
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 2e       	mov	r0, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <GPIO_setupPinDirection+0x10c>
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <GPIO_setupPinDirection+0x108>
    211c:	80 95       	com	r24
    211e:	84 23       	and	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	57 c0       	rjmp	.+174    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	a1 f4       	brne	.+40     	; 0x2152 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    212a:	a4 e3       	ldi	r26, 0x34	; 52
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e4 e3       	ldi	r30, 0x34	; 52
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	48 2f       	mov	r20, r24
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 2e       	mov	r0, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <GPIO_setupPinDirection+0x13c>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	0a 94       	dec	r0
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <GPIO_setupPinDirection+0x138>
    214c:	84 2b       	or	r24, r20
    214e:	8c 93       	st	X, r24
    2150:	40 c0       	rjmp	.+128    	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2152:	a4 e3       	ldi	r26, 0x34	; 52
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e4 e3       	ldi	r30, 0x34	; 52
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	48 2f       	mov	r20, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	02 2e       	mov	r0, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <GPIO_setupPinDirection+0x164>
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	0a 94       	dec	r0
    2172:	e2 f7       	brpl	.-8      	; 0x216c <GPIO_setupPinDirection+0x160>
    2174:	80 95       	com	r24
    2176:	84 23       	and	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	2b c0       	rjmp	.+86     	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	a1 f4       	brne	.+40     	; 0x21aa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2182:	a1 e3       	ldi	r26, 0x31	; 49
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e1 e3       	ldi	r30, 0x31	; 49
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	48 2f       	mov	r20, r24
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	02 2e       	mov	r0, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <GPIO_setupPinDirection+0x194>
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	0a 94       	dec	r0
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <GPIO_setupPinDirection+0x190>
    21a4:	84 2b       	or	r24, r20
    21a6:	8c 93       	st	X, r24
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    21aa:	a1 e3       	ldi	r26, 0x31	; 49
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e1 e3       	ldi	r30, 0x31	; 49
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	48 2f       	mov	r20, r24
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <GPIO_setupPinDirection+0x1bc>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <GPIO_setupPinDirection+0x1b8>
    21cc:	80 95       	com	r24
    21ce:	84 23       	and	r24, r20
    21d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <GPIO_writePin+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <GPIO_writePin+0x8>
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	6a 83       	std	Y+2, r22	; 0x02
    21f4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	88 30       	cpi	r24, 0x08	; 8
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <GPIO_writePin+0x1c>
    21fc:	d5 c0       	rjmp	.+426    	; 0x23a8 <GPIO_writePin+0x1c6>
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	08 f0       	brcs	.+2      	; 0x2206 <GPIO_writePin+0x24>
    2204:	d1 c0       	rjmp	.+418    	; 0x23a8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	3d 83       	std	Y+5, r19	; 0x05
    220e:	2c 83       	std	Y+4, r18	; 0x04
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	9d 81       	ldd	r25, Y+5	; 0x05
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	91 05       	cpc	r25, r1
    2218:	09 f4       	brne	.+2      	; 0x221c <GPIO_writePin+0x3a>
    221a:	43 c0       	rjmp	.+134    	; 0x22a2 <GPIO_writePin+0xc0>
    221c:	2c 81       	ldd	r18, Y+4	; 0x04
    221e:	3d 81       	ldd	r19, Y+5	; 0x05
    2220:	22 30       	cpi	r18, 0x02	; 2
    2222:	31 05       	cpc	r19, r1
    2224:	2c f4       	brge	.+10     	; 0x2230 <GPIO_writePin+0x4e>
    2226:	8c 81       	ldd	r24, Y+4	; 0x04
    2228:	9d 81       	ldd	r25, Y+5	; 0x05
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	71 f0       	breq	.+28     	; 0x224a <GPIO_writePin+0x68>
    222e:	bc c0       	rjmp	.+376    	; 0x23a8 <GPIO_writePin+0x1c6>
    2230:	2c 81       	ldd	r18, Y+4	; 0x04
    2232:	3d 81       	ldd	r19, Y+5	; 0x05
    2234:	22 30       	cpi	r18, 0x02	; 2
    2236:	31 05       	cpc	r19, r1
    2238:	09 f4       	brne	.+2      	; 0x223c <GPIO_writePin+0x5a>
    223a:	5f c0       	rjmp	.+190    	; 0x22fa <GPIO_writePin+0x118>
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	9d 81       	ldd	r25, Y+5	; 0x05
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <GPIO_writePin+0x66>
    2246:	85 c0       	rjmp	.+266    	; 0x2352 <GPIO_writePin+0x170>
    2248:	af c0       	rjmp	.+350    	; 0x23a8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	a1 f4       	brne	.+40     	; 0x2278 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2250:	ab e3       	ldi	r26, 0x3B	; 59
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	eb e3       	ldi	r30, 0x3B	; 59
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	48 2f       	mov	r20, r24
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 2e       	mov	r0, r18
    2268:	02 c0       	rjmp	.+4      	; 0x226e <GPIO_writePin+0x8c>
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	0a 94       	dec	r0
    2270:	e2 f7       	brpl	.-8      	; 0x226a <GPIO_writePin+0x88>
    2272:	84 2b       	or	r24, r20
    2274:	8c 93       	st	X, r24
    2276:	98 c0       	rjmp	.+304    	; 0x23a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2278:	ab e3       	ldi	r26, 0x3B	; 59
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	eb e3       	ldi	r30, 0x3B	; 59
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <GPIO_writePin+0xb4>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <GPIO_writePin+0xb0>
    229a:	80 95       	com	r24
    229c:	84 23       	and	r24, r20
    229e:	8c 93       	st	X, r24
    22a0:	83 c0       	rjmp	.+262    	; 0x23a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	a1 f4       	brne	.+40     	; 0x22d0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    22a8:	a8 e3       	ldi	r26, 0x38	; 56
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e8 e3       	ldi	r30, 0x38	; 56
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	48 2f       	mov	r20, r24
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	02 2e       	mov	r0, r18
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <GPIO_writePin+0xe4>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	0a 94       	dec	r0
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <GPIO_writePin+0xe0>
    22ca:	84 2b       	or	r24, r20
    22cc:	8c 93       	st	X, r24
    22ce:	6c c0       	rjmp	.+216    	; 0x23a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    22d0:	a8 e3       	ldi	r26, 0x38	; 56
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e8 e3       	ldi	r30, 0x38	; 56
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	48 2f       	mov	r20, r24
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	02 2e       	mov	r0, r18
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <GPIO_writePin+0x10c>
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	0a 94       	dec	r0
    22f0:	e2 f7       	brpl	.-8      	; 0x22ea <GPIO_writePin+0x108>
    22f2:	80 95       	com	r24
    22f4:	84 23       	and	r24, r20
    22f6:	8c 93       	st	X, r24
    22f8:	57 c0       	rjmp	.+174    	; 0x23a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	a1 f4       	brne	.+40     	; 0x2328 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2300:	a5 e3       	ldi	r26, 0x35	; 53
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e5 e3       	ldi	r30, 0x35	; 53
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	48 2f       	mov	r20, r24
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	02 2e       	mov	r0, r18
    2318:	02 c0       	rjmp	.+4      	; 0x231e <GPIO_writePin+0x13c>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	0a 94       	dec	r0
    2320:	e2 f7       	brpl	.-8      	; 0x231a <GPIO_writePin+0x138>
    2322:	84 2b       	or	r24, r20
    2324:	8c 93       	st	X, r24
    2326:	40 c0       	rjmp	.+128    	; 0x23a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2328:	a5 e3       	ldi	r26, 0x35	; 53
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e5 e3       	ldi	r30, 0x35	; 53
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 2e       	mov	r0, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <GPIO_writePin+0x164>
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <GPIO_writePin+0x160>
    234a:	80 95       	com	r24
    234c:	84 23       	and	r24, r20
    234e:	8c 93       	st	X, r24
    2350:	2b c0       	rjmp	.+86     	; 0x23a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	a1 f4       	brne	.+40     	; 0x2380 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2358:	a2 e3       	ldi	r26, 0x32	; 50
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e2 e3       	ldi	r30, 0x32	; 50
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 2e       	mov	r0, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <GPIO_writePin+0x194>
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	0a 94       	dec	r0
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <GPIO_writePin+0x190>
    237a:	84 2b       	or	r24, r20
    237c:	8c 93       	st	X, r24
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2380:	a2 e3       	ldi	r26, 0x32	; 50
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e2 e3       	ldi	r30, 0x32	; 50
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	48 2f       	mov	r20, r24
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	02 2e       	mov	r0, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <GPIO_writePin+0x1bc>
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	0a 94       	dec	r0
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <GPIO_writePin+0x1b8>
    23a2:	80 95       	com	r24
    23a4:	84 23       	and	r24, r20
    23a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <GPIO_readPin+0x6>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <GPIO_readPin+0x8>
    23c0:	0f 92       	push	r0
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    23ca:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	88 30       	cpi	r24, 0x08	; 8
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <GPIO_readPin+0x1c>
    23d2:	84 c0       	rjmp	.+264    	; 0x24dc <GPIO_readPin+0x124>
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	84 30       	cpi	r24, 0x04	; 4
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <GPIO_readPin+0x24>
    23da:	80 c0       	rjmp	.+256    	; 0x24dc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	3d 83       	std	Y+5, r19	; 0x05
    23e4:	2c 83       	std	Y+4, r18	; 0x04
    23e6:	4c 81       	ldd	r20, Y+4	; 0x04
    23e8:	5d 81       	ldd	r21, Y+5	; 0x05
    23ea:	41 30       	cpi	r20, 0x01	; 1
    23ec:	51 05       	cpc	r21, r1
    23ee:	79 f1       	breq	.+94     	; 0x244e <GPIO_readPin+0x96>
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	82 30       	cpi	r24, 0x02	; 2
    23f6:	91 05       	cpc	r25, r1
    23f8:	34 f4       	brge	.+12     	; 0x2406 <GPIO_readPin+0x4e>
    23fa:	2c 81       	ldd	r18, Y+4	; 0x04
    23fc:	3d 81       	ldd	r19, Y+5	; 0x05
    23fe:	21 15       	cp	r18, r1
    2400:	31 05       	cpc	r19, r1
    2402:	69 f0       	breq	.+26     	; 0x241e <GPIO_readPin+0x66>
    2404:	6b c0       	rjmp	.+214    	; 0x24dc <GPIO_readPin+0x124>
    2406:	4c 81       	ldd	r20, Y+4	; 0x04
    2408:	5d 81       	ldd	r21, Y+5	; 0x05
    240a:	42 30       	cpi	r20, 0x02	; 2
    240c:	51 05       	cpc	r21, r1
    240e:	b9 f1       	breq	.+110    	; 0x247e <GPIO_readPin+0xc6>
    2410:	8c 81       	ldd	r24, Y+4	; 0x04
    2412:	9d 81       	ldd	r25, Y+5	; 0x05
    2414:	83 30       	cpi	r24, 0x03	; 3
    2416:	91 05       	cpc	r25, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <GPIO_readPin+0x64>
    241a:	49 c0       	rjmp	.+146    	; 0x24ae <GPIO_readPin+0xf6>
    241c:	5f c0       	rjmp	.+190    	; 0x24dc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    241e:	e9 e3       	ldi	r30, 0x39	; 57
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a9 01       	movw	r20, r18
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <GPIO_readPin+0x7e>
    2432:	55 95       	asr	r21
    2434:	47 95       	ror	r20
    2436:	8a 95       	dec	r24
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <GPIO_readPin+0x7a>
    243a:	ca 01       	movw	r24, r20
    243c:	81 70       	andi	r24, 0x01	; 1
    243e:	90 70       	andi	r25, 0x00	; 0
    2440:	88 23       	and	r24, r24
    2442:	19 f0       	breq	.+6      	; 0x244a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	49 c0       	rjmp	.+146    	; 0x24dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    244a:	19 82       	std	Y+1, r1	; 0x01
    244c:	47 c0       	rjmp	.+142    	; 0x24dc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    244e:	e6 e3       	ldi	r30, 0x36	; 54
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a9 01       	movw	r20, r18
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <GPIO_readPin+0xae>
    2462:	55 95       	asr	r21
    2464:	47 95       	ror	r20
    2466:	8a 95       	dec	r24
    2468:	e2 f7       	brpl	.-8      	; 0x2462 <GPIO_readPin+0xaa>
    246a:	ca 01       	movw	r24, r20
    246c:	81 70       	andi	r24, 0x01	; 1
    246e:	90 70       	andi	r25, 0x00	; 0
    2470:	88 23       	and	r24, r24
    2472:	19 f0       	breq	.+6      	; 0x247a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	31 c0       	rjmp	.+98     	; 0x24dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    247a:	19 82       	std	Y+1, r1	; 0x01
    247c:	2f c0       	rjmp	.+94     	; 0x24dc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    247e:	e3 e3       	ldi	r30, 0x33	; 51
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	a9 01       	movw	r20, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <GPIO_readPin+0xde>
    2492:	55 95       	asr	r21
    2494:	47 95       	ror	r20
    2496:	8a 95       	dec	r24
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <GPIO_readPin+0xda>
    249a:	ca 01       	movw	r24, r20
    249c:	81 70       	andi	r24, 0x01	; 1
    249e:	90 70       	andi	r25, 0x00	; 0
    24a0:	88 23       	and	r24, r24
    24a2:	19 f0       	breq	.+6      	; 0x24aa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	19 c0       	rjmp	.+50     	; 0x24dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24aa:	19 82       	std	Y+1, r1	; 0x01
    24ac:	17 c0       	rjmp	.+46     	; 0x24dc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    24ae:	e0 e3       	ldi	r30, 0x30	; 48
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a9 01       	movw	r20, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <GPIO_readPin+0x10e>
    24c2:	55 95       	asr	r21
    24c4:	47 95       	ror	r20
    24c6:	8a 95       	dec	r24
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <GPIO_readPin+0x10a>
    24ca:	ca 01       	movw	r24, r20
    24cc:	81 70       	andi	r24, 0x01	; 1
    24ce:	90 70       	andi	r25, 0x00	; 0
    24d0:	88 23       	and	r24, r24
    24d2:	19 f0       	breq	.+6      	; 0x24da <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	01 c0       	rjmp	.+2      	; 0x24dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24da:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <GPIO_setupPortDirection+0x6>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <GPIO_setupPortDirection+0x8>
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	84 30       	cpi	r24, 0x04	; 4
    2502:	90 f5       	brcc	.+100    	; 0x2568 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	3c 83       	std	Y+4, r19	; 0x04
    250c:	2b 83       	std	Y+3, r18	; 0x03
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	91 05       	cpc	r25, r1
    2516:	d1 f0       	breq	.+52     	; 0x254c <GPIO_setupPortDirection+0x5e>
    2518:	2b 81       	ldd	r18, Y+3	; 0x03
    251a:	3c 81       	ldd	r19, Y+4	; 0x04
    251c:	22 30       	cpi	r18, 0x02	; 2
    251e:	31 05       	cpc	r19, r1
    2520:	2c f4       	brge	.+10     	; 0x252c <GPIO_setupPortDirection+0x3e>
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	61 f0       	breq	.+24     	; 0x2542 <GPIO_setupPortDirection+0x54>
    252a:	1e c0       	rjmp	.+60     	; 0x2568 <GPIO_setupPortDirection+0x7a>
    252c:	2b 81       	ldd	r18, Y+3	; 0x03
    252e:	3c 81       	ldd	r19, Y+4	; 0x04
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	31 05       	cpc	r19, r1
    2534:	81 f0       	breq	.+32     	; 0x2556 <GPIO_setupPortDirection+0x68>
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	81 f0       	breq	.+32     	; 0x2560 <GPIO_setupPortDirection+0x72>
    2540:	13 c0       	rjmp	.+38     	; 0x2568 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2542:	ea e3       	ldi	r30, 0x3A	; 58
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	80 83       	st	Z, r24
    254a:	0e c0       	rjmp	.+28     	; 0x2568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    254c:	e7 e3       	ldi	r30, 0x37	; 55
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	80 83       	st	Z, r24
    2554:	09 c0       	rjmp	.+18     	; 0x2568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2556:	e4 e3       	ldi	r30, 0x34	; 52
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	80 83       	st	Z, r24
    255e:	04 c0       	rjmp	.+8      	; 0x2568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2560:	e1 e3       	ldi	r30, 0x31	; 49
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	80 83       	st	Z, r24
			break;
		}
	}
}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <GPIO_writePort+0x6>
    257c:	00 d0       	rcall	.+0      	; 0x257e <GPIO_writePort+0x8>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	84 30       	cpi	r24, 0x04	; 4
    258a:	90 f5       	brcc	.+100    	; 0x25f0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	3c 83       	std	Y+4, r19	; 0x04
    2594:	2b 83       	std	Y+3, r18	; 0x03
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	91 05       	cpc	r25, r1
    259e:	d1 f0       	breq	.+52     	; 0x25d4 <GPIO_writePort+0x5e>
    25a0:	2b 81       	ldd	r18, Y+3	; 0x03
    25a2:	3c 81       	ldd	r19, Y+4	; 0x04
    25a4:	22 30       	cpi	r18, 0x02	; 2
    25a6:	31 05       	cpc	r19, r1
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <GPIO_writePort+0x3e>
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	61 f0       	breq	.+24     	; 0x25ca <GPIO_writePort+0x54>
    25b2:	1e c0       	rjmp	.+60     	; 0x25f0 <GPIO_writePort+0x7a>
    25b4:	2b 81       	ldd	r18, Y+3	; 0x03
    25b6:	3c 81       	ldd	r19, Y+4	; 0x04
    25b8:	22 30       	cpi	r18, 0x02	; 2
    25ba:	31 05       	cpc	r19, r1
    25bc:	81 f0       	breq	.+32     	; 0x25de <GPIO_writePort+0x68>
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	83 30       	cpi	r24, 0x03	; 3
    25c4:	91 05       	cpc	r25, r1
    25c6:	81 f0       	breq	.+32     	; 0x25e8 <GPIO_writePort+0x72>
    25c8:	13 c0       	rjmp	.+38     	; 0x25f0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    25ca:	eb e3       	ldi	r30, 0x3B	; 59
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	80 83       	st	Z, r24
    25d2:	0e c0       	rjmp	.+28     	; 0x25f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    25d4:	e8 e3       	ldi	r30, 0x38	; 56
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	80 83       	st	Z, r24
    25dc:	09 c0       	rjmp	.+18     	; 0x25f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    25de:	e5 e3       	ldi	r30, 0x35	; 53
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	80 83       	st	Z, r24
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    25e8:	e2 e3       	ldi	r30, 0x32	; 50
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	00 d0       	rcall	.+0      	; 0x2604 <GPIO_readPort+0x6>
    2604:	00 d0       	rcall	.+0      	; 0x2606 <GPIO_readPort+0x8>
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    260c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	90 f5       	brcc	.+100    	; 0x2678 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	3c 83       	std	Y+4, r19	; 0x04
    261c:	2b 83       	std	Y+3, r18	; 0x03
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	91 05       	cpc	r25, r1
    2626:	d1 f0       	breq	.+52     	; 0x265c <GPIO_readPort+0x5e>
    2628:	2b 81       	ldd	r18, Y+3	; 0x03
    262a:	3c 81       	ldd	r19, Y+4	; 0x04
    262c:	22 30       	cpi	r18, 0x02	; 2
    262e:	31 05       	cpc	r19, r1
    2630:	2c f4       	brge	.+10     	; 0x263c <GPIO_readPort+0x3e>
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	61 f0       	breq	.+24     	; 0x2652 <GPIO_readPort+0x54>
    263a:	1e c0       	rjmp	.+60     	; 0x2678 <GPIO_readPort+0x7a>
    263c:	2b 81       	ldd	r18, Y+3	; 0x03
    263e:	3c 81       	ldd	r19, Y+4	; 0x04
    2640:	22 30       	cpi	r18, 0x02	; 2
    2642:	31 05       	cpc	r19, r1
    2644:	81 f0       	breq	.+32     	; 0x2666 <GPIO_readPort+0x68>
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	83 30       	cpi	r24, 0x03	; 3
    264c:	91 05       	cpc	r25, r1
    264e:	81 f0       	breq	.+32     	; 0x2670 <GPIO_readPort+0x72>
    2650:	13 c0       	rjmp	.+38     	; 0x2678 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2652:	e9 e3       	ldi	r30, 0x39	; 57
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	0e c0       	rjmp	.+28     	; 0x2678 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    265c:	e6 e3       	ldi	r30, 0x36	; 54
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2666:	e3 e3       	ldi	r30, 0x33	; 51
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	04 c0       	rjmp	.+8      	; 0x2678 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2670:	e0 e3       	ldi	r30, 0x30	; 48
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2678:	89 81       	ldd	r24, Y+1	; 0x01
}
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    2688:	1f 92       	push	r1
    268a:	0f 92       	push	r0
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	0f 92       	push	r0
    2690:	11 24       	eor	r1, r1
    2692:	2f 93       	push	r18
    2694:	3f 93       	push	r19
    2696:	4f 93       	push	r20
    2698:	5f 93       	push	r21
    269a:	6f 93       	push	r22
    269c:	7f 93       	push	r23
    269e:	8f 93       	push	r24
    26a0:	9f 93       	push	r25
    26a2:	af 93       	push	r26
    26a4:	bf 93       	push	r27
    26a6:	ef 93       	push	r30
    26a8:	ff 93       	push	r31
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    26b2:	80 91 68 01 	lds	r24, 0x0168
    26b6:	90 91 69 01 	lds	r25, 0x0169
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    26be:	e0 91 68 01 	lds	r30, 0x0168
    26c2:	f0 91 69 01 	lds	r31, 0x0169
    26c6:	09 95       	icall
	}
}
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	ff 91       	pop	r31
    26ce:	ef 91       	pop	r30
    26d0:	bf 91       	pop	r27
    26d2:	af 91       	pop	r26
    26d4:	9f 91       	pop	r25
    26d6:	8f 91       	pop	r24
    26d8:	7f 91       	pop	r23
    26da:	6f 91       	pop	r22
    26dc:	5f 91       	pop	r21
    26de:	4f 91       	pop	r20
    26e0:	3f 91       	pop	r19
    26e2:	2f 91       	pop	r18
    26e4:	0f 90       	pop	r0
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	0f 90       	pop	r0
    26ea:	1f 90       	pop	r1
    26ec:	18 95       	reti

000026ee <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <ICU_init+0x6>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    26fc:	a1 e3       	ldi	r26, 0x31	; 49
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e1 e3       	ldi	r30, 0x31	; 49
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	8f 7b       	andi	r24, 0xBF	; 191
    2708:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    270a:	ef e4       	ldi	r30, 0x4F	; 79
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	8c e0       	ldi	r24, 0x0C	; 12
    2710:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    2712:	ae e4       	ldi	r26, 0x4E	; 78
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ee e4       	ldi	r30, 0x4E	; 78
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	98 2f       	mov	r25, r24
    271e:	98 7f       	andi	r25, 0xF8	; 248
    2720:	e9 81       	ldd	r30, Y+1	; 0x01
    2722:	fa 81       	ldd	r31, Y+2	; 0x02
    2724:	80 81       	ld	r24, Z
    2726:	89 2b       	or	r24, r25
    2728:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    272a:	ae e4       	ldi	r26, 0x4E	; 78
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	ee e4       	ldi	r30, 0x4E	; 78
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	28 2f       	mov	r18, r24
    2736:	2f 7b       	andi	r18, 0xBF	; 191
    2738:	e9 81       	ldd	r30, Y+1	; 0x01
    273a:	fa 81       	ldd	r31, Y+2	; 0x02
    273c:	81 81       	ldd	r24, Z+1	; 0x01
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	00 24       	eor	r0, r0
    2744:	96 95       	lsr	r25
    2746:	87 95       	ror	r24
    2748:	07 94       	ror	r0
    274a:	96 95       	lsr	r25
    274c:	87 95       	ror	r24
    274e:	07 94       	ror	r0
    2750:	98 2f       	mov	r25, r24
    2752:	80 2d       	mov	r24, r0
    2754:	82 2b       	or	r24, r18
    2756:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    2758:	ec e4       	ldi	r30, 0x4C	; 76
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	11 82       	std	Z+1, r1	; 0x01
    275e:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    2760:	e6 e4       	ldi	r30, 0x46	; 70
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	11 82       	std	Z+1, r1	; 0x01
    2766:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    2768:	a9 e5       	ldi	r26, 0x59	; 89
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e9 e5       	ldi	r30, 0x59	; 89
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	80 62       	ori	r24, 0x20	; 32
    2774:	8c 93       	st	X, r24
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <ICU_setCallBack+0x6>
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	90 93 69 01 	sts	0x0169, r25
    2796:	80 93 68 01 	sts	0x0168, r24
}
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	0f 92       	push	r0
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    27b0:	ae e4       	ldi	r26, 0x4E	; 78
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ee e4       	ldi	r30, 0x4E	; 78
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	28 2f       	mov	r18, r24
    27bc:	2f 7b       	andi	r18, 0xBF	; 191
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	00 24       	eor	r0, r0
    27c6:	96 95       	lsr	r25
    27c8:	87 95       	ror	r24
    27ca:	07 94       	ror	r0
    27cc:	96 95       	lsr	r25
    27ce:	87 95       	ror	r24
    27d0:	07 94       	ror	r0
    27d2:	98 2f       	mov	r25, r24
    27d4:	80 2d       	mov	r24, r0
    27d6:	82 2b       	or	r24, r18
    27d8:	8c 93       	st	X, r24
}
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    27ea:	e6 e4       	ldi	r30, 0x46	; 70
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
}
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2800:	ec e4       	ldi	r30, 0x4C	; 76
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	11 82       	std	Z+1, r1	; 0x01
    2806:	10 82       	st	Z, r1
}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    2816:	ef e4       	ldi	r30, 0x4F	; 79
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	10 82       	st	Z, r1
	TCCR1B = 0;
    281c:	ee e4       	ldi	r30, 0x4E	; 78
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	10 82       	st	Z, r1
	TCNT1 = 0;
    2822:	ec e4       	ldi	r30, 0x4C	; 76
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	11 82       	std	Z+1, r1	; 0x01
    2828:	10 82       	st	Z, r1
	ICR1 = 0;
    282a:	e6 e4       	ldi	r30, 0x46	; 70
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	11 82       	std	Z+1, r1	; 0x01
    2830:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    2832:	a9 e5       	ldi	r26, 0x59	; 89
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e9 e5       	ldi	r30, 0x59	; 89
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	8f 7d       	andi	r24, 0xDF	; 223
    283e:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2840:	10 92 69 01 	sts	0x0169, r1
    2844:	10 92 68 01 	sts	0x0168, r1
}
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	64 e0       	ldi	r22, 0x04	; 4
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	65 e0       	ldi	r22, 0x05	; 5
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	66 e0       	ldi	r22, 0x06	; 6
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	67 e0       	ldi	r22, 0x07	; 7
    2878:	41 e0       	ldi	r20, 0x01	; 1
    287a:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    287e:	ed e2       	ldi	r30, 0x2D	; 45
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 e5       	ldi	r24, 0x50	; 80
    2884:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    2886:	ae e2       	ldi	r26, 0x2E	; 46
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	ee e2       	ldi	r30, 0x2E	; 46
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	8e 7f       	andi	r24, 0xFE	; 254
    2892:	8c 93       	st	X, r24
}
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	64 e0       	ldi	r22, 0x04	; 4
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	65 e0       	ldi	r22, 0x05	; 5
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	66 e0       	ldi	r22, 0x06	; 6
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	67 e0       	ldi	r22, 0x07	; 7
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    28ca:	ed e2       	ldi	r30, 0x2D	; 45
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 e4       	ldi	r24, 0x40	; 64
    28d0:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    28d2:	ae e2       	ldi	r26, 0x2E	; 46
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ee e2       	ldi	r30, 0x2E	; 46
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	8e 7f       	andi	r24, 0xFE	; 254
    28de:	8c 93       	st	X, r24
}
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    28f2:	ef e2       	ldi	r30, 0x2F	; 47
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    28fa:	ee e2       	ldi	r30, 0x2E	; 46
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	88 23       	and	r24, r24
    2902:	dc f7       	brge	.-10     	; 0x28fa <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    2904:	ef e2       	ldi	r30, 0x2F	; 47
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
}
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <SPI_sendString+0x6>
    2918:	00 d0       	rcall	.+0      	; 0x291a <SPI_sendString+0x8>
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	9c 83       	std	Y+4, r25	; 0x04
    2920:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    2922:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    2924:	19 82       	std	Y+1, r1	; 0x01
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	fc 01       	movw	r30, r24
    2934:	e2 0f       	add	r30, r18
    2936:	f3 1f       	adc	r31, r19
    2938:	80 81       	ld	r24, Z
    293a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <SPI_sendReceiveByte>
    293e:	89 83       	std	Y+1, r24	; 0x01
		i++;
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	8f 5f       	subi	r24, 0xFF	; 255
    2944:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	fc 01       	movw	r30, r24
    2952:	e2 0f       	add	r30, r18
    2954:	f3 1f       	adc	r31, r19
    2956:	80 81       	ld	r24, Z
    2958:	88 23       	and	r24, r24
    295a:	31 f7       	brne	.-52     	; 0x2928 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <SPI_receiveString+0xa>
    2974:	0f 92       	push	r0
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	9b 83       	std	Y+3, r25	; 0x03
    297c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    297e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	9b 81       	ldd	r25, Y+3	; 0x03
    298a:	8c 01       	movw	r16, r24
    298c:	02 0f       	add	r16, r18
    298e:	13 1f       	adc	r17, r19
    2990:	8f ef       	ldi	r24, 0xFF	; 255
    2992:	0e 94 73 14 	call	0x28e6	; 0x28e6 <SPI_sendReceiveByte>
    2996:	f8 01       	movw	r30, r16
    2998:	80 83       	st	Z, r24
    299a:	10 c0       	rjmp	.+32     	; 0x29bc <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	8f 5f       	subi	r24, 0xFF	; 255
    29a0:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	28 2f       	mov	r18, r24
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	8c 01       	movw	r16, r24
    29ae:	02 0f       	add	r16, r18
    29b0:	13 1f       	adc	r17, r19
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	0e 94 73 14 	call	0x28e6	; 0x28e6 <SPI_sendReceiveByte>
    29b8:	f8 01       	movw	r30, r16
    29ba:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	fc 01       	movw	r30, r24
    29c8:	e2 0f       	add	r30, r18
    29ca:	f3 1f       	adc	r31, r19
    29cc:	80 81       	ld	r24, Z
    29ce:	83 32       	cpi	r24, 0x23	; 35
    29d0:	29 f7       	brne	.-54     	; 0x299c <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	10 82       	st	Z, r1
}
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
// Timer1 Compare Match ISR
ISR(TIMER1_COMPA_vect){
    29f4:	1f 92       	push	r1
    29f6:	0f 92       	push	r0
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	0f 92       	push	r0
    29fc:	11 24       	eor	r1, r1
    29fe:	2f 93       	push	r18
    2a00:	3f 93       	push	r19
    2a02:	4f 93       	push	r20
    2a04:	5f 93       	push	r21
    2a06:	6f 93       	push	r22
    2a08:	7f 93       	push	r23
    2a0a:	8f 93       	push	r24
    2a0c:	9f 93       	push	r25
    2a0e:	af 93       	push	r26
    2a10:	bf 93       	push	r27
    2a12:	ef 93       	push	r30
    2a14:	ff 93       	push	r31
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	if (timer1_callback != NULL_PTR)
    2a1e:	80 91 6a 01 	lds	r24, 0x016A
    2a22:	90 91 6b 01 	lds	r25, 0x016B
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	29 f0       	breq	.+10     	; 0x2a34 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callback)(); /* another method to call the function using pointer to function timer1_callback(); */
    2a2a:	e0 91 6a 01 	lds	r30, 0x016A
    2a2e:	f0 91 6b 01 	lds	r31, 0x016B
    2a32:	09 95       	icall
	}
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	ff 91       	pop	r31
    2a3a:	ef 91       	pop	r30
    2a3c:	bf 91       	pop	r27
    2a3e:	af 91       	pop	r26
    2a40:	9f 91       	pop	r25
    2a42:	8f 91       	pop	r24
    2a44:	7f 91       	pop	r23
    2a46:	6f 91       	pop	r22
    2a48:	5f 91       	pop	r21
    2a4a:	4f 91       	pop	r20
    2a4c:	3f 91       	pop	r19
    2a4e:	2f 91       	pop	r18
    2a50:	0f 90       	pop	r0
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	0f 90       	pop	r0
    2a56:	1f 90       	pop	r1
    2a58:	18 95       	reti

00002a5a <__vector_9>:

// Timer1 Overflow ISR
ISR(TIMER1_OVF_vect){
    2a5a:	1f 92       	push	r1
    2a5c:	0f 92       	push	r0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	0f 92       	push	r0
    2a62:	11 24       	eor	r1, r1
    2a64:	2f 93       	push	r18
    2a66:	3f 93       	push	r19
    2a68:	4f 93       	push	r20
    2a6a:	5f 93       	push	r21
    2a6c:	6f 93       	push	r22
    2a6e:	7f 93       	push	r23
    2a70:	8f 93       	push	r24
    2a72:	9f 93       	push	r25
    2a74:	af 93       	push	r26
    2a76:	bf 93       	push	r27
    2a78:	ef 93       	push	r30
    2a7a:	ff 93       	push	r31
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
	if (timer1_callback != NULL_PTR)
    2a84:	80 91 6a 01 	lds	r24, 0x016A
    2a88:	90 91 6b 01 	lds	r25, 0x016B
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	29 f0       	breq	.+10     	; 0x2a9a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callback)(); /* another method to call the function using pointer to function timer1_callback(); */
    2a90:	e0 91 6a 01 	lds	r30, 0x016A
    2a94:	f0 91 6b 01 	lds	r31, 0x016B
    2a98:	09 95       	icall
	}
}
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	ff 91       	pop	r31
    2aa0:	ef 91       	pop	r30
    2aa2:	bf 91       	pop	r27
    2aa4:	af 91       	pop	r26
    2aa6:	9f 91       	pop	r25
    2aa8:	8f 91       	pop	r24
    2aaa:	7f 91       	pop	r23
    2aac:	6f 91       	pop	r22
    2aae:	5f 91       	pop	r21
    2ab0:	4f 91       	pop	r20
    2ab2:	3f 91       	pop	r19
    2ab4:	2f 91       	pop	r18
    2ab6:	0f 90       	pop	r0
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	0f 90       	pop	r0
    2abc:	1f 90       	pop	r1
    2abe:	18 95       	reti

00002ac0 <Timer1_init>:
 * Function to initialize the Timer driver.
 * 1. Set the required clock.
 * 2. Initialize Timer1 Registers.
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <Timer1_init+0x6>
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
	// Configure Timer1 Control Register
	TCCR1A = 0; // Normal mode by default
    2ace:	ef e4       	ldi	r30, 0x4F	; 79
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	10 82       	st	Z, r1
	TCCR1B = 0;
    2ad4:	ee e4       	ldi	r30, 0x4E	; 78
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	10 82       	st	Z, r1

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2ada:	ae e4       	ldi	r26, 0x4E	; 78
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	ee e4       	ldi	r30, 0x4E	; 78
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	98 7f       	andi	r25, 0xF8	; 248
    2ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aea:	fa 81       	ldd	r31, Y+2	; 0x02
    2aec:	84 81       	ldd	r24, Z+4	; 0x04
    2aee:	89 2b       	or	r24, r25
    2af0:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = (Config_Ptr->initial_value);
    2af2:	ac e4       	ldi	r26, 0x4C	; 76
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	e9 81       	ldd	r30, Y+1	; 0x01
    2af8:	fa 81       	ldd	r31, Y+2	; 0x02
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	11 96       	adiw	r26, 0x01	; 1
    2b00:	9c 93       	st	X, r25
    2b02:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == TIMER1_COMPARE_MODE)
    2b04:	e9 81       	ldd	r30, Y+1	; 0x01
    2b06:	fa 81       	ldd	r31, Y+2	; 0x02
    2b08:	85 81       	ldd	r24, Z+5	; 0x05
    2b0a:	84 30       	cpi	r24, 0x04	; 4
    2b0c:	89 f4       	brne	.+34     	; 0x2b30 <Timer1_init+0x70>
	{
		// Set the compare value
		OCR1A = (Config_Ptr->compare_value);
    2b0e:	aa e4       	ldi	r26, 0x4A	; 74
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e9 81       	ldd	r30, Y+1	; 0x01
    2b14:	fa 81       	ldd	r31, Y+2	; 0x02
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	11 96       	adiw	r26, 0x01	; 1
    2b1c:	9c 93       	st	X, r25
    2b1e:	8e 93       	st	-X, r24

		// Enable Compare Match interrupt
		TIMSK |= (1 << OCIE1A);
    2b20:	a9 e5       	ldi	r26, 0x59	; 89
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e9 e5       	ldi	r30, 0x59	; 89
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	80 61       	ori	r24, 0x10	; 16
    2b2c:	8c 93       	st	X, r24
    2b2e:	07 c0       	rjmp	.+14     	; 0x2b3e <Timer1_init+0x7e>
	}
	else
	{
		// Enable Timer1 overflow interrupt
		TIMSK |= (1 << TOIE1);
    2b30:	a9 e5       	ldi	r26, 0x59	; 89
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e9 e5       	ldi	r30, 0x59	; 89
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	84 60       	ori	r24, 0x04	; 4
    2b3c:	8c 93       	st	X, r24
	}
}
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <Timer1_deInit>:
/*
 * Description:
 *  Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2b50:	ef e4       	ldi	r30, 0x4F	; 79
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	10 82       	st	Z, r1
	TCCR1B = 0;
    2b56:	ee e4       	ldi	r30, 0x4E	; 78
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	10 82       	st	Z, r1
	TCNT1 = 0;
    2b5c:	ec e4       	ldi	r30, 0x4C	; 76
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	11 82       	std	Z+1, r1	; 0x01
    2b62:	10 82       	st	Z, r1

	// Disable Timer1 interrupts
	TIMSK &= ~((1 << OCIE1A) | (1 << TOIE1));
    2b64:	a9 e5       	ldi	r26, 0x59	; 89
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e9 e5       	ldi	r30, 0x59	; 89
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	8b 7e       	andi	r24, 0xEB	; 235
    2b70:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	timer1_callback = NULL_PTR;
    2b72:	10 92 6b 01 	sts	0x016B, r1
    2b76:	10 92 6a 01 	sts	0x016A, r1
}
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <Timer1_setCallBack>:
/*
 * Description:
 *  Function to set the Call Back function address.
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <Timer1_setCallBack+0x6>
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	9a 83       	std	Y+2, r25	; 0x02
    2b8c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callback = a_ptr;
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	9a 81       	ldd	r25, Y+2	; 0x02
    2b92:	90 93 6b 01 	sts	0x016B, r25
    2b96:	80 93 6a 01 	sts	0x016A, r24
}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <TWI_init+0x6>
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2bb2:	e0 e2       	ldi	r30, 0x20	; 32
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	82 e0       	ldi	r24, 0x02	; 2
    2bb8:	80 83       	st	Z, r24
    TWSR |= (Config_Ptr->bit_rate & 0x03);
    2bba:	a1 e2       	ldi	r26, 0x21	; 33
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e1 e2       	ldi	r30, 0x21	; 33
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	98 2f       	mov	r25, r24
    2bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bca:	81 81       	ldd	r24, Z+1	; 0x01
    2bcc:	83 70       	andi	r24, 0x03	; 3
    2bce:	89 2b       	or	r24, r25
    2bd0:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address << 1); // my address = 0x01 :)
    2bd2:	a2 e2       	ldi	r26, 0x22	; 34
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 0f       	add	r24, r24
    2bde:	8c 93       	st	X, r24

    TWCR = (1 << TWEN); /* enable TWI */
    2be0:	e6 e5       	ldi	r30, 0x56	; 86
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	84 e0       	ldi	r24, 0x04	; 4
    2be6:	80 83       	st	Z, r24
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <TWI_start>:

void TWI_start(void)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the start bit TWINT=1
     * send the start bit by TWSTA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2bfa:	e6 e5       	ldi	r30, 0x56	; 86
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	84 ea       	ldi	r24, 0xA4	; 164
    2c00:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    2c02:	e6 e5       	ldi	r30, 0x56	; 86
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	88 23       	and	r24, r24
    2c0a:	dc f7       	brge	.-10     	; 0x2c02 <TWI_start+0x10>
        ;
}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <TWI_stop>:

void TWI_stop(void)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the stop bit TWINT=1
     * send the stop bit by TWSTO=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2c1a:	e6 e5       	ldi	r30, 0x56	; 86
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	84 e9       	ldi	r24, 0x94	; 148
    2c20:	80 83       	st	Z, r24
}
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	0f 92       	push	r0
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2c34:	e3 e2       	ldi	r30, 0x23	; 35
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	80 83       	st	Z, r24
    /*
     * Clear the TWINT flag before sending the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2c3c:	e6 e5       	ldi	r30, 0x56	; 86
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	84 e8       	ldi	r24, 0x84	; 132
    2c42:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    2c44:	e6 e5       	ldi	r30, 0x56	; 86
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 23       	and	r24, r24
    2c4c:	dc f7       	brge	.-10     	; 0x2c44 <TWI_writeByte+0x1c>
        ;
}
    2c4e:	0f 90       	pop	r0
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable sending ACK after reading or receiving data TWEA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2c5e:	e6 e5       	ldi	r30, 0x56	; 86
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	84 ec       	ldi	r24, 0xC4	; 196
    2c64:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    2c66:	e6 e5       	ldi	r30, 0x56	; 86
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 23       	and	r24, r24
    2c6e:	dc f7       	brge	.-10     	; 0x2c66 <TWI_readByteWithACK+0x10>
        ;
    /* Read Data */
    return TWDR;
    2c70:	e3 e2       	ldi	r30, 0x23	; 35
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2c84:	e6 e5       	ldi	r30, 0x56	; 86
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	84 e8       	ldi	r24, 0x84	; 132
    2c8a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while (BIT_IS_CLEAR(TWCR, TWINT))
    2c8c:	e6 e5       	ldi	r30, 0x56	; 86
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	88 23       	and	r24, r24
    2c94:	dc f7       	brge	.-10     	; 0x2c8c <TWI_readByteWithNACK+0x10>
        ;
    /* Read Data */
    return TWDR;
    2c96:	e3 e2       	ldi	r30, 0x23	; 35
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
}
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	0f 92       	push	r0
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2cac:	e1 e2       	ldi	r30, 0x21	; 33
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 7f       	andi	r24, 0xF8	; 248
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <UART_init+0x6>
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <UART_init+0x8>
    2cc8:	0f 92       	push	r0
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9d 83       	std	Y+5, r25	; 0x05
    2cd0:	8c 83       	std	Y+4, r24	; 0x04
	uint16 ubrr_value = 0;
    2cd2:	1b 82       	std	Y+3, r1	; 0x03
    2cd4:	1a 82       	std	Y+2, r1	; 0x02
	uint8 baud_divisor = 8UL;
    2cd6:	88 e0       	ldi	r24, 0x08	; 8
    2cd8:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (Config_Ptr->trans_speed << U2X);
    2cda:	ab e2       	ldi	r26, 0x2B	; 43
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	ec 81       	ldd	r30, Y+4	; 0x04
    2ce0:	fd 81       	ldd	r31, Y+5	; 0x05
    2ce2:	80 85       	ldd	r24, Z+8	; 0x08
    2ce4:	88 0f       	add	r24, r24
    2ce6:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2ce8:	ea e2       	ldi	r30, 0x2A	; 42
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	88 e1       	ldi	r24, 0x18	; 24
    2cee:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (Config_Ptr->trans_mod << UMSEL) | (Config_Ptr->stop_bit << USBS) | (Config_Ptr->parity << 4) | (1 << URSEL);
    2cf0:	a0 e4       	ldi	r26, 0x40	; 64
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ec 81       	ldd	r30, Y+4	; 0x04
    2cf6:	fd 81       	ldd	r31, Y+5	; 0x05
    2cf8:	87 81       	ldd	r24, Z+7	; 0x07
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	00 24       	eor	r0, r0
    2d00:	96 95       	lsr	r25
    2d02:	87 95       	ror	r24
    2d04:	07 94       	ror	r0
    2d06:	96 95       	lsr	r25
    2d08:	87 95       	ror	r24
    2d0a:	07 94       	ror	r0
    2d0c:	98 2f       	mov	r25, r24
    2d0e:	80 2d       	mov	r24, r0
    2d10:	28 2f       	mov	r18, r24
    2d12:	ec 81       	ldd	r30, Y+4	; 0x04
    2d14:	fd 81       	ldd	r31, Y+5	; 0x05
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	88 2f       	mov	r24, r24
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	28 2b       	or	r18, r24
    2d2a:	ec 81       	ldd	r30, Y+4	; 0x04
    2d2c:	fd 81       	ldd	r31, Y+5	; 0x05
    2d2e:	81 81       	ldd	r24, Z+1	; 0x01
    2d30:	88 2f       	mov	r24, r24
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	82 95       	swap	r24
    2d36:	92 95       	swap	r25
    2d38:	90 7f       	andi	r25, 0xF0	; 240
    2d3a:	98 27       	eor	r25, r24
    2d3c:	80 7f       	andi	r24, 0xF0	; 240
    2d3e:	98 27       	eor	r25, r24
    2d40:	82 2b       	or	r24, r18
    2d42:	80 68       	ori	r24, 0x80	; 128
    2d44:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data == Data_9Bit){
    2d46:	ec 81       	ldd	r30, Y+4	; 0x04
    2d48:	fd 81       	ldd	r31, Y+5	; 0x05
    2d4a:	80 81       	ld	r24, Z
    2d4c:	87 30       	cpi	r24, 0x07	; 7
    2d4e:	c1 f4       	brne	.+48     	; 0x2d80 <UART_init+0xc0>
		UCSRC |= ((Config_Ptr->bit_data << 1) & 0x06);
    2d50:	a0 e4       	ldi	r26, 0x40	; 64
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e0 e4       	ldi	r30, 0x40	; 64
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	ec 81       	ldd	r30, Y+4	; 0x04
    2d5e:	fd 81       	ldd	r31, Y+5	; 0x05
    2d60:	80 81       	ld	r24, Z
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	86 70       	andi	r24, 0x06	; 6
    2d6c:	82 2b       	or	r24, r18
    2d6e:	8c 93       	st	X, r24
		UCSRB |= (1<<UCSZ2);
    2d70:	aa e2       	ldi	r26, 0x2A	; 42
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ea e2       	ldi	r30, 0x2A	; 42
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	84 60       	ori	r24, 0x04	; 4
    2d7c:	8c 93       	st	X, r24
    2d7e:	10 c0       	rjmp	.+32     	; 0x2da0 <UART_init+0xe0>
	}else{
		UCSRC |= ((Config_Ptr->bit_data << 1) & 0x06);
    2d80:	a0 e4       	ldi	r26, 0x40	; 64
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e0 e4       	ldi	r30, 0x40	; 64
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	ec 81       	ldd	r30, Y+4	; 0x04
    2d8e:	fd 81       	ldd	r31, Y+5	; 0x05
    2d90:	80 81       	ld	r24, Z
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	86 70       	andi	r24, 0x06	; 6
    2d9c:	82 2b       	or	r24, r18
    2d9e:	8c 93       	st	X, r24
	}

	/* Calculate the the divisor of the baud rate divider from 16 to 8 */
	if(Config_Ptr->trans_mod == ASYNC){
    2da0:	ec 81       	ldd	r30, Y+4	; 0x04
    2da2:	fd 81       	ldd	r31, Y+5	; 0x05
    2da4:	87 81       	ldd	r24, Z+7	; 0x07
    2da6:	88 23       	and	r24, r24
    2da8:	59 f4       	brne	.+22     	; 0x2dc0 <UART_init+0x100>
		if(Config_Ptr->trans_speed == SYNC_OR_ASYNC_Normal)
    2daa:	ec 81       	ldd	r30, Y+4	; 0x04
    2dac:	fd 81       	ldd	r31, Y+5	; 0x05
    2dae:	80 85       	ldd	r24, Z+8	; 0x08
    2db0:	88 23       	and	r24, r24
    2db2:	19 f4       	brne	.+6      	; 0x2dba <UART_init+0xfa>
			baud_divisor = 16;
    2db4:	80 e1       	ldi	r24, 0x10	; 16
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <UART_init+0x104>
		else
			baud_divisor = 8;
    2dba:	88 e0       	ldi	r24, 0x08	; 8
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <UART_init+0x104>
	}else{
		baud_divisor = 2;
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * baud_divisor))) - 1);
    2dc4:	ec 81       	ldd	r30, Y+4	; 0x04
    2dc6:	fd 81       	ldd	r31, Y+5	; 0x05
    2dc8:	83 81       	ldd	r24, Z+3	; 0x03
    2dca:	94 81       	ldd	r25, Z+4	; 0x04
    2dcc:	a5 81       	ldd	r26, Z+5	; 0x05
    2dce:	b6 81       	ldd	r27, Z+6	; 0x06
    2dd0:	29 81       	ldd	r18, Y+1	; 0x01
    2dd2:	22 2f       	mov	r18, r18
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	50 e0       	ldi	r21, 0x00	; 0
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__mulsi3>
    2de2:	9b 01       	movw	r18, r22
    2de4:	ac 01       	movw	r20, r24
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	92 e1       	ldi	r25, 0x12	; 18
    2dea:	aa e7       	ldi	r26, 0x7A	; 122
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 0d 18 	call	0x301a	; 0x301a <__udivmodsi4>
    2df6:	da 01       	movw	r26, r20
    2df8:	c9 01       	movw	r24, r18
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	9b 83       	std	Y+3, r25	; 0x03
    2dfe:	8a 83       	std	Y+2, r24	; 0x02

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2e00:	e0 e4       	ldi	r30, 0x40	; 64
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	89 2f       	mov	r24, r25
    2e0a:	99 27       	eor	r25, r25
    2e0c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e0e:	e9 e2       	ldi	r30, 0x29	; 41
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	80 83       	st	Z, r24
}
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	0f 92       	push	r0
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    2e32:	eb e2       	ldi	r30, 0x2B	; 43
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	88 2f       	mov	r24, r24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	80 72       	andi	r24, 0x20	; 32
    2e3e:	90 70       	andi	r25, 0x00	; 0
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	b9 f3       	breq	.-18     	; 0x2e32 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e44:	ec e2       	ldi	r30, 0x2C	; 44
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2e4c:	0f 90       	pop	r0
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    2e5c:	eb e2       	ldi	r30, 0x2B	; 43
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	88 23       	and	r24, r24
    2e64:	dc f7       	brge	.-10     	; 0x2e5c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2e66:	ec e2       	ldi	r30, 0x2C	; 44
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
}
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <UART_sendString+0x6>
    2e78:	0f 92       	push	r0
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	9b 83       	std	Y+3, r25	; 0x03
    2e80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e82:	19 82       	std	Y+1, r1	; 0x01
    2e84:	0e c0       	rjmp	.+28     	; 0x2ea2 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e90:	fc 01       	movw	r30, r24
    2e92:	e2 0f       	add	r30, r18
    2e94:	f3 1f       	adc	r31, r19
    2e96:	80 81       	ld	r24, Z
    2e98:	0e 94 13 17 	call	0x2e26	; 0x2e26 <UART_sendByte>
		i++;
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ea0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2eac:	fc 01       	movw	r30, r24
    2eae:	e2 0f       	add	r30, r18
    2eb0:	f3 1f       	adc	r31, r19
    2eb2:	80 81       	ld	r24, Z
    2eb4:	88 23       	and	r24, r24
    2eb6:	39 f7       	brne	.-50     	; 0x2e86 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <UART_receiveString+0xa>
    2ece:	0f 92       	push	r0
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	9b 83       	std	Y+3, r25	; 0x03
    2ed6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ed8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee4:	8c 01       	movw	r16, r24
    2ee6:	02 0f       	add	r16, r18
    2ee8:	13 1f       	adc	r17, r19
    2eea:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <UART_recieveByte>
    2eee:	f8 01       	movw	r30, r16
    2ef0:	80 83       	st	Z, r24
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	8f 5f       	subi	r24, 0xFF	; 255
    2ef8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	8a 81       	ldd	r24, Y+2	; 0x02
    2f02:	9b 81       	ldd	r25, Y+3	; 0x03
    2f04:	8c 01       	movw	r16, r24
    2f06:	02 0f       	add	r16, r18
    2f08:	13 1f       	adc	r17, r19
    2f0a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <UART_recieveByte>
    2f0e:	f8 01       	movw	r30, r16
    2f10:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	e2 0f       	add	r30, r18
    2f20:	f3 1f       	adc	r31, r19
    2f22:	80 81       	ld	r24, Z
    2f24:	83 32       	cpi	r24, 0x23	; 35
    2f26:	31 f7       	brne	.-52     	; 0x2ef4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	fc 01       	movw	r30, r24
    2f34:	e2 0f       	add	r30, r18
    2f36:	f3 1f       	adc	r31, r19
    2f38:	10 82       	st	Z, r1
}
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	08 95       	ret

00002f4a <main>:
/*******************************************************************************
 *                           Main Function                                     *
 *******************************************************************************/


int main(void){
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	2b 97       	sbiw	r28, 0x0b	; 11
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61

	// Configure the UART specifications
	UART_ConfigType uart_configuration;
	uart_configuration.baud_rate = 9600;
    2f5e:	80 e8       	ldi	r24, 0x80	; 128
    2f60:	95 e2       	ldi	r25, 0x25	; 37
    2f62:	a0 e0       	ldi	r26, 0x00	; 0
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	8e 83       	std	Y+6, r24	; 0x06
    2f68:	9f 83       	std	Y+7, r25	; 0x07
    2f6a:	a8 87       	std	Y+8, r26	; 0x08
    2f6c:	b9 87       	std	Y+9, r27	; 0x09
	uart_configuration.bit_data = Data_8Bit;
    2f6e:	83 e0       	ldi	r24, 0x03	; 3
    2f70:	8b 83       	std	Y+3, r24	; 0x03
	uart_configuration.parity = Disabled;
    2f72:	1c 82       	std	Y+4, r1	; 0x04
	uart_configuration.stop_bit = St_1Bit;
    2f74:	1d 82       	std	Y+5, r1	; 0x05
	uart_configuration.trans_mod = ASYNC;
    2f76:	1a 86       	std	Y+10, r1	; 0x0a
	uart_configuration.trans_speed = ASYNC_Double;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	8b 87       	std	Y+11, r24	; 0x0b

	// start the UART
	UART_init(&uart_configuration);
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	03 96       	adiw	r24, 0x03	; 3
    2f80:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_init>

	// receive password1 from the HMI_ECU
	uint8 recived_byte;
	uint8 k = 4;
    2f84:	84 e0       	ldi	r24, 0x04	; 4
    2f86:	89 83       	std	Y+1, r24	; 0x01
	for(; k >= 0 ; k--){
		recived_byte = UART_recieveByte();
    2f88:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <UART_recieveByte>
    2f8c:	8a 83       	std	Y+2, r24	; 0x02
		password1 = password1 * 10 + recived_byte ;
    2f8e:	80 91 6c 01 	lds	r24, 0x016C
    2f92:	90 91 6d 01 	lds	r25, 0x016D
    2f96:	a0 91 6e 01 	lds	r26, 0x016E
    2f9a:	b0 91 6f 01 	lds	r27, 0x016F
    2f9e:	2a e0       	ldi	r18, 0x0A	; 10
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__mulsi3>
    2fae:	9b 01       	movw	r18, r22
    2fb0:	ac 01       	movw	r20, r24
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	a0 e0       	ldi	r26, 0x00	; 0
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	82 0f       	add	r24, r18
    2fbe:	93 1f       	adc	r25, r19
    2fc0:	a4 1f       	adc	r26, r20
    2fc2:	b5 1f       	adc	r27, r21
    2fc4:	80 93 6c 01 	sts	0x016C, r24
    2fc8:	90 93 6d 01 	sts	0x016D, r25
    2fcc:	a0 93 6e 01 	sts	0x016E, r26
    2fd0:	b0 93 6f 01 	sts	0x016F, r27
	UART_init(&uart_configuration);

	// receive password1 from the HMI_ECU
	uint8 recived_byte;
	uint8 k = 4;
	for(; k >= 0 ; k--){
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	81 50       	subi	r24, 0x01	; 1
    2fd8:	89 83       	std	Y+1, r24	; 0x01
    2fda:	d6 cf       	rjmp	.-84     	; 0x2f88 <main+0x3e>

00002fdc <__mulsi3>:
    2fdc:	62 9f       	mul	r22, r18
    2fde:	d0 01       	movw	r26, r0
    2fe0:	73 9f       	mul	r23, r19
    2fe2:	f0 01       	movw	r30, r0
    2fe4:	82 9f       	mul	r24, r18
    2fe6:	e0 0d       	add	r30, r0
    2fe8:	f1 1d       	adc	r31, r1
    2fea:	64 9f       	mul	r22, r20
    2fec:	e0 0d       	add	r30, r0
    2fee:	f1 1d       	adc	r31, r1
    2ff0:	92 9f       	mul	r25, r18
    2ff2:	f0 0d       	add	r31, r0
    2ff4:	83 9f       	mul	r24, r19
    2ff6:	f0 0d       	add	r31, r0
    2ff8:	74 9f       	mul	r23, r20
    2ffa:	f0 0d       	add	r31, r0
    2ffc:	65 9f       	mul	r22, r21
    2ffe:	f0 0d       	add	r31, r0
    3000:	99 27       	eor	r25, r25
    3002:	72 9f       	mul	r23, r18
    3004:	b0 0d       	add	r27, r0
    3006:	e1 1d       	adc	r30, r1
    3008:	f9 1f       	adc	r31, r25
    300a:	63 9f       	mul	r22, r19
    300c:	b0 0d       	add	r27, r0
    300e:	e1 1d       	adc	r30, r1
    3010:	f9 1f       	adc	r31, r25
    3012:	bd 01       	movw	r22, r26
    3014:	cf 01       	movw	r24, r30
    3016:	11 24       	eor	r1, r1
    3018:	08 95       	ret

0000301a <__udivmodsi4>:
    301a:	a1 e2       	ldi	r26, 0x21	; 33
    301c:	1a 2e       	mov	r1, r26
    301e:	aa 1b       	sub	r26, r26
    3020:	bb 1b       	sub	r27, r27
    3022:	fd 01       	movw	r30, r26
    3024:	0d c0       	rjmp	.+26     	; 0x3040 <__udivmodsi4_ep>

00003026 <__udivmodsi4_loop>:
    3026:	aa 1f       	adc	r26, r26
    3028:	bb 1f       	adc	r27, r27
    302a:	ee 1f       	adc	r30, r30
    302c:	ff 1f       	adc	r31, r31
    302e:	a2 17       	cp	r26, r18
    3030:	b3 07       	cpc	r27, r19
    3032:	e4 07       	cpc	r30, r20
    3034:	f5 07       	cpc	r31, r21
    3036:	20 f0       	brcs	.+8      	; 0x3040 <__udivmodsi4_ep>
    3038:	a2 1b       	sub	r26, r18
    303a:	b3 0b       	sbc	r27, r19
    303c:	e4 0b       	sbc	r30, r20
    303e:	f5 0b       	sbc	r31, r21

00003040 <__udivmodsi4_ep>:
    3040:	66 1f       	adc	r22, r22
    3042:	77 1f       	adc	r23, r23
    3044:	88 1f       	adc	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	1a 94       	dec	r1
    304a:	69 f7       	brne	.-38     	; 0x3026 <__udivmodsi4_loop>
    304c:	60 95       	com	r22
    304e:	70 95       	com	r23
    3050:	80 95       	com	r24
    3052:	90 95       	com	r25
    3054:	9b 01       	movw	r18, r22
    3056:	ac 01       	movw	r20, r24
    3058:	bd 01       	movw	r22, r26
    305a:	cf 01       	movw	r24, r30
    305c:	08 95       	ret

0000305e <__prologue_saves__>:
    305e:	2f 92       	push	r2
    3060:	3f 92       	push	r3
    3062:	4f 92       	push	r4
    3064:	5f 92       	push	r5
    3066:	6f 92       	push	r6
    3068:	7f 92       	push	r7
    306a:	8f 92       	push	r8
    306c:	9f 92       	push	r9
    306e:	af 92       	push	r10
    3070:	bf 92       	push	r11
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	ca 1b       	sub	r28, r26
    3088:	db 0b       	sbc	r29, r27
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	09 94       	ijmp

00003096 <__epilogue_restores__>:
    3096:	2a 88       	ldd	r2, Y+18	; 0x12
    3098:	39 88       	ldd	r3, Y+17	; 0x11
    309a:	48 88       	ldd	r4, Y+16	; 0x10
    309c:	5f 84       	ldd	r5, Y+15	; 0x0f
    309e:	6e 84       	ldd	r6, Y+14	; 0x0e
    30a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    30a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    30a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    30a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    30a8:	b9 84       	ldd	r11, Y+9	; 0x09
    30aa:	c8 84       	ldd	r12, Y+8	; 0x08
    30ac:	df 80       	ldd	r13, Y+7	; 0x07
    30ae:	ee 80       	ldd	r14, Y+6	; 0x06
    30b0:	fd 80       	ldd	r15, Y+5	; 0x05
    30b2:	0c 81       	ldd	r16, Y+4	; 0x04
    30b4:	1b 81       	ldd	r17, Y+3	; 0x03
    30b6:	aa 81       	ldd	r26, Y+2	; 0x02
    30b8:	b9 81       	ldd	r27, Y+1	; 0x01
    30ba:	ce 0f       	add	r28, r30
    30bc:	d1 1d       	adc	r29, r1
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	ed 01       	movw	r28, r26
    30ca:	08 95       	ret

000030cc <itoa>:
    30cc:	fb 01       	movw	r30, r22
    30ce:	9f 01       	movw	r18, r30
    30d0:	e8 94       	clt
    30d2:	42 30       	cpi	r20, 0x02	; 2
    30d4:	c4 f0       	brlt	.+48     	; 0x3106 <itoa+0x3a>
    30d6:	45 32       	cpi	r20, 0x25	; 37
    30d8:	b4 f4       	brge	.+44     	; 0x3106 <itoa+0x3a>
    30da:	4a 30       	cpi	r20, 0x0A	; 10
    30dc:	29 f4       	brne	.+10     	; 0x30e8 <itoa+0x1c>
    30de:	97 fb       	bst	r25, 7
    30e0:	1e f4       	brtc	.+6      	; 0x30e8 <itoa+0x1c>
    30e2:	90 95       	com	r25
    30e4:	81 95       	neg	r24
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	64 2f       	mov	r22, r20
    30ea:	77 27       	eor	r23, r23
    30ec:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodhi4>
    30f0:	80 5d       	subi	r24, 0xD0	; 208
    30f2:	8a 33       	cpi	r24, 0x3A	; 58
    30f4:	0c f0       	brlt	.+2      	; 0x30f8 <itoa+0x2c>
    30f6:	89 5d       	subi	r24, 0xD9	; 217
    30f8:	81 93       	st	Z+, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	a1 f7       	brne	.-24     	; 0x30e8 <itoa+0x1c>
    3100:	16 f4       	brtc	.+4      	; 0x3106 <itoa+0x3a>
    3102:	5d e2       	ldi	r21, 0x2D	; 45
    3104:	51 93       	st	Z+, r21
    3106:	10 82       	st	Z, r1
    3108:	c9 01       	movw	r24, r18
    310a:	0c 94 87 18 	jmp	0x310e	; 0x310e <strrev>

0000310e <strrev>:
    310e:	dc 01       	movw	r26, r24
    3110:	fc 01       	movw	r30, r24
    3112:	67 2f       	mov	r22, r23
    3114:	71 91       	ld	r23, Z+
    3116:	77 23       	and	r23, r23
    3118:	e1 f7       	brne	.-8      	; 0x3112 <strrev+0x4>
    311a:	32 97       	sbiw	r30, 0x02	; 2
    311c:	04 c0       	rjmp	.+8      	; 0x3126 <strrev+0x18>
    311e:	7c 91       	ld	r23, X
    3120:	6d 93       	st	X+, r22
    3122:	70 83       	st	Z, r23
    3124:	62 91       	ld	r22, -Z
    3126:	ae 17       	cp	r26, r30
    3128:	bf 07       	cpc	r27, r31
    312a:	c8 f3       	brcs	.-14     	; 0x311e <strrev+0x10>
    312c:	08 95       	ret

0000312e <__udivmodhi4>:
    312e:	aa 1b       	sub	r26, r26
    3130:	bb 1b       	sub	r27, r27
    3132:	51 e1       	ldi	r21, 0x11	; 17
    3134:	07 c0       	rjmp	.+14     	; 0x3144 <__udivmodhi4_ep>

00003136 <__udivmodhi4_loop>:
    3136:	aa 1f       	adc	r26, r26
    3138:	bb 1f       	adc	r27, r27
    313a:	a6 17       	cp	r26, r22
    313c:	b7 07       	cpc	r27, r23
    313e:	10 f0       	brcs	.+4      	; 0x3144 <__udivmodhi4_ep>
    3140:	a6 1b       	sub	r26, r22
    3142:	b7 0b       	sbc	r27, r23

00003144 <__udivmodhi4_ep>:
    3144:	88 1f       	adc	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	5a 95       	dec	r21
    314a:	a9 f7       	brne	.-22     	; 0x3136 <__udivmodhi4_loop>
    314c:	80 95       	com	r24
    314e:	90 95       	com	r25
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	08 95       	ret

00003156 <_exit>:
    3156:	f8 94       	cli

00003158 <__stop_program>:
    3158:	ff cf       	rjmp	.-2      	; 0x3158 <__stop_program>
